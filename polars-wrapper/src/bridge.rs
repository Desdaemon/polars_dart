// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.18.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments
)]

// Section: imports

use crate::wrapper::df::*;
use crate::wrapper::entry::*;
use crate::wrapper::series::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!();

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_DataFrame_clone_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_clone",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::clone(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_column_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    column: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_column",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_column = column.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::column(&api_that, api_column)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_column_at_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    index: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_column_at",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::column_at(&api_that, api_index),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_column_names_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_column_names",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::df::DataFrame::column_names(&api_that),
                )
            })())
        },
    )
}
fn wire_DataFrame_columns_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    columns: impl CstDecode<Vec<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_columns",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_columns = columns.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::columns(&api_that, api_columns)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_describe_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    percentiles: impl CstDecode<Option<Vec<f64>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_describe",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_percentiles = percentiles.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                            crate::wrapper::df::DataFrame::describe(&api_that, api_percentiles)?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_DataFrame_drop_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    column: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_drop",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_column = column.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::drop(&api_that, api_column)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_drop_in_place_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    column: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_drop_in_place",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_column = column.cst_decode();
            transform_result_dco((move || {
                let mut api_that = api_that.rust_auto_opaque_decode_sync_ref_mut();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::drop_in_place(&mut api_that, api_column)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_dtypes_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_dtypes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::df::DataFrame::dtypes(&api_that),
                )
            })())
        },
    )
}
fn wire_DataFrame_dump_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_dump",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::df::DataFrame::dump(&api_that),
                )
            })())
        },
    )
}
fn wire_DataFrame_estimated_size_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_estimated_size",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::df::DataFrame::estimated_size(&api_that),
                )
            })())
        },
    )
}
fn wire_DataFrame_get_columns_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_get_columns",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::get_columns(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_get_row_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    index: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_get_row",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::df::DataFrame::get_row(&api_that, api_index)
            })())
        },
    )
}
fn wire_DataFrame_head_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    length: impl CstDecode<Option<usize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_head",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::head(&api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_height_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_height",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::df::DataFrame::height(&api_that),
                )
            })())
        },
    )
}
fn wire_DataFrame_is_empty_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_is_empty",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::df::DataFrame::is_empty(&api_that),
                )
            })())
        },
    )
}
fn wire_DataFrame_iter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_iter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                    crate::wrapper::df::DataFrame::iter(
                        &api_that,
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, Vec<flutter_rust_bridge::for_generated::DartAbi>>(
                                ),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_DataFrame_lazy_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    projection_pushdown: impl CstDecode<Option<bool>>,
    predicate_pushdown: impl CstDecode<Option<bool>>,
    type_coercion: impl CstDecode<Option<bool>>,
    simplify_expressions: impl CstDecode<Option<bool>>,
    slice_pushdown: impl CstDecode<Option<bool>>,
    streaming: impl CstDecode<Option<bool>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_lazy",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_projection_pushdown = projection_pushdown.cst_decode();
            let api_predicate_pushdown = predicate_pushdown.cst_decode();
            let api_type_coercion = type_coercion.cst_decode();
            let api_simplify_expressions = simplify_expressions.cst_decode();
            let api_slice_pushdown = slice_pushdown.cst_decode();
            let api_streaming = streaming.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::lazy(
                            api_that,
                            api_projection_pushdown,
                            api_predicate_pushdown,
                            api_type_coercion,
                            api_simplify_expressions,
                            api_slice_pushdown,
                            api_streaming,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_max_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::max(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_of_lits_impl(
    series: impl CstDecode<Option<Vec<(String, crate::wrapper::df::Literals)>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_of_lits",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_series = series.cst_decode();
            transform_result_dco((move || {
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::of_lits(api_series)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_reverse_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_reverse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::reverse(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_sample_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    n: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    with_replacement: impl CstDecode<bool>,
    shuffle: impl CstDecode<bool>,
    seed: impl CstDecode<Option<u64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_sample",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            let api_with_replacement = with_replacement.cst_decode();
            let api_shuffle = shuffle.cst_decode();
            let api_seed = seed.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                let api_n = api_n.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::sample(
                            &api_that,
                            &api_n,
                            api_with_replacement,
                            api_shuffle,
                            api_seed,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_schema_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_schema",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::schema(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_select_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    columns: impl CstDecode<Vec<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_select",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_columns = columns.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::select(&api_that, api_columns)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_shape_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_shape",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::df::DataFrame::shape(&api_that),
                )
            })())
        },
    )
}
fn wire_DataFrame_sort_in_place_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    by_column: impl CstDecode<Vec<String>>,
    descending: impl CstDecode<Vec<bool>>,
    maintain_order: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_sort_in_place",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_by_column = by_column.cst_decode();
            let api_descending = descending.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                let mut api_that = api_that.rust_auto_opaque_decode_sync_ref_mut();
                crate::wrapper::df::DataFrame::sort_in_place(
                    &mut api_that,
                    api_by_column,
                    api_descending,
                    api_maintain_order,
                )
            })())
        },
    )
}
fn wire_DataFrame_tail_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    length: impl CstDecode<Option<usize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::tail(&api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_width_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_width",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::df::DataFrame::width(&api_that),
                )
            })())
        },
    )
}
fn wire_DataFrame_with_row_count_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    name: impl CstDecode<String>,
    offset: impl CstDecode<Option<u32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_with_row_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_name = name.cst_decode();
            let api_offset = offset.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::DataFrame::with_row_count(
                            &api_that, api_name, api_offset,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_write_csv_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>,
    >,
    path: impl CstDecode<String>,
    include_bom: impl CstDecode<bool>,
    include_header: impl CstDecode<bool>,
    append: impl CstDecode<bool>,
    create_new: impl CstDecode<bool>,
    null_value: impl CstDecode<Option<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_write_csv",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_path = path.cst_decode();
            let api_include_bom = include_bom.cst_decode();
            let api_include_header = include_header.cst_decode();
            let api_append = append.cst_decode();
            let api_create_new = create_new.cst_decode();
            let api_null_value = null_value.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let mut api_that = api_that.rust_auto_opaque_decode_sync_ref_mut();
                    crate::wrapper::df::DataFrame::write_csv(
                        &mut api_that,
                        api_path,
                        api_include_bom,
                        api_include_header,
                        api_append,
                        api_create_new,
                        api_null_value,
                    )
                })())
            }
        },
    )
}
fn wire_LazyFrame_cache_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_cache",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::cache(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_collect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    streaming: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_collect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_streaming = streaming.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                            crate::wrapper::df::LazyFrame::collect(api_that, api_streaming)?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_LazyFrame_cross_join_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    other: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_cross_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                let api_other = api_other.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::cross_join(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_drop_nulls_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    subset: impl CstDecode<Option<Vec<crate::wrapper::expr::Expr>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_drop_nulls",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_subset = subset.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::drop_nulls(api_that, api_subset),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_explode_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    columns: impl CstDecode<Vec<crate::wrapper::expr::Expr>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_explode",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_columns = columns.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::explode(api_that, api_columns),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_fetch_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    n_rows: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_fetch",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n_rows = n_rows.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                            crate::wrapper::df::LazyFrame::fetch(api_that, api_n_rows)?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_LazyFrame_filter_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    pred: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_filter",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pred = pred.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::filter(api_that, api_pred)?,
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_first_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_first",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::first(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_group_by_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    exprs: impl CstDecode<Vec<crate::wrapper::expr::Expr>>,
    maintain_order: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_group_by",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exprs = exprs.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::group_by(
                            api_that,
                            api_exprs,
                            api_maintain_order,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_inner_join_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    other: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    left_on: impl CstDecode<crate::wrapper::expr::Expr>,
    right_on: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_inner_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_left_on = left_on.cst_decode();
            let api_right_on = right_on.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                let api_other = api_other.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::inner_join(
                            api_that,
                            api_other,
                            api_left_on,
                            api_right_on,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_join_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    other: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    on: impl CstDecode<Option<Vec<crate::wrapper::expr::Expr>>>,
    left_on: impl CstDecode<Option<Vec<crate::wrapper::expr::Expr>>>,
    right_on: impl CstDecode<Option<Vec<crate::wrapper::expr::Expr>>>,
    suffix: impl CstDecode<String>,
    how: impl CstDecode<crate::wrapper::entry::JoinType>,
    allow_parallel: impl CstDecode<bool>,
    force_parallel: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_on = on.cst_decode();
            let api_left_on = left_on.cst_decode();
            let api_right_on = right_on.cst_decode();
            let api_suffix = suffix.cst_decode();
            let api_how = how.cst_decode();
            let api_allow_parallel = allow_parallel.cst_decode();
            let api_force_parallel = force_parallel.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                let api_other = api_other.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::join(
                            api_that,
                            api_other,
                            api_on,
                            api_left_on,
                            api_right_on,
                            api_suffix,
                            api_how,
                            api_allow_parallel,
                            api_force_parallel,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_last_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_last",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::last(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_left_join_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    other: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    left_on: impl CstDecode<crate::wrapper::expr::Expr>,
    right_on: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_left_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_left_on = left_on.cst_decode();
            let api_right_on = right_on.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                let api_other = api_other.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::left_join(
                            api_that,
                            api_other,
                            api_left_on,
                            api_right_on,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_limit_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    n: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_limit",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::limit(api_that, api_n),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_max_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::max(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_mean_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_mean",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::mean(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_median_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_median",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::median(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_melt_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    id_vars: impl CstDecode<Vec<String>>,
    value_vars: impl CstDecode<Vec<String>>,
    variable_name: impl CstDecode<Option<String>>,
    value_name: impl CstDecode<Option<String>>,
    streamable: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_melt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_id_vars = id_vars.cst_decode();
            let api_value_vars = value_vars.cst_decode();
            let api_variable_name = variable_name.cst_decode();
            let api_value_name = value_name.cst_decode();
            let api_streamable = streamable.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::melt(
                            api_that,
                            api_id_vars,
                            api_value_vars,
                            api_variable_name,
                            api_value_name,
                            api_streamable,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_min_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::min(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_null_count_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_null_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::null_count(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_outer_join_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    other: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    left_on: impl CstDecode<crate::wrapper::expr::Expr>,
    right_on: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_outer_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_left_on = left_on.cst_decode();
            let api_right_on = right_on.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                let api_other = api_other.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::outer_join(
                            api_that,
                            api_other,
                            api_left_on,
                            api_right_on,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_quantile_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    quantile: impl CstDecode<crate::wrapper::expr::Expr>,
    interpol: impl CstDecode<crate::wrapper::entry::QuantileInterpolOptions>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_quantile",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_quantile = quantile.cst_decode();
            let api_interpol = interpol.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::quantile(
                            api_that,
                            api_quantile,
                            api_interpol,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_reverse_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_reverse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::reverse(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_select_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    exprs: impl CstDecode<Vec<crate::wrapper::expr::Expr>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_select",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exprs = exprs.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::select(api_that, api_exprs)?,
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_slice_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    offset: impl CstDecode<i64>,
    len: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_slice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_offset = offset.cst_decode();
            let api_len = len.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::slice(api_that, api_offset, api_len),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_sort_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    by_column: impl CstDecode<String>,
    descending: impl CstDecode<bool>,
    nulls_last: impl CstDecode<bool>,
    multithreaded: impl CstDecode<bool>,
    maintain_order: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_sort",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_by_column = by_column.cst_decode();
            let api_descending = descending.cst_decode();
            let api_nulls_last = nulls_last.cst_decode();
            let api_multithreaded = multithreaded.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::sort(
                            api_that,
                            api_by_column,
                            api_descending,
                            api_nulls_last,
                            api_multithreaded,
                            api_maintain_order,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_std_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    ddof: impl CstDecode<u8>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_std",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::std(api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_sum_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::sum(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_tail_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    n: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::tail(api_that, api_n),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_unique_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    subset: impl CstDecode<Option<Vec<String>>>,
    keep_strategy: impl CstDecode<crate::wrapper::df::UniqueKeepStrategy>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_unique",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_subset = subset.cst_decode();
            let api_keep_strategy = keep_strategy.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::unique(
                            api_that,
                            api_subset,
                            api_keep_strategy,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_variance_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    ddof: impl CstDecode<u8>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_variance",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::variance(api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_with_column_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    expr: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_with_column",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_expr = expr.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::with_column(api_that, api_expr),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_with_columns_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    exprs: impl CstDecode<Vec<crate::wrapper::expr::Expr>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_with_columns",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exprs = exprs.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::with_columns(api_that, api_exprs),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_with_row_count_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>,
    >,
    name: impl CstDecode<String>,
    offset: impl CstDecode<Option<u32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_with_row_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_name = name.cst_decode();
            let api_offset = offset.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::df::LazyFrame::with_row_count(
                            api_that, api_name, api_offset,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_read_csv_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    path: impl CstDecode<String>,
    dtypes_slice: impl CstDecode<Option<Vec<crate::wrapper::expr::DataType>>>,
    has_header: impl CstDecode<Option<bool>>,
    columns: impl CstDecode<Option<Vec<String>>>,
    comment_char: impl CstDecode<Option<String>>,
    eol_char: impl CstDecode<Option<String>>,
    chunk_size: impl CstDecode<Option<usize>>,
    sample_size: impl CstDecode<Option<usize>>,
    row_count: impl CstDecode<Option<crate::wrapper::entry::RowCount>>,
    encoding: impl CstDecode<Option<crate::wrapper::entry::CsvEncoding>>,
    n_rows: impl CstDecode<Option<usize>>,
    n_threads: impl CstDecode<Option<usize>>,
    null_values: impl CstDecode<Option<crate::wrapper::entry::NullValues>>,
    projection: impl CstDecode<Option<Vec<u32>>>,
    quote_char: impl CstDecode<Option<String>>,
    skip_rows: impl CstDecode<usize>,
    skip_rows_after_header: impl CstDecode<usize>,
    ignore_errors: impl CstDecode<bool>,
    rechunk: impl CstDecode<bool>,
    try_parse_dates: impl CstDecode<bool>,
    low_memory: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "read_csv",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_path = path.cst_decode();
            let api_dtypes_slice = dtypes_slice.cst_decode();
            let api_has_header = has_header.cst_decode();
            let api_columns = columns.cst_decode();
            let api_comment_char = comment_char.cst_decode();
            let api_eol_char = eol_char.cst_decode();
            let api_chunk_size = chunk_size.cst_decode();
            let api_sample_size = sample_size.cst_decode();
            let api_row_count = row_count.cst_decode();
            let api_encoding = encoding.cst_decode();
            let api_n_rows = n_rows.cst_decode();
            let api_n_threads = n_threads.cst_decode();
            let api_null_values = null_values.cst_decode();
            let api_projection = projection.cst_decode();
            let api_quote_char = quote_char.cst_decode();
            let api_skip_rows = skip_rows.cst_decode();
            let api_skip_rows_after_header = skip_rows_after_header.cst_decode();
            let api_ignore_errors = ignore_errors.cst_decode();
            let api_rechunk = rechunk.cst_decode();
            let api_try_parse_dates = try_parse_dates.cst_decode();
            let api_low_memory = low_memory.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                            crate::wrapper::entry::read_csv(
                                api_path,
                                api_dtypes_slice,
                                api_has_header,
                                api_columns,
                                api_comment_char,
                                api_eol_char,
                                api_chunk_size,
                                api_sample_size,
                                api_row_count,
                                api_encoding,
                                api_n_rows,
                                api_n_threads,
                                api_null_values,
                                api_projection,
                                api_quote_char,
                                api_skip_rows,
                                api_skip_rows_after_header,
                                api_ignore_errors,
                                api_rechunk,
                                api_try_parse_dates,
                                api_low_memory,
                            )?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_read_json_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    path: impl CstDecode<String>,
    batch_size: impl CstDecode<Option<usize>>,
    projection: impl CstDecode<Option<Vec<String>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "read_json",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_path = path.cst_decode();
            let api_batch_size = batch_size.cst_decode();
            let api_projection = projection.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                            crate::wrapper::entry::read_json(
                                api_path,
                                api_batch_size,
                                api_projection,
                            )?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_scan_csv_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    path: impl CstDecode<String>,
    dtype_overwrite: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Option<Schema>>>,
    >,
    has_header: impl CstDecode<Option<bool>>,
    comment_char: impl CstDecode<Option<String>>,
    eol_char: impl CstDecode<Option<String>>,
    quote_char: impl CstDecode<Option<String>>,
    skip_rows: impl CstDecode<usize>,
    skip_rows_after_header: impl CstDecode<usize>,
    row_count: impl CstDecode<Option<crate::wrapper::entry::RowCount>>,
    encoding: impl CstDecode<Option<crate::wrapper::entry::CsvEncoding>>,
    n_rows: impl CstDecode<Option<usize>>,
    null_values: impl CstDecode<Option<crate::wrapper::entry::NullValues>>,
    ignore_errors: impl CstDecode<bool>,
    rechunk: impl CstDecode<bool>,
    try_parse_dates: impl CstDecode<bool>,
    infer_schema_length: impl CstDecode<Option<usize>>,
    cache: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "scan_csv",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_path = path.cst_decode();
            let api_dtype_overwrite = dtype_overwrite.cst_decode();
            let api_has_header = has_header.cst_decode();
            let api_comment_char = comment_char.cst_decode();
            let api_eol_char = eol_char.cst_decode();
            let api_quote_char = quote_char.cst_decode();
            let api_skip_rows = skip_rows.cst_decode();
            let api_skip_rows_after_header = skip_rows_after_header.cst_decode();
            let api_row_count = row_count.cst_decode();
            let api_encoding = encoding.cst_decode();
            let api_n_rows = n_rows.cst_decode();
            let api_null_values = null_values.cst_decode();
            let api_ignore_errors = ignore_errors.cst_decode();
            let api_rechunk = rechunk.cst_decode();
            let api_try_parse_dates = try_parse_dates.cst_decode();
            let api_infer_schema_length = infer_schema_length.cst_decode();
            let api_cache = cache.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_dtype_overwrite =
                        api_dtype_overwrite.rust_auto_opaque_decode_sync_owned();
                    Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                            crate::wrapper::entry::scan_csv(
                                api_path,
                                api_dtype_overwrite,
                                api_has_header,
                                api_comment_char,
                                api_eol_char,
                                api_quote_char,
                                api_skip_rows,
                                api_skip_rows_after_header,
                                api_row_count,
                                api_encoding,
                                api_n_rows,
                                api_null_values,
                                api_ignore_errors,
                                api_rechunk,
                                api_try_parse_dates,
                                api_infer_schema_length,
                                api_cache,
                            )?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_Expr_abs_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_abs",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::abs(api_that))
            })())
        },
    )
}
fn wire_Expr_all_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    ignore_nulls: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_all",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ignore_nulls = ignore_nulls.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::all(api_that, api_ignore_nulls))
            })())
        },
    )
}
fn wire_Expr_any_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    ignore_nulls: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_any",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ignore_nulls = ignore_nulls.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::any(api_that, api_ignore_nulls))
            })())
        },
    )
}
fn wire_Expr_append_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    other: impl CstDecode<crate::wrapper::expr::Expr>,
    upcast: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_append",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_upcast = upcast.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::append(
                    api_that, api_other, api_upcast,
                ))
            })())
        },
    )
}
fn wire_Expr_arccos_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arccos",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arccos(api_that))
            })())
        },
    )
}
fn wire_Expr_arccosh_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arccosh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arccosh(api_that))
            })())
        },
    )
}
fn wire_Expr_arcsin_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arcsin",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arcsin(api_that))
            })())
        },
    )
}
fn wire_Expr_arcsinh_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arcsinh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arcsinh(api_that))
            })())
        },
    )
}
fn wire_Expr_arctan_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arctan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arctan(api_that))
            })())
        },
    )
}
fn wire_Expr_arctan2_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    x: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arctan2",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_x = x.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arctan2(api_that, api_x))
            })())
        },
    )
}
fn wire_Expr_arctanh_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arctanh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arctanh(api_that))
            })())
        },
    )
}
fn wire_Expr_arg_max_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arg_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arg_max(api_that))
            })())
        },
    )
}
fn wire_Expr_arg_min_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arg_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arg_min(api_that))
            })())
        },
    )
}
fn wire_Expr_arg_sort_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    descending: impl CstDecode<bool>,
    nulls_last: impl CstDecode<bool>,
    multithreaded: impl CstDecode<bool>,
    maintain_order: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arg_sort",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_descending = descending.cst_decode();
            let api_nulls_last = nulls_last.cst_decode();
            let api_multithreaded = multithreaded.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arg_sort(
                    api_that,
                    api_descending,
                    api_nulls_last,
                    api_multithreaded,
                    api_maintain_order,
                ))
            })())
        },
    )
}
fn wire_Expr_arg_unique_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arg_unique",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::arg_unique(api_that))
            })())
        },
    )
}
fn wire_Expr_backward_fill_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    limit: impl CstDecode<Option<u32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_backward_fill",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_limit = limit.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::backward_fill(
                    api_that, api_limit,
                ))
            })())
        },
    )
}
fn wire_Expr_cbrt_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cbrt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::cbrt(api_that))
            })())
        },
    )
}
fn wire_Expr_ceil_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_ceil",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::ceil(api_that))
            })())
        },
    )
}
fn wire_Expr_clip_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    min: impl CstDecode<crate::wrapper::expr::Expr>,
    max: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_clip",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min = min.cst_decode();
            let api_max = max.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::clip(api_that, api_min, api_max))
            })())
        },
    )
}
fn wire_Expr_clip_max_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    max: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_clip_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_max = max.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::clip_max(api_that, api_max))
            })())
        },
    )
}
fn wire_Expr_clip_min_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    min: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_clip_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min = min.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::clip_min(api_that, api_min))
            })())
        },
    )
}
fn wire_Expr_cos_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cos",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::cos(api_that))
            })())
        },
    )
}
fn wire_Expr_cosh_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cosh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::cosh(api_that))
            })())
        },
    )
}
fn wire_Expr_cot_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cot",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::cot(api_that))
            })())
        },
    )
}
fn wire_Expr_count_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::count(api_that))
            })())
        },
    )
}
fn wire_Expr_cum_count_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    reverse: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::cum_count(api_that, api_reverse))
            })())
        },
    )
}
fn wire_Expr_cum_max_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    reverse: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::cum_max(api_that, api_reverse))
            })())
        },
    )
}
fn wire_Expr_cum_min_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    reverse: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::cum_min(api_that, api_reverse))
            })())
        },
    )
}
fn wire_Expr_cum_prod_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    reverse: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_prod",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::cum_prod(api_that, api_reverse))
            })())
        },
    )
}
fn wire_Expr_cum_sum_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    reverse: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::cum_sum(api_that, api_reverse))
            })())
        },
    )
}
fn wire_Expr_degrees_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_degrees",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::degrees(api_that))
            })())
        },
    )
}
fn wire_Expr_div_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    other: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_div",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::div(api_that, api_other))
            })())
        },
    )
}
fn wire_Expr_dot_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    other: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_dot",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::dot(api_that, api_other))
            })())
        },
    )
}
fn wire_Expr_drop_nans_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_drop_nans",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::drop_nans(api_that))
            })())
        },
    )
}
fn wire_Expr_drop_nulls_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_drop_nulls",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::drop_nulls(api_that))
            })())
        },
    )
}
fn wire_Expr_entropy_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    base: impl CstDecode<f64>,
    normalize: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_entropy",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_base = base.cst_decode();
            let api_normalize = normalize.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::entropy(
                    api_that,
                    api_base,
                    api_normalize,
                ))
            })())
        },
    )
}
fn wire_Expr_exp_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_exp",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::exp(api_that))
            })())
        },
    )
}
fn wire_Expr_fill_nan_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    value: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_fill_nan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_value = value.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::fill_nan(api_that, api_value))
            })())
        },
    )
}
fn wire_Expr_fill_null_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    value: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_fill_null",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_value = value.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::fill_null(api_that, api_value))
            })())
        },
    )
}
fn wire_Expr_floor_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_floor",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::floor(api_that))
            })())
        },
    )
}
fn wire_Expr_forward_fill_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    limit: impl CstDecode<Option<u32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_forward_fill",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_limit = limit.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::forward_fill(
                    api_that, api_limit,
                ))
            })())
        },
    )
}
fn wire_Expr_is_finite_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_finite",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::is_finite(api_that))
            })())
        },
    )
}
fn wire_Expr_is_in_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    other: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_in",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::is_in(api_that, api_other))
            })())
        },
    )
}
fn wire_Expr_is_nan_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_nan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::is_nan(api_that))
            })())
        },
    )
}
fn wire_Expr_is_not_nan_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_not_nan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::is_not_nan(api_that))
            })())
        },
    )
}
fn wire_Expr_is_not_null_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_not_null",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::is_not_null(api_that))
            })())
        },
    )
}
fn wire_Expr_is_null_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_null",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::is_null(api_that))
            })())
        },
    )
}
fn wire_Expr_log_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    base: impl CstDecode<f64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_log",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_base = base.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::log(api_that, api_base))
            })())
        },
    )
}
fn wire_Expr_log1p_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_log1p",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::log1p(api_that))
            })())
        },
    )
}
fn wire_Expr_lower_bound_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_lower_bound",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::lower_bound(api_that))
            })())
        },
    )
}
fn wire_Expr_not_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_not",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::not(api_that))
            })())
        },
    )
}
fn wire_Expr_null_count_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_null_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::null_count(api_that))
            })())
        },
    )
}
fn wire_Expr_pow_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    exponent: impl CstDecode<f64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_pow",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exponent = exponent.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::pow(api_that, api_exponent))
            })())
        },
    )
}
fn wire_Expr_product_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_product",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::product(api_that))
            })())
        },
    )
}
fn wire_Expr_radians_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_radians",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::radians(api_that))
            })())
        },
    )
}
fn wire_Expr_reshape_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    dims: impl CstDecode<Vec<i64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_reshape",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_dims = dims.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::reshape(api_that, api_dims))
            })())
        },
    )
}
fn wire_Expr_reverse_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_reverse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::reverse(api_that))
            })())
        },
    )
}
fn wire_Expr_rolling_max_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<String>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::rolling_max(
                    api_that,
                    api_window_size,
                    api_min_periods,
                    api_weights,
                    api_center,
                    api_by,
                    api_closed_window,
                ))
            })())
        },
    )
}
fn wire_Expr_rolling_mean_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<String>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_mean",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::rolling_mean(
                    api_that,
                    api_window_size,
                    api_min_periods,
                    api_weights,
                    api_center,
                    api_by,
                    api_closed_window,
                ))
            })())
        },
    )
}
fn wire_Expr_rolling_median_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<String>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_median",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::rolling_median(
                    api_that,
                    api_window_size,
                    api_min_periods,
                    api_weights,
                    api_center,
                    api_by,
                    api_closed_window,
                ))
            })())
        },
    )
}
fn wire_Expr_rolling_min_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<String>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::rolling_min(
                    api_that,
                    api_window_size,
                    api_min_periods,
                    api_weights,
                    api_center,
                    api_by,
                    api_closed_window,
                ))
            })())
        },
    )
}
fn wire_Expr_rolling_quantile_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<String>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_quantile",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::rolling_quantile(
                    api_that,
                    api_window_size,
                    api_min_periods,
                    api_weights,
                    api_center,
                    api_by,
                    api_closed_window,
                ))
            })())
        },
    )
}
fn wire_Expr_rolling_std_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<String>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_std",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::rolling_std(
                    api_that,
                    api_window_size,
                    api_min_periods,
                    api_weights,
                    api_center,
                    api_by,
                    api_closed_window,
                ))
            })())
        },
    )
}
fn wire_Expr_rolling_sum_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<String>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::rolling_sum(
                    api_that,
                    api_window_size,
                    api_min_periods,
                    api_weights,
                    api_center,
                    api_by,
                    api_closed_window,
                ))
            })())
        },
    )
}
fn wire_Expr_rolling_var_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<String>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_var",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::rolling_var(
                    api_that,
                    api_window_size,
                    api_min_periods,
                    api_weights,
                    api_center,
                    api_by,
                    api_closed_window,
                ))
            })())
        },
    )
}
fn wire_Expr_round_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    decimals: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_round",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_decimals = decimals.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::round(api_that, api_decimals))
            })())
        },
    )
}
fn wire_Expr_round_sig_figs_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    digits: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_round_sig_figs",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_digits = digits.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::round_sig_figs(
                    api_that, api_digits,
                ))
            })())
        },
    )
}
fn wire_Expr_set_sorted_flag_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    sorted: impl CstDecode<crate::wrapper::expr::IsSorted>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_set_sorted_flag",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_sorted = sorted.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::set_sorted_flag(
                    api_that, api_sorted,
                ))
            })())
        },
    )
}
fn wire_Expr_shift_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    n: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_shift",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::shift(api_that, api_n))
            })())
        },
    )
}
fn wire_Expr_shift_and_fill_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    n: impl CstDecode<crate::wrapper::expr::Expr>,
    fill_value: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_shift_and_fill",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            let api_fill_value = fill_value.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::shift_and_fill(
                    api_that,
                    api_n,
                    api_fill_value,
                ))
            })())
        },
    )
}
fn wire_Expr_shrink_dtype_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_shrink_dtype",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::shrink_dtype(api_that))
            })())
        },
    )
}
fn wire_Expr_sin_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_sin",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::sin(api_that))
            })())
        },
    )
}
fn wire_Expr_sinh_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_sinh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::sinh(api_that))
            })())
        },
    )
}
fn wire_Expr_sqrt_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_sqrt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::sqrt(api_that))
            })())
        },
    )
}
fn wire_Expr_tan_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_tan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::tan(api_that))
            })())
        },
    )
}
fn wire_Expr_tanh_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_tanh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::tanh(api_that))
            })())
        },
    )
}
fn wire_Expr_to_dot_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_to_dot",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || crate::wrapper::expr::Expr::to_dot(api_that))())
        },
    )
}
fn wire_Expr_to_physical_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_to_physical",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::to_physical(api_that))
            })())
        },
    )
}
fn wire_Expr_unique_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_unique",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::unique(api_that))
            })())
        },
    )
}
fn wire_Expr_unique_stable_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_unique_stable",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::unique_stable(api_that))
            })())
        },
    )
}
fn wire_Expr_upper_bound_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_upper_bound",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::upper_bound(api_that))
            })())
        },
    )
}
fn wire_Expr_value_counts_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    sort: impl CstDecode<bool>,
    parallel: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_value_counts",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_sort = sort.cst_decode();
            let api_parallel = parallel.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::value_counts(
                    api_that,
                    api_sort,
                    api_parallel,
                ))
            })())
        },
    )
}
fn wire_LiteralValue_from_series_impl(
    series: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LiteralValue_from_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_series = series.cst_decode();
            transform_result_dco((move || {
                let api_series = api_series.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::expr::LiteralValue::from_series(api_series),
                )
            })())
        },
    )
}
fn wire_Expr_list_arg_max_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_arg_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_arg_max(api_that))
            })())
        },
    )
}
fn wire_Expr_list_arg_min_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_arg_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_arg_min(api_that))
            })())
        },
    )
}
fn wire_Expr_list_contains_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    other: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_contains",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_contains(
                    api_that, api_other,
                ))
            })())
        },
    )
}
fn wire_Expr_list_first_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_first",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_first(api_that))
            })())
        },
    )
}
fn wire_Expr_list_get_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    index: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_get",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_get(api_that, api_index))
            })())
        },
    )
}
fn wire_Expr_list_head_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    n: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_head",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_head(api_that, api_n))
            })())
        },
    )
}
fn wire_Expr_list_join_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    separator: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_separator = separator.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_join(
                    api_that,
                    api_separator,
                ))
            })())
        },
    )
}
fn wire_Expr_list_last_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_last",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_last(api_that))
            })())
        },
    )
}
fn wire_Expr_list_len_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_len",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_len(api_that))
            })())
        },
    )
}
fn wire_Expr_list_max_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_max(api_that))
            })())
        },
    )
}
fn wire_Expr_list_mean_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_mean",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_mean(api_that))
            })())
        },
    )
}
fn wire_Expr_list_min_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_min(api_that))
            })())
        },
    )
}
fn wire_Expr_list_reverse_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_reverse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_reverse(api_that))
            })())
        },
    )
}
fn wire_Expr_list_shift_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    periods: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_shift",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_periods = periods.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_shift(
                    api_that,
                    api_periods,
                ))
            })())
        },
    )
}
fn wire_Expr_list_slice_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    offset: impl CstDecode<crate::wrapper::expr::Expr>,
    length: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_slice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_offset = offset.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_slice(
                    api_that, api_offset, api_length,
                ))
            })())
        },
    )
}
fn wire_Expr_list_sum_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_sum(api_that))
            })())
        },
    )
}
fn wire_Expr_list_tail_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    n: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_tail(api_that, api_n))
            })())
        },
    )
}
fn wire_Expr_list_unique_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    maintain_order: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_list_unique",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::list_unique(
                    api_that,
                    api_maintain_order,
                ))
            })())
        },
    )
}
fn wire_LazyGroupBy_agg_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyGroupBy>>,
    >,
    exprs: impl CstDecode<Vec<crate::wrapper::expr::Expr>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyGroupBy_agg",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exprs = exprs.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::LazyGroupBy::agg(api_that, api_exprs),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyGroupBy_head_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyGroupBy>>,
    >,
    n: impl CstDecode<Option<usize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyGroupBy_head",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::LazyGroupBy::head(api_that, api_n),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyGroupBy_tail_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyGroupBy>>,
    >,
    n: impl CstDecode<Option<usize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyGroupBy_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::LazyGroupBy::tail(api_that, api_n),
                    ),
                )
            })())
        },
    )
}
fn wire_Schema_of_impl(
    fields: impl CstDecode<Vec<crate::wrapper::expr::Field>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Schema_of",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_fields = fields.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Schema::of(api_fields),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_add_to_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    other: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_add_to",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                let api_other = api_other.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::add_to(&api_that, &api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_append_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    other: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_append",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let mut api_that = api_that.rust_auto_opaque_decode_sync_ref_mut();
                let api_other = api_other.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::append(&mut api_that, &api_other)
            })())
        },
    )
}
fn wire_Series_apply_scalar_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    op: impl CstDecode<crate::wrapper::expr::Operator>,
    value: impl CstDecode<f64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_apply_scalar",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_op = op.cst_decode();
            let api_value = value.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::apply_scalar(api_that, api_op, api_value)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_as_doubles_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    strict: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_doubles",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_strict = strict.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::as_doubles(&api_that, api_strict)
            })())
        },
    )
}
fn wire_Series_as_durations_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_durations",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::as_durations(&api_that)
            })())
        },
    )
}
fn wire_Series_as_ints_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    strict: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_ints",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_strict = strict.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::as_ints(&api_that, api_strict)
            })())
        },
    )
}
fn wire_Series_as_local_datetime_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_local_datetime",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::as_local_datetime(&api_that)
            })())
        },
    )
}
fn wire_Series_as_naive_datetime_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_naive_datetime",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::as_naive_datetime(&api_that)
            })())
        },
    )
}
fn wire_Series_as_strings_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_strings",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::as_strings(&api_that)
            })())
        },
    )
}
fn wire_Series_as_utc_datetime_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_utc_datetime",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::as_utc_datetime(&api_that)
            })())
        },
    )
}
fn wire_Series_cast_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    dtype: impl CstDecode<crate::wrapper::expr::DataType>,
    strict: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_cast",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_dtype = dtype.cst_decode();
            let api_strict = strict.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::cast(&api_that, api_dtype, api_strict)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_divide_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    other: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_divide",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                let api_other = api_other.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::divide(&api_that, api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_dump_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_dump",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::dump(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_equal_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    other: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    ignore_null: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_equal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_ignore_null = ignore_null.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                let api_other = api_other.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::equal(&api_that, &api_other, api_ignore_null),
                )
            })())
        },
    )
}
fn wire_Series_estimated_size_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_estimated_size",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::estimated_size(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_explode_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_explode",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::explode(&api_that)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_explode_by_offsets_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    offsets: impl CstDecode<Vec<i64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_explode_by_offsets",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_offsets = offsets.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::explode_by_offsets(&api_that, api_offsets)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_get_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    index: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_get",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::get(&api_that, api_index)
            })())
        },
    )
}
fn wire_Series_get_string_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    index: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_get_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::get_string(&api_that, api_index),
                )
            })())
        },
    )
}
fn wire_Series_head_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    length: impl CstDecode<Option<usize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_head",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::head(&api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_into_frame_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_into_frame",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::into_frame(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_into_literal_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_into_literal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::into_literal(api_that),
                )
            })())
        },
    )
}
fn wire_Series_into_literals_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_into_literals",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::into_literals(api_that),
                )
            })())
        },
    )
}
fn wire_Series_is_bool_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_is_bool",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::is_bool(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_is_numeric_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_is_numeric",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::is_numeric(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_is_temporal_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_is_temporal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::is_temporal(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_is_utf8_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_is_utf8",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::is_utf8(&api_that)
            })())
        },
    )
}
fn wire_Series_iter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_iter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                    crate::wrapper::series::Series::iter(
                        &api_that,
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, flutter_rust_bridge::for_generated::DartAbi>(),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_Series_max_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                crate::wrapper::series::Series::max(&api_that)
            })())
        },
    )
}
fn wire_Series_mean_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_mean",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::mean(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_mean_as_series_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_mean_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::mean_as_series(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_median_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_median",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::median(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_median_as_series_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_median_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::median_as_series(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_min_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::min(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_multiply_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    other: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_multiply",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                let api_other = api_other.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::multiply(&api_that, api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_of_lits_impl(
    name: impl CstDecode<String>,
    values: impl CstDecode<crate::wrapper::df::Literals>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_of_lits",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_name = name.cst_decode();
            let api_values = values.cst_decode();
            transform_result_dco((move || {
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::of_lits(api_name, api_values)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_product_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_product",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::product(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_remainder_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    other: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_remainder",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                let api_other = api_other.rust_auto_opaque_decode_sync_owned();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::remainder(&api_that, api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rename_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    name: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rename",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_name = name.cst_decode();
            transform_result_dco((move || {
                let mut api_that = api_that.rust_auto_opaque_decode_sync_ref_mut();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::rename(&mut api_that, api_name),
                )
            })())
        },
    )
}
fn wire_Series_reshape_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    dims: impl CstDecode<Vec<i64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_reshape",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_dims = dims.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::reshape(&api_that, api_dims)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rolling_max_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<Vec<i64>>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
    time_unit: impl CstDecode<Option<crate::wrapper::entry::TimeUnit>>,
    timezone: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rolling_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            let api_time_unit = time_unit.cst_decode();
            let api_timezone = timezone.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::rolling_max(
                            &api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                            api_time_unit,
                            api_timezone,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rolling_mean_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<Vec<i64>>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
    time_unit: impl CstDecode<Option<crate::wrapper::entry::TimeUnit>>,
    timezone: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rolling_mean",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            let api_time_unit = time_unit.cst_decode();
            let api_timezone = timezone.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::rolling_mean(
                            &api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                            api_time_unit,
                            api_timezone,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rolling_median_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<Vec<i64>>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
    time_unit: impl CstDecode<Option<crate::wrapper::entry::TimeUnit>>,
    timezone: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rolling_median",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            let api_time_unit = time_unit.cst_decode();
            let api_timezone = timezone.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::rolling_median(
                            &api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                            api_time_unit,
                            api_timezone,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rolling_min_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<Vec<i64>>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
    time_unit: impl CstDecode<Option<crate::wrapper::entry::TimeUnit>>,
    timezone: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rolling_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            let api_time_unit = time_unit.cst_decode();
            let api_timezone = timezone.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::rolling_min(
                            &api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                            api_time_unit,
                            api_timezone,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rolling_quantile_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<Vec<i64>>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
    time_unit: impl CstDecode<Option<crate::wrapper::entry::TimeUnit>>,
    timezone: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rolling_quantile",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            let api_time_unit = time_unit.cst_decode();
            let api_timezone = timezone.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::rolling_quantile(
                            &api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                            api_time_unit,
                            api_timezone,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rolling_std_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<Vec<i64>>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
    time_unit: impl CstDecode<Option<crate::wrapper::entry::TimeUnit>>,
    timezone: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rolling_std",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            let api_time_unit = time_unit.cst_decode();
            let api_timezone = timezone.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::rolling_std(
                            &api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                            api_time_unit,
                            api_timezone,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rolling_sum_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<Vec<i64>>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
    time_unit: impl CstDecode<Option<crate::wrapper::entry::TimeUnit>>,
    timezone: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rolling_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            let api_time_unit = time_unit.cst_decode();
            let api_timezone = timezone.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::rolling_sum(
                            &api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                            api_time_unit,
                            api_timezone,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rolling_var_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    window_size: impl CstDecode<Option<chrono::Duration>>,
    min_periods: impl CstDecode<usize>,
    weights: impl CstDecode<Option<Vec<f64>>>,
    center: impl CstDecode<bool>,
    by: impl CstDecode<Option<Vec<i64>>>,
    closed_window: impl CstDecode<Option<crate::wrapper::expr::ClosedWindow>>,
    time_unit: impl CstDecode<Option<crate::wrapper::entry::TimeUnit>>,
    timezone: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rolling_var",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            let api_time_unit = time_unit.cst_decode();
            let api_timezone = timezone.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::rolling_var(
                            &api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                            api_time_unit,
                            api_timezone,
                        )?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_shuffle_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    seed: impl CstDecode<Option<u64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_shuffle",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_seed = seed.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::shuffle(&api_that, api_seed),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_sort_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    reverse: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_sort",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::sort(&api_that, api_reverse),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_std_as_series_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    ddof: impl CstDecode<u8>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_std_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::std_as_series(&api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_subtract_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    other: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_subtract",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                let api_other = api_other.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::subtract(&api_that, &api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_sum_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::sum(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_sum_as_series_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_sum_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::sum_as_series(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_tail_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    length: impl CstDecode<Option<usize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::tail(&api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_to_list_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_to_list",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    crate::wrapper::series::Series::to_list(&api_that),
                )
            })())
        },
    )
}
fn wire_Series_unique_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    maintain_order: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_unique",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::unique(&api_that, api_maintain_order)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_var_as_series_impl(
    that: impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>>>,
    ddof: impl CstDecode<u8>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_var_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_sync_ref();
                Result::<_, flutter_rust_bridge::for_generated::anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(
                        crate::wrapper::series::Series::var_as_series(&api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_str_concat_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    delimiter: impl CstDecode<String>,
    ignore_nulls: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_concat",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_delimiter = delimiter.cst_decode();
            let api_ignore_nulls = ignore_nulls.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_concat(
                    api_that,
                    api_delimiter,
                    api_ignore_nulls,
                ))
            })())
        },
    )
}
fn wire_Expr_str_contains_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<crate::wrapper::expr::Expr>,
    strict: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_contains",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            let api_strict = strict.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_contains(
                    api_that, api_pat, api_strict,
                ))
            })())
        },
    )
}
fn wire_Expr_str_contains_literal_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_contains_literal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_contains_literal(
                    api_that, api_pat,
                ))
            })())
        },
    )
}
fn wire_Expr_str_count_matches_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<crate::wrapper::expr::Expr>,
    literal: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_count_matches",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            let api_literal = literal.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_count_matches(
                    api_that,
                    api_pat,
                    api_literal,
                ))
            })())
        },
    )
}
fn wire_Expr_str_ends_with_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_ends_with",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_ends_with(api_that, api_pat))
            })())
        },
    )
}
fn wire_Expr_str_explode_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_explode",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_explode(api_that))
            })())
        },
    )
}
fn wire_Expr_str_extract_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<String>,
    group_index: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_extract",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            let api_group_index = group_index.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_extract(
                    api_that,
                    api_pat,
                    api_group_index,
                ))
            })())
        },
    )
}
fn wire_Expr_str_extract_all_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_extract_all",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_extract_all(
                    api_that, api_pat,
                ))
            })())
        },
    )
}
fn wire_Expr_str_len_bytes_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_len_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_len_bytes(api_that))
            })())
        },
    )
}
fn wire_Expr_str_len_chars_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_len_chars",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_len_chars(api_that))
            })())
        },
    )
}
fn wire_Expr_str_replace_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<crate::wrapper::expr::Expr>,
    val: impl CstDecode<crate::wrapper::expr::Expr>,
    literal: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_replace",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            let api_val = val.cst_decode();
            let api_literal = literal.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_replace(
                    api_that,
                    api_pat,
                    api_val,
                    api_literal,
                ))
            })())
        },
    )
}
fn wire_Expr_str_replace_all_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<crate::wrapper::expr::Expr>,
    val: impl CstDecode<crate::wrapper::expr::Expr>,
    literal: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_replace_all",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            let api_val = val.cst_decode();
            let api_literal = literal.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_replace_all(
                    api_that,
                    api_pat,
                    api_val,
                    api_literal,
                ))
            })())
        },
    )
}
fn wire_Expr_str_replace_n_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<crate::wrapper::expr::Expr>,
    val: impl CstDecode<crate::wrapper::expr::Expr>,
    literal: impl CstDecode<bool>,
    n: impl CstDecode<i64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_replace_n",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            let api_val = val.cst_decode();
            let api_literal = literal.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_replace_n(
                    api_that,
                    api_pat,
                    api_val,
                    api_literal,
                    api_n,
                ))
            })())
        },
    )
}
fn wire_Expr_str_slice_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    start: impl CstDecode<i64>,
    length: impl CstDecode<Option<u64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_slice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_start = start.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_slice(
                    api_that, api_start, api_length,
                ))
            })())
        },
    )
}
fn wire_Expr_str_split_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    by: impl CstDecode<crate::wrapper::expr::Expr>,
    inclusive: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_split",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_by = by.cst_decode();
            let api_inclusive = inclusive.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_split(
                    api_that,
                    api_by,
                    api_inclusive,
                ))
            })())
        },
    )
}
fn wire_Expr_str_split_exact_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    by: impl CstDecode<crate::wrapper::expr::Expr>,
    n: impl CstDecode<usize>,
    inclusive: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_split_exact",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_by = by.cst_decode();
            let api_n = n.cst_decode();
            let api_inclusive = inclusive.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_split_exact(
                    api_that,
                    api_by,
                    api_n,
                    api_inclusive,
                ))
            })())
        },
    )
}
fn wire_Expr_str_splitn_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    by: impl CstDecode<crate::wrapper::expr::Expr>,
    n: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_splitn",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_by = by.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_splitn(
                    api_that, api_by, api_n,
                ))
            })())
        },
    )
}
fn wire_Expr_str_starts_with_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    pat: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_starts_with",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pat = pat.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_starts_with(
                    api_that, api_pat,
                ))
            })())
        },
    )
}
fn wire_Expr_str_strip_chars_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    matches: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_strip_chars",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_matches = matches.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_strip_chars(
                    api_that,
                    api_matches,
                ))
            })())
        },
    )
}
fn wire_Expr_str_strip_chars_end_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    matches: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_strip_chars_end",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_matches = matches.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_strip_chars_end(
                    api_that,
                    api_matches,
                ))
            })())
        },
    )
}
fn wire_Expr_str_strip_chars_start_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    matches: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_strip_chars_start",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_matches = matches.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_strip_chars_start(
                    api_that,
                    api_matches,
                ))
            })())
        },
    )
}
fn wire_Expr_str_strip_prefix_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    prefix: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_strip_prefix",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_prefix = prefix.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_strip_prefix(
                    api_that, api_prefix,
                ))
            })())
        },
    )
}
fn wire_Expr_str_strip_suffix_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    suffix: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_strip_suffix",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_suffix = suffix.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_strip_suffix(
                    api_that, api_suffix,
                ))
            })())
        },
    )
}
fn wire_Expr_str_to_date_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    format: impl CstDecode<Option<String>>,
    strict: impl CstDecode<bool>,
    exact: impl CstDecode<bool>,
    cache: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_to_date",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_format = format.cst_decode();
            let api_strict = strict.cst_decode();
            let api_exact = exact.cst_decode();
            let api_cache = cache.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_to_date(
                    api_that, api_format, api_strict, api_exact, api_cache,
                ))
            })())
        },
    )
}
fn wire_Expr_str_to_datetime_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    time_unit: impl CstDecode<Option<crate::wrapper::entry::TimeUnit>>,
    time_zone: impl CstDecode<Option<String>>,
    format: impl CstDecode<Option<String>>,
    strict: impl CstDecode<bool>,
    exact: impl CstDecode<bool>,
    cache: impl CstDecode<bool>,
    ambiguous: impl CstDecode<crate::wrapper::expr::Ambiguous>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_to_datetime",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_time_unit = time_unit.cst_decode();
            let api_time_zone = time_zone.cst_decode();
            let api_format = format.cst_decode();
            let api_strict = strict.cst_decode();
            let api_exact = exact.cst_decode();
            let api_cache = cache.cst_decode();
            let api_ambiguous = ambiguous.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_to_datetime(
                    api_that,
                    api_time_unit,
                    api_time_zone,
                    api_format,
                    api_strict,
                    api_exact,
                    api_cache,
                    api_ambiguous,
                ))
            })())
        },
    )
}
fn wire_Expr_str_to_integer_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    base: impl CstDecode<u32>,
    strict: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_to_integer",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_base = base.cst_decode();
            let api_strict = strict.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_to_integer(
                    api_that, api_base, api_strict,
                ))
            })())
        },
    )
}
fn wire_Expr_str_to_lowercase_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_to_lowercase",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_to_lowercase(api_that))
            })())
        },
    )
}
fn wire_Expr_str_to_time_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    format: impl CstDecode<Option<String>>,
    strict: impl CstDecode<bool>,
    exact: impl CstDecode<bool>,
    cache: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_to_time",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_format = format.cst_decode();
            let api_strict = strict.cst_decode();
            let api_exact = exact.cst_decode();
            let api_cache = cache.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_to_time(
                    api_that, api_format, api_strict, api_exact, api_cache,
                ))
            })())
        },
    )
}
fn wire_Expr_str_to_uppercase_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_str_to_uppercase",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::str_to_uppercase(api_that))
            })())
        },
    )
}
fn wire_Expr_strptime_impl(
    that: impl CstDecode<crate::wrapper::expr::Expr>,
    dtype: impl CstDecode<crate::wrapper::expr::DataType>,
    format: impl CstDecode<Option<String>>,
    strict: impl CstDecode<bool>,
    exact: impl CstDecode<bool>,
    cache: impl CstDecode<bool>,
    ambiguous: impl CstDecode<crate::wrapper::expr::Ambiguous>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_strptime",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_dtype = dtype.cst_decode();
            let api_format = format.cst_decode();
            let api_strict = strict.cst_decode();
            let api_exact = exact.cst_decode();
            let api_cache = cache.cst_decode();
            let api_ambiguous = ambiguous.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::wrapper::expr::Expr::strptime(
                    api_that,
                    api_dtype,
                    api_format,
                    api_strict,
                    api_exact,
                    api_cache,
                    api_ambiguous,
                ))
            })())
        },
    )
}

// Section: wrapper_structs

#[derive(Clone)]
pub struct mirror_ClosedWindow(crate::wrapper::expr::ClosedWindow);

#[derive(Clone)]
pub struct mirror_CsvEncoding(crate::wrapper::entry::CsvEncoding);

#[derive(Clone)]
pub struct mirror_IsSorted(crate::wrapper::expr::IsSorted);

#[derive(Clone)]
pub struct mirror_JoinType(crate::wrapper::entry::JoinType);

#[derive(Clone)]
pub struct mirror_NullValues(crate::wrapper::entry::NullValues);

#[derive(Clone)]
pub struct mirror_Operator(crate::wrapper::expr::Operator);

#[derive(Clone)]
pub struct mirror_QuantileInterpolOptions(crate::wrapper::entry::QuantileInterpolOptions);

#[derive(Clone)]
pub struct mirror_RowCount(crate::wrapper::entry::RowCount);

#[derive(Clone)]
pub struct mirror_SortOptions(crate::wrapper::expr::SortOptions);

#[derive(Clone)]
pub struct mirror_TimeUnit(crate::wrapper::entry::TimeUnit);

#[derive(Clone)]
pub struct mirror_UniqueKeepStrategy(crate::wrapper::df::UniqueKeepStrategy);

#[derive(Clone)]
pub struct mirror_WindowMapping(crate::wrapper::expr::WindowMapping);

#[derive(Clone)]
pub struct mirror_WindowType(crate::wrapper::expr::WindowType);

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    match None::<crate::wrapper::entry::NullValues>.unwrap() {
        crate::wrapper::entry::NullValues::AllColumnsSingle(field0) => {
            let _: String = field0;
        }
        crate::wrapper::entry::NullValues::AllColumns(field0) => {
            let _: Vec<String> = field0;
        }
        crate::wrapper::entry::NullValues::Named(field0) => {
            let _: Vec<(String, String)> = field0;
        }
    }
    {
        let RowCount = None::<crate::wrapper::entry::RowCount>.unwrap();
        let _: String = RowCount.name;
        let _: u32 = RowCount.offset;
    }
    {
        let SortOptions = None::<crate::wrapper::expr::SortOptions>.unwrap();
        let _: bool = SortOptions.descending;
        let _: bool = SortOptions.nulls_last;
        let _: bool = SortOptions.multithreaded;
        let _: bool = SortOptions.maintain_order;
    }
    match None::<crate::wrapper::expr::WindowType>.unwrap() {
        crate::wrapper::expr::WindowType::Over(field0) => {
            let _: crate::wrapper::expr::WindowMapping = field0;
        }
    }
};

// Section: dart2rust

impl CstDecode<crate::wrapper::expr::Ambiguous> for i32 {
    fn cst_decode(self) -> crate::wrapper::expr::Ambiguous {
        match self {
            0 => crate::wrapper::expr::Ambiguous::Raise,
            1 => crate::wrapper::expr::Ambiguous::Earliest,
            2 => crate::wrapper::expr::Ambiguous::Latest,
            _ => unreachable!("Invalid variant for Ambiguous: {}", self),
        }
    }
}
impl CstDecode<bool> for bool {
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<crate::wrapper::expr::ClosedWindow> for i32 {
    fn cst_decode(self) -> crate::wrapper::expr::ClosedWindow {
        match self {
            0 => crate::wrapper::expr::ClosedWindow::Left,
            1 => crate::wrapper::expr::ClosedWindow::Right,
            2 => crate::wrapper::expr::ClosedWindow::Both,
            3 => crate::wrapper::expr::ClosedWindow::None,
            _ => unreachable!("Invalid variant for ClosedWindow: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::entry::CsvEncoding> for i32 {
    fn cst_decode(self) -> crate::wrapper::entry::CsvEncoding {
        match self {
            0 => crate::wrapper::entry::CsvEncoding::Utf8,
            1 => crate::wrapper::entry::CsvEncoding::LossyUtf8,
            _ => unreachable!("Invalid variant for CsvEncoding: {}", self),
        }
    }
}
impl CstDecode<f32> for f32 {
    fn cst_decode(self) -> f32 {
        self
    }
}
impl CstDecode<f64> for f64 {
    fn cst_decode(self) -> f64 {
        self
    }
}
impl CstDecode<i32> for i32 {
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<crate::wrapper::expr::IsSorted> for i32 {
    fn cst_decode(self) -> crate::wrapper::expr::IsSorted {
        match self {
            0 => crate::wrapper::expr::IsSorted::Ascending,
            1 => crate::wrapper::expr::IsSorted::Descending,
            2 => crate::wrapper::expr::IsSorted::Not,
            _ => unreachable!("Invalid variant for IsSorted: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::entry::JoinType> for i32 {
    fn cst_decode(self) -> crate::wrapper::entry::JoinType {
        match self {
            0 => crate::wrapper::entry::JoinType::Left,
            1 => crate::wrapper::entry::JoinType::Inner,
            2 => crate::wrapper::entry::JoinType::Outer,
            3 => crate::wrapper::entry::JoinType::Cross,
            4 => crate::wrapper::entry::JoinType::Semi,
            5 => crate::wrapper::entry::JoinType::Anti,
            _ => unreachable!("Invalid variant for JoinType: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::expr::Operator> for i32 {
    fn cst_decode(self) -> crate::wrapper::expr::Operator {
        match self {
            0 => crate::wrapper::expr::Operator::Eq,
            1 => crate::wrapper::expr::Operator::EqValidity,
            2 => crate::wrapper::expr::Operator::NotEq,
            3 => crate::wrapper::expr::Operator::NotEqValidity,
            4 => crate::wrapper::expr::Operator::Lt,
            5 => crate::wrapper::expr::Operator::LtEq,
            6 => crate::wrapper::expr::Operator::Gt,
            7 => crate::wrapper::expr::Operator::GtEq,
            8 => crate::wrapper::expr::Operator::Plus,
            9 => crate::wrapper::expr::Operator::Minus,
            10 => crate::wrapper::expr::Operator::Multiply,
            11 => crate::wrapper::expr::Operator::Divide,
            12 => crate::wrapper::expr::Operator::TrueDivide,
            13 => crate::wrapper::expr::Operator::FloorDivide,
            14 => crate::wrapper::expr::Operator::Modulus,
            15 => crate::wrapper::expr::Operator::And,
            16 => crate::wrapper::expr::Operator::Or,
            17 => crate::wrapper::expr::Operator::Xor,
            _ => unreachable!("Invalid variant for Operator: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::entry::QuantileInterpolOptions> for i32 {
    fn cst_decode(self) -> crate::wrapper::entry::QuantileInterpolOptions {
        match self {
            0 => crate::wrapper::entry::QuantileInterpolOptions::Nearest,
            1 => crate::wrapper::entry::QuantileInterpolOptions::Lower,
            2 => crate::wrapper::entry::QuantileInterpolOptions::Higher,
            3 => crate::wrapper::entry::QuantileInterpolOptions::Midpoint,
            4 => crate::wrapper::entry::QuantileInterpolOptions::Linear,
            _ => unreachable!("Invalid variant for QuantileInterpolOptions: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::entry::TimeUnit> for i32 {
    fn cst_decode(self) -> crate::wrapper::entry::TimeUnit {
        match self {
            0 => crate::wrapper::entry::TimeUnit::Nanoseconds,
            1 => crate::wrapper::entry::TimeUnit::Microseconds,
            2 => crate::wrapper::entry::TimeUnit::Milliseconds,
            _ => unreachable!("Invalid variant for TimeUnit: {}", self),
        }
    }
}
impl CstDecode<u32> for u32 {
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<crate::wrapper::df::UniqueKeepStrategy> for i32 {
    fn cst_decode(self) -> crate::wrapper::df::UniqueKeepStrategy {
        match self {
            0 => crate::wrapper::df::UniqueKeepStrategy::First,
            1 => crate::wrapper::df::UniqueKeepStrategy::Last,
            2 => crate::wrapper::df::UniqueKeepStrategy::None,
            3 => crate::wrapper::df::UniqueKeepStrategy::Any,
            _ => unreachable!("Invalid variant for UniqueKeepStrategy: {}", self),
        }
    }
}
impl CstDecode<usize> for usize {
    fn cst_decode(self) -> usize {
        self
    }
}
impl CstDecode<crate::wrapper::expr::WindowMapping> for i32 {
    fn cst_decode(self) -> crate::wrapper::expr::WindowMapping {
        match self {
            0 => crate::wrapper::expr::WindowMapping::GroupsToRows,
            1 => crate::wrapper::expr::WindowMapping::Explode,
            2 => crate::wrapper::expr::WindowMapping::Join,
            _ => unreachable!("Invalid variant for WindowMapping: {}", self),
        }
    }
}
impl SseDecode for chrono::Duration {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseDecode for RustOpaqueNom<AssertUnwindSafe<PExpr>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<AssertUnwindSafe<PSeries>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<AssertUnwindSafe<SpecialEq<PSeries>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyGroupBy>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Option<Schema>>>
{
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for String {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::wrapper::expr::AggExpr {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_input = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_propagateNans = <bool>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Min {
                    input: var_input,
                    propagate_nans: var_propagateNans,
                };
            }
            1 => {
                let mut var_input = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_propagateNans = <bool>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Max {
                    input: var_input,
                    propagate_nans: var_propagateNans,
                };
            }
            2 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Median(var_field0);
            }
            3 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::NUnique(var_field0);
            }
            4 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::First(var_field0);
            }
            5 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Last(var_field0);
            }
            6 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Mean(var_field0);
            }
            7 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Implode(var_field0);
            }
            8 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Count(var_field0);
            }
            9 => {
                let mut var_expr = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_quantile = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_interpol =
                    <crate::wrapper::entry::QuantileInterpolOptions>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Quantile {
                    expr: var_expr,
                    quantile: var_quantile,
                    interpol: var_interpol,
                };
            }
            10 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Sum(var_field0);
            }
            11 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::AggGroups(var_field0);
            }
            12 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_field1 = <u8>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Std(var_field0, var_field1);
            }
            13 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_field1 = <u8>::sse_decode(deserializer);
                return crate::wrapper::expr::AggExpr::Var(var_field0, var_field1);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::wrapper::expr::Ambiguous {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::expr::Ambiguous::Raise,
            1 => crate::wrapper::expr::Ambiguous::Earliest,
            2 => crate::wrapper::expr::Ambiguous::Latest,
            _ => unreachable!("Invalid variant for Ambiguous: {}", inner),
        };
    }
}

impl SseDecode for bool {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for Box<crate::wrapper::expr::DataType> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::wrapper::expr::DataType>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::wrapper::expr::Expr> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::wrapper::expr::Expr>::sse_decode(deserializer));
    }
}

impl SseDecode for crate::wrapper::expr::ClosedWindow {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::expr::ClosedWindow::Left,
            1 => crate::wrapper::expr::ClosedWindow::Right,
            2 => crate::wrapper::expr::ClosedWindow::Both,
            3 => crate::wrapper::expr::ClosedWindow::None,
            _ => unreachable!("Invalid variant for ClosedWindow: {}", inner),
        };
    }
}

impl SseDecode for crate::wrapper::entry::CsvEncoding {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::entry::CsvEncoding::Utf8,
            1 => crate::wrapper::entry::CsvEncoding::LossyUtf8,
            _ => unreachable!("Invalid variant for CsvEncoding: {}", inner),
        };
    }
}

impl SseDecode for crate::wrapper::expr::DataType {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::wrapper::expr::DataType::Boolean;
            }
            1 => {
                return crate::wrapper::expr::DataType::Uint8;
            }
            2 => {
                return crate::wrapper::expr::DataType::Uint16;
            }
            3 => {
                return crate::wrapper::expr::DataType::Uint32;
            }
            4 => {
                return crate::wrapper::expr::DataType::Uint64;
            }
            5 => {
                return crate::wrapper::expr::DataType::Int8;
            }
            6 => {
                return crate::wrapper::expr::DataType::Int16;
            }
            7 => {
                return crate::wrapper::expr::DataType::Int32;
            }
            8 => {
                return crate::wrapper::expr::DataType::Int64;
            }
            9 => {
                return crate::wrapper::expr::DataType::Float32;
            }
            10 => {
                return crate::wrapper::expr::DataType::Float64;
            }
            11 => {
                return crate::wrapper::expr::DataType::Utf8;
            }
            12 => {
                return crate::wrapper::expr::DataType::Binary;
            }
            13 => {
                return crate::wrapper::expr::DataType::Date;
            }
            14 => {
                let mut var_field0 = <crate::wrapper::entry::TimeUnit>::sse_decode(deserializer);
                let mut var_field1 = <Option<String>>::sse_decode(deserializer);
                return crate::wrapper::expr::DataType::Datetime(var_field0, var_field1);
            }
            15 => {
                let mut var_field0 = <crate::wrapper::entry::TimeUnit>::sse_decode(deserializer);
                return crate::wrapper::expr::DataType::Duration(var_field0);
            }
            16 => {
                return crate::wrapper::expr::DataType::Time;
            }
            17 => {
                let mut var_field0 =
                    <Box<crate::wrapper::expr::DataType>>::sse_decode(deserializer);
                return crate::wrapper::expr::DataType::List(var_field0);
            }
            18 => {
                let mut var_field0 = <Vec<crate::wrapper::expr::Field>>::sse_decode(deserializer);
                return crate::wrapper::expr::DataType::Struct(var_field0);
            }
            19 => {
                return crate::wrapper::expr::DataType::Null;
            }
            20 => {
                return crate::wrapper::expr::DataType::Unknown;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::wrapper::expr::Excluded {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::wrapper::expr::Excluded::Name(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::wrapper::expr::DataType>::sse_decode(deserializer);
                return crate::wrapper::expr::Excluded::Dtype(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::wrapper::expr::Expr {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Alias(var_field0, var_field1);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Column(var_field0);
            }
            2 => {
                let mut var_field0 = <Vec<String>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Columns(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <Vec<crate::wrapper::expr::DataType>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::DtypeColumn(var_field0);
            }
            4 => {
                let mut var_field0 = <crate::wrapper::expr::LiteralValue>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Literal(var_field0);
            }
            5 => {
                let mut var_left = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_op = <crate::wrapper::expr::Operator>::sse_decode(deserializer);
                let mut var_right = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::BinaryExpr {
                    left: var_left,
                    op: var_op,
                    right: var_right,
                };
            }
            6 => {
                let mut var_expr = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_dataType = <crate::wrapper::expr::DataType>::sse_decode(deserializer);
                let mut var_strict = <bool>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Cast {
                    expr: var_expr,
                    data_type: var_dataType,
                    strict: var_strict,
                };
            }
            7 => {
                let mut var_expr = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_options = <crate::wrapper::expr::SortOptions>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Sort {
                    expr: var_expr,
                    options: var_options,
                };
            }
            8 => {
                let mut var_expr = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_idx = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_returnsScalar = <bool>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Gather {
                    expr: var_expr,
                    idx: var_idx,
                    returns_scalar: var_returnsScalar,
                };
            }
            9 => {
                let mut var_expr = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_by = <Vec<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_descending = <Vec<bool>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::SortBy {
                    expr: var_expr,
                    by: var_by,
                    descending: var_descending,
                };
            }
            10 => {
                let mut var_field0 = <crate::wrapper::expr::AggExpr>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Agg(var_field0);
            }
            11 => {
                let mut var_predicate = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_truthy = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_falsy = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Ternary {
                    predicate: var_predicate,
                    truthy: var_truthy,
                    falsy: var_falsy,
                };
            }
            12 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Explode(var_field0);
            }
            13 => {
                let mut var_input = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_by = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Filter {
                    input: var_input,
                    by: var_by,
                };
            }
            14 => {
                return crate::wrapper::expr::Expr::Wildcard;
            }
            15 => {
                let mut var_function = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_partitionBy =
                    <Vec<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_options = <crate::wrapper::expr::WindowType>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Window {
                    function: var_function,
                    partition_by: var_partitionBy,
                    options: var_options,
                };
            }
            16 => {
                let mut var_input = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_offset = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_length = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Slice {
                    input: var_input,
                    offset: var_offset,
                    length: var_length,
                };
            }
            17 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                let mut var_field1 =
                    <Vec<crate::wrapper::expr::Excluded>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Exclude(var_field0, var_field1);
            }
            18 => {
                let mut var_field0 = <Box<crate::wrapper::expr::Expr>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::KeepName(var_field0);
            }
            19 => {
                return crate::wrapper::expr::Expr::Count;
            }
            20 => {
                let mut var_field0 = <i64>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Nth(var_field0);
            }
            21 => {
                let mut var_field0 =
                    <RustOpaqueNom<AssertUnwindSafe<PExpr>>>::sse_decode(deserializer);
                return crate::wrapper::expr::Expr::Internal(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for f32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::wrapper::expr::Field {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_dtype = <Box<crate::wrapper::expr::DataType>>::sse_decode(deserializer);
        return crate::wrapper::expr::Field {
            name: var_name,
            dtype: var_dtype,
        };
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::wrapper::expr::IsSorted {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::expr::IsSorted::Ascending,
            1 => crate::wrapper::expr::IsSorted::Descending,
            2 => crate::wrapper::expr::IsSorted::Not,
            _ => unreachable!("Invalid variant for IsSorted: {}", inner),
        };
    }
}

impl SseDecode for crate::wrapper::entry::JoinType {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::entry::JoinType::Left,
            1 => crate::wrapper::entry::JoinType::Inner,
            2 => crate::wrapper::entry::JoinType::Outer,
            3 => crate::wrapper::entry::JoinType::Cross,
            4 => crate::wrapper::entry::JoinType::Semi,
            5 => crate::wrapper::entry::JoinType::Anti,
            _ => unreachable!("Invalid variant for JoinType: {}", inner),
        };
    }
}

impl SseDecode for Vec<chrono::Duration> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<chrono::Duration>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<bool> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<bool>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::wrapper::expr::DataType> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::wrapper::expr::DataType>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::wrapper::expr::Excluded> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::wrapper::expr::Excluded>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::wrapper::expr::Expr> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::wrapper::expr::Expr>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::wrapper::expr::Field> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::wrapper::expr::Field>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<String>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<String>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<chrono::Duration>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<chrono::Duration>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<f64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<f64>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<i64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<i64>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<f64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<f64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::wrapper::df::Literals)> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, crate::wrapper::df::Literals)>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::wrapper::expr::LiteralValue {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::wrapper::expr::LiteralValue::Null;
            }
            1 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Boolean(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Utf8(var_field0);
            }
            3 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Binary(var_field0);
            }
            4 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Uint32(var_field0);
            }
            5 => {
                let mut var_field0 = <u64>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Uint64(var_field0);
            }
            6 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Int32(var_field0);
            }
            7 => {
                let mut var_field0 = <i64>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Int64(var_field0);
            }
            8 => {
                let mut var_field0 = <f32>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Float32(var_field0);
            }
            9 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Float64(var_field0);
            }
            10 => {
                let mut var_low = <i64>::sse_decode(deserializer);
                let mut var_high = <i64>::sse_decode(deserializer);
                let mut var_dataType = <crate::wrapper::expr::DataType>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Range {
                    low: var_low,
                    high: var_high,
                    data_type: var_dataType,
                };
            }
            11 => {
                let mut var_field0 = <i64>::sse_decode(deserializer);
                let mut var_field1 = <crate::wrapper::entry::TimeUnit>::sse_decode(deserializer);
                let mut var_field2 = <Option<String>>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::DateTime(
                    var_field0, var_field1, var_field2,
                );
            }
            12 => {
                let mut var_field0 = <i64>::sse_decode(deserializer);
                let mut var_field1 = <crate::wrapper::entry::TimeUnit>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Duration(var_field0, var_field1);
            }
            13 => {
                let mut var_field0 =
                    <RustOpaqueNom<AssertUnwindSafe<SpecialEq<PSeries>>>>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Series(var_field0);
            }
            14 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Date(var_field0);
            }
            15 => {
                let mut var_field0 = <i64>::sse_decode(deserializer);
                return crate::wrapper::expr::LiteralValue::Time(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::wrapper::df::Literals {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<i64>>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::Int64(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<Option<i64>>>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::NullInt64(var_field0);
            }
            2 => {
                let mut var_field0 = <Vec<f64>>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::Float64(var_field0);
            }
            3 => {
                let mut var_field0 = <Vec<Option<f64>>>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::NullFloat64(var_field0);
            }
            4 => {
                let mut var_field0 = <Vec<bool>>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::Boolean(var_field0);
            }
            5 => {
                let mut var_field0 = <Vec<chrono::Duration>>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::Duration(var_field0);
            }
            6 => {
                let mut var_field0 = <Vec<Option<chrono::Duration>>>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::NullDuration(var_field0);
            }
            7 => {
                let mut var_field0 = <Vec<String>>::sse_decode(deserializer);
                let mut var_field1 = <crate::wrapper::expr::DataType>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::StringLike(var_field0, var_field1);
            }
            8 => {
                let mut var_field0 = <Vec<Option<String>>>::sse_decode(deserializer);
                let mut var_field1 = <crate::wrapper::expr::DataType>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::NullStringLike(var_field0, var_field1);
            }
            9 => {
                let mut var_field0 =
                    <RustOpaqueNom<AssertUnwindSafe<PSeries>>>::sse_decode(deserializer);
                return crate::wrapper::df::Literals::Series(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::wrapper::entry::NullValues {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::wrapper::entry::NullValues::AllColumnsSingle(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<String>>::sse_decode(deserializer);
                return crate::wrapper::entry::NullValues::AllColumns(var_field0);
            }
            2 => {
                let mut var_field0 = <Vec<(String, String)>>::sse_decode(deserializer);
                return crate::wrapper::entry::NullValues::Named(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::wrapper::expr::Operator {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::expr::Operator::Eq,
            1 => crate::wrapper::expr::Operator::EqValidity,
            2 => crate::wrapper::expr::Operator::NotEq,
            3 => crate::wrapper::expr::Operator::NotEqValidity,
            4 => crate::wrapper::expr::Operator::Lt,
            5 => crate::wrapper::expr::Operator::LtEq,
            6 => crate::wrapper::expr::Operator::Gt,
            7 => crate::wrapper::expr::Operator::GtEq,
            8 => crate::wrapper::expr::Operator::Plus,
            9 => crate::wrapper::expr::Operator::Minus,
            10 => crate::wrapper::expr::Operator::Multiply,
            11 => crate::wrapper::expr::Operator::Divide,
            12 => crate::wrapper::expr::Operator::TrueDivide,
            13 => crate::wrapper::expr::Operator::FloorDivide,
            14 => crate::wrapper::expr::Operator::Modulus,
            15 => crate::wrapper::expr::Operator::And,
            16 => crate::wrapper::expr::Operator::Or,
            17 => crate::wrapper::expr::Operator::Xor,
            _ => unreachable!("Invalid variant for Operator: {}", inner),
        };
    }
}

impl SseDecode for Option<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::Duration> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::Duration>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::expr::ClosedWindow> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::expr::ClosedWindow>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::entry::CsvEncoding> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::entry::CsvEncoding>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::entry::NullValues> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::entry::NullValues>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::entry::RowCount> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::entry::RowCount>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::entry::TimeUnit> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::entry::TimeUnit>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::wrapper::expr::DataType>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::wrapper::expr::DataType>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::wrapper::expr::Expr>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::wrapper::expr::Expr>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<f64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<f64>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<i64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<i64>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u32>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u32>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<(String, crate::wrapper::df::Literals)>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<(String, crate::wrapper::df::Literals)>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::wrapper::entry::QuantileInterpolOptions {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::entry::QuantileInterpolOptions::Nearest,
            1 => crate::wrapper::entry::QuantileInterpolOptions::Lower,
            2 => crate::wrapper::entry::QuantileInterpolOptions::Higher,
            3 => crate::wrapper::entry::QuantileInterpolOptions::Midpoint,
            4 => crate::wrapper::entry::QuantileInterpolOptions::Linear,
            _ => unreachable!("Invalid variant for QuantileInterpolOptions: {}", inner),
        };
    }
}

impl SseDecode for (String, crate::wrapper::df::Literals) {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::wrapper::df::Literals>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::wrapper::entry::RowCount {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_offset = <u32>::sse_decode(deserializer);
        return crate::wrapper::entry::RowCount {
            name: var_name,
            offset: var_offset,
        };
    }
}

impl SseDecode for crate::wrapper::expr::SortOptions {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_descending = <bool>::sse_decode(deserializer);
        let mut var_nullsLast = <bool>::sse_decode(deserializer);
        let mut var_multithreaded = <bool>::sse_decode(deserializer);
        let mut var_maintainOrder = <bool>::sse_decode(deserializer);
        return crate::wrapper::expr::SortOptions {
            descending: var_descending,
            nulls_last: var_nullsLast,
            multithreaded: var_multithreaded,
            maintain_order: var_maintainOrder,
        };
    }
}

impl SseDecode for crate::wrapper::entry::TimeUnit {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::entry::TimeUnit::Nanoseconds,
            1 => crate::wrapper::entry::TimeUnit::Microseconds,
            2 => crate::wrapper::entry::TimeUnit::Milliseconds,
            _ => unreachable!("Invalid variant for TimeUnit: {}", inner),
        };
    }
}

impl SseDecode for u32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for crate::wrapper::df::UniqueKeepStrategy {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::df::UniqueKeepStrategy::First,
            1 => crate::wrapper::df::UniqueKeepStrategy::Last,
            2 => crate::wrapper::df::UniqueKeepStrategy::None,
            3 => crate::wrapper::df::UniqueKeepStrategy::Any,
            _ => unreachable!("Invalid variant for UniqueKeepStrategy: {}", inner),
        };
    }
}

impl SseDecode for usize {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::wrapper::expr::WindowMapping {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::expr::WindowMapping::GroupsToRows,
            1 => crate::wrapper::expr::WindowMapping::Explode,
            2 => crate::wrapper::expr::WindowMapping::Join,
            _ => unreachable!("Invalid variant for WindowMapping: {}", inner),
        };
    }
}

impl SseDecode for crate::wrapper::expr::WindowType {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crate::wrapper::expr::WindowMapping>::sse_decode(deserializer);
                return crate::wrapper::expr::WindowType::Over(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for crate::wrapper::expr::AggExpr {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::wrapper::expr::AggExpr::Min {
                input,
                propagate_nans,
            } => [
                0.into_dart(),
                input.into_into_dart().into_dart(),
                propagate_nans.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::AggExpr::Max {
                input,
                propagate_nans,
            } => [
                1.into_dart(),
                input.into_into_dart().into_dart(),
                propagate_nans.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::AggExpr::Median(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::AggExpr::NUnique(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::AggExpr::First(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::AggExpr::Last(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::AggExpr::Mean(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::AggExpr::Implode(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::AggExpr::Count(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::AggExpr::Quantile {
                expr,
                quantile,
                interpol,
            } => [
                9.into_dart(),
                expr.into_into_dart().into_dart(),
                quantile.into_into_dart().into_dart(),
                interpol.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::AggExpr::Sum(field0) => {
                [10.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::AggExpr::AggGroups(field0) => {
                [11.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::AggExpr::Std(field0, field1) => [
                12.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::AggExpr::Var(field0, field1) => [
                13.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::wrapper::expr::AggExpr {}
impl flutter_rust_bridge::IntoIntoDart<crate::wrapper::expr::AggExpr>
    for crate::wrapper::expr::AggExpr
{
    fn into_into_dart(self) -> crate::wrapper::expr::AggExpr {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::wrapper::expr::DataType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::wrapper::expr::DataType::Boolean => [0.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Uint8 => [1.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Uint16 => [2.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Uint32 => [3.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Uint64 => [4.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Int8 => [5.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Int16 => [6.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Int32 => [7.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Int64 => [8.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Float32 => [9.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Float64 => [10.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Utf8 => [11.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Binary => [12.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Date => [13.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Datetime(field0, field1) => [
                14.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::DataType::Duration(field0) => {
                [15.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::DataType::Time => [16.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::List(field0) => {
                [17.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::DataType::Struct(field0) => {
                [18.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::DataType::Null => [19.into_dart()].into_dart(),
            crate::wrapper::expr::DataType::Unknown => [20.into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::wrapper::expr::DataType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::wrapper::expr::DataType>
    for crate::wrapper::expr::DataType
{
    fn into_into_dart(self) -> crate::wrapper::expr::DataType {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::wrapper::expr::Excluded {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::wrapper::expr::Excluded::Name(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::Excluded::Dtype(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::wrapper::expr::Excluded
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::wrapper::expr::Excluded>
    for crate::wrapper::expr::Excluded
{
    fn into_into_dart(self) -> crate::wrapper::expr::Excluded {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::wrapper::expr::Expr {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::wrapper::expr::Expr::Alias(field0, field1) => [
                0.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::Column(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::Expr::Columns(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::Expr::DtypeColumn(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::Expr::Literal(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::Expr::BinaryExpr { left, op, right } => [
                5.into_dart(),
                left.into_into_dart().into_dart(),
                op.into_into_dart().into_dart(),
                right.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::Cast {
                expr,
                data_type,
                strict,
            } => [
                6.into_dart(),
                expr.into_into_dart().into_dart(),
                data_type.into_into_dart().into_dart(),
                strict.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::Sort { expr, options } => [
                7.into_dart(),
                expr.into_into_dart().into_dart(),
                options.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::Gather {
                expr,
                idx,
                returns_scalar,
            } => [
                8.into_dart(),
                expr.into_into_dart().into_dart(),
                idx.into_into_dart().into_dart(),
                returns_scalar.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::SortBy {
                expr,
                by,
                descending,
            } => [
                9.into_dart(),
                expr.into_into_dart().into_dart(),
                by.into_into_dart().into_dart(),
                descending.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::Agg(field0) => {
                [10.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::Expr::Ternary {
                predicate,
                truthy,
                falsy,
            } => [
                11.into_dart(),
                predicate.into_into_dart().into_dart(),
                truthy.into_into_dart().into_dart(),
                falsy.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::Explode(field0) => {
                [12.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::Expr::Filter { input, by } => [
                13.into_dart(),
                input.into_into_dart().into_dart(),
                by.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::Wildcard => [14.into_dart()].into_dart(),
            crate::wrapper::expr::Expr::Window {
                function,
                partition_by,
                options,
            } => [
                15.into_dart(),
                function.into_into_dart().into_dart(),
                partition_by.into_into_dart().into_dart(),
                options.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::Slice {
                input,
                offset,
                length,
            } => [
                16.into_dart(),
                input.into_into_dart().into_dart(),
                offset.into_into_dart().into_dart(),
                length.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::Exclude(field0, field1) => [
                17.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::Expr::KeepName(field0) => {
                [18.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::Expr::Count => [19.into_dart()].into_dart(),
            crate::wrapper::expr::Expr::Nth(field0) => {
                [20.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::Expr::Internal(field0) => {
                [21.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::wrapper::expr::Expr {}
impl flutter_rust_bridge::IntoIntoDart<crate::wrapper::expr::Expr> for crate::wrapper::expr::Expr {
    fn into_into_dart(self) -> crate::wrapper::expr::Expr {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::wrapper::expr::Field {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.dtype.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::wrapper::expr::Field {}
impl flutter_rust_bridge::IntoIntoDart<crate::wrapper::expr::Field>
    for crate::wrapper::expr::Field
{
    fn into_into_dart(self) -> crate::wrapper::expr::Field {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::wrapper::expr::LiteralValue {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::wrapper::expr::LiteralValue::Null => [0.into_dart()].into_dart(),
            crate::wrapper::expr::LiteralValue::Boolean(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Utf8(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Binary(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Uint32(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Uint64(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Int32(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Int64(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Float32(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Float64(field0) => {
                [9.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Range {
                low,
                high,
                data_type,
            } => [
                10.into_dart(),
                low.into_into_dart().into_dart(),
                high.into_into_dart().into_dart(),
                data_type.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::LiteralValue::DateTime(field0, field1, field2) => [
                11.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
                field2.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::LiteralValue::Duration(field0, field1) => [
                12.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::expr::LiteralValue::Series(field0) => {
                [13.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Date(field0) => {
                [14.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::expr::LiteralValue::Time(field0) => {
                [15.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::wrapper::expr::LiteralValue
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::wrapper::expr::LiteralValue>
    for crate::wrapper::expr::LiteralValue
{
    fn into_into_dart(self) -> crate::wrapper::expr::LiteralValue {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::wrapper::df::Literals {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::wrapper::df::Literals::Int64(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::df::Literals::NullInt64(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::df::Literals::Float64(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::df::Literals::NullFloat64(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::df::Literals::Boolean(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::df::Literals::Duration(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::df::Literals::NullDuration(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::wrapper::df::Literals::StringLike(field0, field1) => [
                7.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::df::Literals::NullStringLike(field0, field1) => [
                8.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::wrapper::df::Literals::Series(field0) => {
                [9.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::wrapper::df::Literals {}
impl flutter_rust_bridge::IntoIntoDart<crate::wrapper::df::Literals>
    for crate::wrapper::df::Literals
{
    fn into_into_dart(self) -> crate::wrapper::df::Literals {
        self
    }
}
impl flutter_rust_bridge::IntoDart for mirror_Operator {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::expr::Operator::Eq => 0.into_dart(),
            crate::wrapper::expr::Operator::EqValidity => 1.into_dart(),
            crate::wrapper::expr::Operator::NotEq => 2.into_dart(),
            crate::wrapper::expr::Operator::NotEqValidity => 3.into_dart(),
            crate::wrapper::expr::Operator::Lt => 4.into_dart(),
            crate::wrapper::expr::Operator::LtEq => 5.into_dart(),
            crate::wrapper::expr::Operator::Gt => 6.into_dart(),
            crate::wrapper::expr::Operator::GtEq => 7.into_dart(),
            crate::wrapper::expr::Operator::Plus => 8.into_dart(),
            crate::wrapper::expr::Operator::Minus => 9.into_dart(),
            crate::wrapper::expr::Operator::Multiply => 10.into_dart(),
            crate::wrapper::expr::Operator::Divide => 11.into_dart(),
            crate::wrapper::expr::Operator::TrueDivide => 12.into_dart(),
            crate::wrapper::expr::Operator::FloorDivide => 13.into_dart(),
            crate::wrapper::expr::Operator::Modulus => 14.into_dart(),
            crate::wrapper::expr::Operator::And => 15.into_dart(),
            crate::wrapper::expr::Operator::Or => 16.into_dart(),
            crate::wrapper::expr::Operator::Xor => 17.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_Operator {}
impl flutter_rust_bridge::IntoIntoDart<mirror_Operator> for crate::wrapper::expr::Operator {
    fn into_into_dart(self) -> mirror_Operator {
        mirror_Operator(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_QuantileInterpolOptions {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::entry::QuantileInterpolOptions::Nearest => 0.into_dart(),
            crate::wrapper::entry::QuantileInterpolOptions::Lower => 1.into_dart(),
            crate::wrapper::entry::QuantileInterpolOptions::Higher => 2.into_dart(),
            crate::wrapper::entry::QuantileInterpolOptions::Midpoint => 3.into_dart(),
            crate::wrapper::entry::QuantileInterpolOptions::Linear => 4.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for mirror_QuantileInterpolOptions
{
}
impl flutter_rust_bridge::IntoIntoDart<mirror_QuantileInterpolOptions>
    for crate::wrapper::entry::QuantileInterpolOptions
{
    fn into_into_dart(self) -> mirror_QuantileInterpolOptions {
        mirror_QuantileInterpolOptions(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_SortOptions {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.descending.into_into_dart().into_dart(),
            self.0.nulls_last.into_into_dart().into_dart(),
            self.0.multithreaded.into_into_dart().into_dart(),
            self.0.maintain_order.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_SortOptions {}
impl flutter_rust_bridge::IntoIntoDart<mirror_SortOptions> for crate::wrapper::expr::SortOptions {
    fn into_into_dart(self) -> mirror_SortOptions {
        mirror_SortOptions(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_TimeUnit {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::entry::TimeUnit::Nanoseconds => 0.into_dart(),
            crate::wrapper::entry::TimeUnit::Microseconds => 1.into_dart(),
            crate::wrapper::entry::TimeUnit::Milliseconds => 2.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_TimeUnit {}
impl flutter_rust_bridge::IntoIntoDart<mirror_TimeUnit> for crate::wrapper::entry::TimeUnit {
    fn into_into_dart(self) -> mirror_TimeUnit {
        mirror_TimeUnit(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_WindowMapping {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::expr::WindowMapping::GroupsToRows => 0.into_dart(),
            crate::wrapper::expr::WindowMapping::Explode => 1.into_dart(),
            crate::wrapper::expr::WindowMapping::Join => 2.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_WindowMapping {}
impl flutter_rust_bridge::IntoIntoDart<mirror_WindowMapping>
    for crate::wrapper::expr::WindowMapping
{
    fn into_into_dart(self) -> mirror_WindowMapping {
        mirror_WindowMapping(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_WindowType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::expr::WindowType::Over(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_WindowType {}
impl flutter_rust_bridge::IntoIntoDart<mirror_WindowType> for crate::wrapper::expr::WindowType {
    fn into_into_dart(self) -> mirror_WindowType {
        mirror_WindowType(self)
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for chrono::Duration {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseEncode for chrono::DateTime<chrono::Local> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseEncode for chrono::NaiveDateTime {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseEncode for chrono::DateTime<chrono::Utc> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseEncode for RustOpaqueNom<AssertUnwindSafe<PExpr>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<AssertUnwindSafe<PSeries>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<AssertUnwindSafe<SpecialEq<PSeries>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DataFrame>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyFrame>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<LazyGroupBy>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Schema>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Series>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Vec<Series>>>
{
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::wrapper::expr::AggExpr {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::expr::AggExpr::Min {
                input,
                propagate_nans,
            } => {
                <i32>::sse_encode(0, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(input, serializer);
                <bool>::sse_encode(propagate_nans, serializer);
            }
            crate::wrapper::expr::AggExpr::Max {
                input,
                propagate_nans,
            } => {
                <i32>::sse_encode(1, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(input, serializer);
                <bool>::sse_encode(propagate_nans, serializer);
            }
            crate::wrapper::expr::AggExpr::Median(field0) => {
                <i32>::sse_encode(2, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::AggExpr::NUnique(field0) => {
                <i32>::sse_encode(3, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::AggExpr::First(field0) => {
                <i32>::sse_encode(4, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::AggExpr::Last(field0) => {
                <i32>::sse_encode(5, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::AggExpr::Mean(field0) => {
                <i32>::sse_encode(6, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::AggExpr::Implode(field0) => {
                <i32>::sse_encode(7, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::AggExpr::Count(field0) => {
                <i32>::sse_encode(8, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::AggExpr::Quantile {
                expr,
                quantile,
                interpol,
            } => {
                <i32>::sse_encode(9, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(expr, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(quantile, serializer);
                <crate::wrapper::entry::QuantileInterpolOptions>::sse_encode(interpol, serializer);
            }
            crate::wrapper::expr::AggExpr::Sum(field0) => {
                <i32>::sse_encode(10, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::AggExpr::AggGroups(field0) => {
                <i32>::sse_encode(11, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::AggExpr::Std(field0, field1) => {
                <i32>::sse_encode(12, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
                <u8>::sse_encode(field1, serializer);
            }
            crate::wrapper::expr::AggExpr::Var(field0, field1) => {
                <i32>::sse_encode(13, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
                <u8>::sse_encode(field1, serializer);
            }
        }
    }
}

impl SseEncode for bool {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for Box<crate::wrapper::expr::DataType> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::wrapper::expr::DataType>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::wrapper::expr::Expr> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::wrapper::expr::Expr>::sse_encode(*self, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::DartAbi {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("");
    }
}

impl SseEncode for crate::wrapper::expr::DataType {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::expr::DataType::Boolean => {
                <i32>::sse_encode(0, serializer);
            }
            crate::wrapper::expr::DataType::Uint8 => {
                <i32>::sse_encode(1, serializer);
            }
            crate::wrapper::expr::DataType::Uint16 => {
                <i32>::sse_encode(2, serializer);
            }
            crate::wrapper::expr::DataType::Uint32 => {
                <i32>::sse_encode(3, serializer);
            }
            crate::wrapper::expr::DataType::Uint64 => {
                <i32>::sse_encode(4, serializer);
            }
            crate::wrapper::expr::DataType::Int8 => {
                <i32>::sse_encode(5, serializer);
            }
            crate::wrapper::expr::DataType::Int16 => {
                <i32>::sse_encode(6, serializer);
            }
            crate::wrapper::expr::DataType::Int32 => {
                <i32>::sse_encode(7, serializer);
            }
            crate::wrapper::expr::DataType::Int64 => {
                <i32>::sse_encode(8, serializer);
            }
            crate::wrapper::expr::DataType::Float32 => {
                <i32>::sse_encode(9, serializer);
            }
            crate::wrapper::expr::DataType::Float64 => {
                <i32>::sse_encode(10, serializer);
            }
            crate::wrapper::expr::DataType::Utf8 => {
                <i32>::sse_encode(11, serializer);
            }
            crate::wrapper::expr::DataType::Binary => {
                <i32>::sse_encode(12, serializer);
            }
            crate::wrapper::expr::DataType::Date => {
                <i32>::sse_encode(13, serializer);
            }
            crate::wrapper::expr::DataType::Datetime(field0, field1) => {
                <i32>::sse_encode(14, serializer);
                <crate::wrapper::entry::TimeUnit>::sse_encode(field0, serializer);
                <Option<String>>::sse_encode(field1, serializer);
            }
            crate::wrapper::expr::DataType::Duration(field0) => {
                <i32>::sse_encode(15, serializer);
                <crate::wrapper::entry::TimeUnit>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::DataType::Time => {
                <i32>::sse_encode(16, serializer);
            }
            crate::wrapper::expr::DataType::List(field0) => {
                <i32>::sse_encode(17, serializer);
                <Box<crate::wrapper::expr::DataType>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::DataType::Struct(field0) => {
                <i32>::sse_encode(18, serializer);
                <Vec<crate::wrapper::expr::Field>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::DataType::Null => {
                <i32>::sse_encode(19, serializer);
            }
            crate::wrapper::expr::DataType::Unknown => {
                <i32>::sse_encode(20, serializer);
            }
        }
    }
}

impl SseEncode for crate::wrapper::expr::Excluded {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::expr::Excluded::Name(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::Excluded::Dtype(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::wrapper::expr::DataType>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::wrapper::expr::Expr {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::expr::Expr::Alias(field0, field1) => {
                <i32>::sse_encode(0, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
            }
            crate::wrapper::expr::Expr::Column(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::Expr::Columns(field0) => {
                <i32>::sse_encode(2, serializer);
                <Vec<String>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::Expr::DtypeColumn(field0) => {
                <i32>::sse_encode(3, serializer);
                <Vec<crate::wrapper::expr::DataType>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::Expr::Literal(field0) => {
                <i32>::sse_encode(4, serializer);
                <crate::wrapper::expr::LiteralValue>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::Expr::BinaryExpr { left, op, right } => {
                <i32>::sse_encode(5, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(left, serializer);
                <crate::wrapper::expr::Operator>::sse_encode(op, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(right, serializer);
            }
            crate::wrapper::expr::Expr::Cast {
                expr,
                data_type,
                strict,
            } => {
                <i32>::sse_encode(6, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(expr, serializer);
                <crate::wrapper::expr::DataType>::sse_encode(data_type, serializer);
                <bool>::sse_encode(strict, serializer);
            }
            crate::wrapper::expr::Expr::Sort { expr, options } => {
                <i32>::sse_encode(7, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(expr, serializer);
                <crate::wrapper::expr::SortOptions>::sse_encode(options, serializer);
            }
            crate::wrapper::expr::Expr::Gather {
                expr,
                idx,
                returns_scalar,
            } => {
                <i32>::sse_encode(8, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(expr, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(idx, serializer);
                <bool>::sse_encode(returns_scalar, serializer);
            }
            crate::wrapper::expr::Expr::SortBy {
                expr,
                by,
                descending,
            } => {
                <i32>::sse_encode(9, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(expr, serializer);
                <Vec<crate::wrapper::expr::Expr>>::sse_encode(by, serializer);
                <Vec<bool>>::sse_encode(descending, serializer);
            }
            crate::wrapper::expr::Expr::Agg(field0) => {
                <i32>::sse_encode(10, serializer);
                <crate::wrapper::expr::AggExpr>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::Expr::Ternary {
                predicate,
                truthy,
                falsy,
            } => {
                <i32>::sse_encode(11, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(predicate, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(truthy, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(falsy, serializer);
            }
            crate::wrapper::expr::Expr::Explode(field0) => {
                <i32>::sse_encode(12, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::Expr::Filter { input, by } => {
                <i32>::sse_encode(13, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(input, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(by, serializer);
            }
            crate::wrapper::expr::Expr::Wildcard => {
                <i32>::sse_encode(14, serializer);
            }
            crate::wrapper::expr::Expr::Window {
                function,
                partition_by,
                options,
            } => {
                <i32>::sse_encode(15, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(function, serializer);
                <Vec<crate::wrapper::expr::Expr>>::sse_encode(partition_by, serializer);
                <crate::wrapper::expr::WindowType>::sse_encode(options, serializer);
            }
            crate::wrapper::expr::Expr::Slice {
                input,
                offset,
                length,
            } => {
                <i32>::sse_encode(16, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(input, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(offset, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(length, serializer);
            }
            crate::wrapper::expr::Expr::Exclude(field0, field1) => {
                <i32>::sse_encode(17, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
                <Vec<crate::wrapper::expr::Excluded>>::sse_encode(field1, serializer);
            }
            crate::wrapper::expr::Expr::KeepName(field0) => {
                <i32>::sse_encode(18, serializer);
                <Box<crate::wrapper::expr::Expr>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::Expr::Count => {
                <i32>::sse_encode(19, serializer);
            }
            crate::wrapper::expr::Expr::Nth(field0) => {
                <i32>::sse_encode(20, serializer);
                <i64>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::Expr::Internal(field0) => {
                <i32>::sse_encode(21, serializer);
                <RustOpaqueNom<AssertUnwindSafe<PExpr>>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for f32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::wrapper::expr::Field {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Box<crate::wrapper::expr::DataType>>::sse_encode(self.dtype, serializer);
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<chrono::Duration> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <chrono::Duration>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<bool> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <bool>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<flutter_rust_bridge::for_generated::DartAbi> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <flutter_rust_bridge::for_generated::DartAbi>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::wrapper::expr::DataType> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::wrapper::expr::DataType>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::wrapper::expr::Excluded> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::wrapper::expr::Excluded>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::wrapper::expr::Expr> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::wrapper::expr::Expr>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::wrapper::expr::Field> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::wrapper::expr::Field>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<String>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<String>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<chrono::Duration>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<chrono::Duration>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<chrono::DateTime<chrono::Local>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<chrono::DateTime<chrono::Local>>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<chrono::NaiveDateTime>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<chrono::NaiveDateTime>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<chrono::DateTime<chrono::Utc>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<f64>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<f64>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<i64>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<i64>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<f64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <f64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <i64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::wrapper::expr::LiteralValue {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::expr::LiteralValue::Null => {
                <i32>::sse_encode(0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Boolean(field0) => {
                <i32>::sse_encode(1, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Utf8(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Binary(field0) => {
                <i32>::sse_encode(3, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Uint32(field0) => {
                <i32>::sse_encode(4, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Uint64(field0) => {
                <i32>::sse_encode(5, serializer);
                <u64>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Int32(field0) => {
                <i32>::sse_encode(6, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Int64(field0) => {
                <i32>::sse_encode(7, serializer);
                <i64>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Float32(field0) => {
                <i32>::sse_encode(8, serializer);
                <f32>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Float64(field0) => {
                <i32>::sse_encode(9, serializer);
                <f64>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Range {
                low,
                high,
                data_type,
            } => {
                <i32>::sse_encode(10, serializer);
                <i64>::sse_encode(low, serializer);
                <i64>::sse_encode(high, serializer);
                <crate::wrapper::expr::DataType>::sse_encode(data_type, serializer);
            }
            crate::wrapper::expr::LiteralValue::DateTime(field0, field1, field2) => {
                <i32>::sse_encode(11, serializer);
                <i64>::sse_encode(field0, serializer);
                <crate::wrapper::entry::TimeUnit>::sse_encode(field1, serializer);
                <Option<String>>::sse_encode(field2, serializer);
            }
            crate::wrapper::expr::LiteralValue::Duration(field0, field1) => {
                <i32>::sse_encode(12, serializer);
                <i64>::sse_encode(field0, serializer);
                <crate::wrapper::entry::TimeUnit>::sse_encode(field1, serializer);
            }
            crate::wrapper::expr::LiteralValue::Series(field0) => {
                <i32>::sse_encode(13, serializer);
                <RustOpaqueNom<AssertUnwindSafe<SpecialEq<PSeries>>>>::sse_encode(
                    field0, serializer,
                );
            }
            crate::wrapper::expr::LiteralValue::Date(field0) => {
                <i32>::sse_encode(14, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::wrapper::expr::LiteralValue::Time(field0) => {
                <i32>::sse_encode(15, serializer);
                <i64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::wrapper::df::Literals {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::df::Literals::Int64(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<i64>>::sse_encode(field0, serializer);
            }
            crate::wrapper::df::Literals::NullInt64(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<Option<i64>>>::sse_encode(field0, serializer);
            }
            crate::wrapper::df::Literals::Float64(field0) => {
                <i32>::sse_encode(2, serializer);
                <Vec<f64>>::sse_encode(field0, serializer);
            }
            crate::wrapper::df::Literals::NullFloat64(field0) => {
                <i32>::sse_encode(3, serializer);
                <Vec<Option<f64>>>::sse_encode(field0, serializer);
            }
            crate::wrapper::df::Literals::Boolean(field0) => {
                <i32>::sse_encode(4, serializer);
                <Vec<bool>>::sse_encode(field0, serializer);
            }
            crate::wrapper::df::Literals::Duration(field0) => {
                <i32>::sse_encode(5, serializer);
                <Vec<chrono::Duration>>::sse_encode(field0, serializer);
            }
            crate::wrapper::df::Literals::NullDuration(field0) => {
                <i32>::sse_encode(6, serializer);
                <Vec<Option<chrono::Duration>>>::sse_encode(field0, serializer);
            }
            crate::wrapper::df::Literals::StringLike(field0, field1) => {
                <i32>::sse_encode(7, serializer);
                <Vec<String>>::sse_encode(field0, serializer);
                <crate::wrapper::expr::DataType>::sse_encode(field1, serializer);
            }
            crate::wrapper::df::Literals::NullStringLike(field0, field1) => {
                <i32>::sse_encode(8, serializer);
                <Vec<Option<String>>>::sse_encode(field0, serializer);
                <crate::wrapper::expr::DataType>::sse_encode(field1, serializer);
            }
            crate::wrapper::df::Literals::Series(field0) => {
                <i32>::sse_encode(9, serializer);
                <RustOpaqueNom<AssertUnwindSafe<PSeries>>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::wrapper::expr::Operator {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for Option<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::Duration> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::Duration>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::DateTime<chrono::Local>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::DateTime<chrono::Local>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::NaiveDateTime> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::NaiveDateTime>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::DateTime<chrono::Utc>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::DateTime<chrono::Utc>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::wrapper::entry::QuantileInterpolOptions {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for (usize, usize) {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.0, serializer);
        <usize>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::wrapper::expr::SortOptions {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.descending, serializer);
        <bool>::sse_encode(self.nulls_last, serializer);
        <bool>::sse_encode(self.multithreaded, serializer);
        <bool>::sse_encode(self.maintain_order, serializer);
    }
}

impl SseEncode for crate::wrapper::entry::TimeUnit {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for u32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::wrapper::expr::WindowMapping {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::wrapper::expr::WindowType {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::expr::WindowType::Over(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::wrapper::expr::WindowMapping>::sse_encode(field0, serializer);
            }
        }
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
