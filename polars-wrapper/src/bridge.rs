// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.4.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments
)]

// Section: imports

use crate::wrapper::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!();

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_DataFrame_column_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    column: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_column",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_column = column.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::column(&api_that, api_column)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_column_at_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    index: impl CstDecode<usize> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_column_at",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::column_at(&api_that, api_index),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_columns_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    columns: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_columns",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_columns = columns.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::columns(&api_that, api_columns)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_describe_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    percentiles: impl CstDecode<Option<Vec<f64>>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_describe",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_percentiles = percentiles.cst_decode();
            move |context| {
                transform_result_dco((move || -> Result<_, anyhow::Error> {
                    let api_that = api_that.rust_auto_opaque_decode_ref()?;
                    Result::<_, anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::wrapper::DataFrame::describe(&api_that, api_percentiles)?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_DataFrame_drop_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    column: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_drop",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_column = column.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::drop(&api_that, api_column)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_drop_in_place_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    column: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_drop_in_place",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_column = column.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let mut api_that = api_that.rust_auto_opaque_decode_ref_mut()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::drop_in_place(&mut api_that, api_column)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_dtypes_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_dtypes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::DataFrame::dtypes(&api_that))
            })())
        },
    )
}
fn wire_DataFrame_dump_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_dump",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::DataFrame::dump(&api_that))
            })())
        },
    )
}
fn wire_DataFrame_estimated_size_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_estimated_size",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::DataFrame::estimated_size(&api_that))
            })())
        },
    )
}
fn wire_DataFrame_get_column_names_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_get_column_names",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::DataFrame::get_column_names(
                    &api_that,
                ))
            })())
        },
    )
}
fn wire_DataFrame_get_columns_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_get_columns",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::get_columns(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_get_row_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    index: impl CstDecode<usize> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_get_row",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::DataFrame::get_row(&api_that, api_index)
            })())
        },
    )
}
fn wire_DataFrame_head_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    length: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_head",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::head(&api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_height_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_height",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::DataFrame::height(&api_that))
            })())
        },
    )
}
fn wire_DataFrame_is_empty_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_is_empty",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::DataFrame::is_empty(&api_that))
            })())
        },
    )
}
fn wire_DataFrame_iter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_iter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref()?;
                    crate::wrapper::DataFrame::iter(
                        &api_that,
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, Vec<flutter_rust_bridge::for_generated::DartAbi>>(
                                ),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_DataFrame_lazy_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    projection_pushdown: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
    predicate_pushdown: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
    type_coercion: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
    simplify_expressions: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
    slice_pushdown: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
    streaming: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_lazy",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_projection_pushdown = projection_pushdown.cst_decode();
            let api_predicate_pushdown = predicate_pushdown.cst_decode();
            let api_type_coercion = type_coercion.cst_decode();
            let api_simplify_expressions = simplify_expressions.cst_decode();
            let api_slice_pushdown = slice_pushdown.cst_decode();
            let api_streaming = streaming.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::lazy(
                            api_that,
                            api_projection_pushdown,
                            api_predicate_pushdown,
                            api_type_coercion,
                            api_simplify_expressions,
                            api_slice_pushdown,
                            api_streaming,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_max_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_max",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref()?;
                    Result::<_, anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::wrapper::DataFrame::max(&api_that),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_DataFrame_of_impl(
    series: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Series>>>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_of",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_series = series.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_series = api_series.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::of(api_series)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_reverse_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_reverse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::reverse(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_sample_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    n: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    with_replacement: impl CstDecode<bool> + core::panic::UnwindSafe,
    shuffle: impl CstDecode<bool> + core::panic::UnwindSafe,
    seed: impl CstDecode<Option<u64>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_sample",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            let api_with_replacement = with_replacement.cst_decode();
            let api_shuffle = shuffle.cst_decode();
            let api_seed = seed.cst_decode();
            move |context| {
                transform_result_dco((move || -> Result<_, anyhow::Error> {
                    let api_that = api_that.rust_auto_opaque_decode_ref()?;
                    let api_n = api_n.rust_auto_opaque_decode_ref()?;
                    Result::<_, anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::wrapper::DataFrame::sample(
                                &api_that,
                                &api_n,
                                api_with_replacement,
                                api_shuffle,
                                api_seed,
                            )?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_DataFrame_schema_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_schema",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::schema(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_select_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    columns: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_select",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_columns = columns.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::select(&api_that, api_columns)?,
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_shape_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_shape",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::DataFrame::shape(&api_that)
            })())
        },
    )
}
fn wire_DataFrame_sort_in_place_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    by_column: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
    descending: impl CstDecode<Vec<bool>> + core::panic::UnwindSafe,
    maintain_order: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_sort_in_place",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_by_column = by_column.cst_decode();
            let api_descending = descending.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                let mut api_that = api_that.rust_auto_opaque_decode_ref_mut()?;
                crate::wrapper::DataFrame::sort_in_place(
                    &mut api_that,
                    api_by_column,
                    api_descending,
                    api_maintain_order,
                )
            })())
        },
    )
}
fn wire_DataFrame_tail_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    length: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::tail(&api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_DataFrame_width_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_width",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::DataFrame::width(&api_that))
            })())
        },
    )
}
fn wire_DataFrame_with_row_count_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
        + core::panic::UnwindSafe,
    name: impl CstDecode<String> + core::panic::UnwindSafe,
    offset: impl CstDecode<Option<u32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "DataFrame_with_row_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_name = name.cst_decode();
            let api_offset = offset.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::DataFrame::with_row_count(&api_that, api_name, api_offset)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_abs_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_abs",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::abs(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_add_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_add",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::add(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_agg_groups_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_agg_groups",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::agg_groups(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_alias_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    name: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_alias",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_name = name.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::alias(api_that, api_name),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_all_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    ignore_nulls: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_all",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ignore_nulls = ignore_nulls.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::all(api_that, api_ignore_nulls),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_and_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    expr: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_and",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_expr = expr.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_expr = api_expr.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::and(api_that, api_expr),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_any_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    ignore_nulls: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_any",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ignore_nulls = ignore_nulls.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::any(api_that, api_ignore_nulls),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_append_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    upcast: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_append",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_upcast = upcast.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::append(api_that, api_other, api_upcast),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arccos_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arccos",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arccos(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arccosh_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arccosh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arccosh(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arcsin_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arcsin",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arcsin(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arcsinh_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arcsinh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arcsinh(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arctan_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arctan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arctan(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arctan2_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    x: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arctan2",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_x = x.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_x = api_x.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arctan2(api_that, api_x),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arctanh_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arctanh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arctanh(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arg_max_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arg_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arg_max(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arg_min_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arg_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arg_min(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arg_sort_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    descending: impl CstDecode<bool> + core::panic::UnwindSafe,
    nulls_last: impl CstDecode<bool> + core::panic::UnwindSafe,
    multithreaded: impl CstDecode<bool> + core::panic::UnwindSafe,
    maintain_order: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arg_sort",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_descending = descending.cst_decode();
            let api_nulls_last = nulls_last.cst_decode();
            let api_multithreaded = multithreaded.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arg_sort(
                            api_that,
                            api_descending,
                            api_nulls_last,
                            api_multithreaded,
                            api_maintain_order,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_arg_unique_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_arg_unique",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::arg_unique(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_backward_fill_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    limit: impl CstDecode<Option<u32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_backward_fill",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_limit = limit.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::backward_fill(api_that, api_limit),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cast_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    data_type: impl CstDecode<crate::wrapper::DataType> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cast",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_data_type = data_type.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cast(api_that, api_data_type),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cbrt_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cbrt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cbrt(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_ceil_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_ceil",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::ceil(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_clip_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    min: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    max: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_clip",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min = min.cst_decode();
            let api_max = max.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_min = api_min.rust_auto_opaque_decode_owned()?;
                let api_max = api_max.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::clip(api_that, api_min, api_max),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_clip_max_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    max: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_clip_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_max = max.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_max = api_max.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::clip_max(api_that, api_max),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_clip_min_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    min: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_clip_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min = min.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_min = api_min.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::clip_min(api_that, api_min),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cos_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cos",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cos(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cosh_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cosh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cosh(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cot_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cot",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cot(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_count_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::count(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cum_count_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    reverse: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cum_count(api_that, api_reverse),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cum_max_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    reverse: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cum_max(api_that, api_reverse),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cum_min_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    reverse: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cum_min(api_that, api_reverse),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cum_prod_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    reverse: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_prod",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cum_prod(api_that, api_reverse),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_cum_sum_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    reverse: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_cum_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::cum_sum(api_that, api_reverse),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_degrees_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_degrees",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::degrees(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_div_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_div",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::div(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_dot_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_dot",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::dot(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_drop_nans_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_drop_nans",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::drop_nans(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_drop_nulls_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_drop_nulls",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::drop_nulls(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_entropy_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    base: impl CstDecode<f64> + core::panic::UnwindSafe,
    normalize: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_entropy",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_base = base.cst_decode();
            let api_normalize = normalize.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::entropy(api_that, api_base, api_normalize),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_eq_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_eq",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::eq(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_eq_missing_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_eq_missing",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::eq_missing(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_exclude_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    columns: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_exclude",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_columns = columns.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::exclude(api_that, api_columns),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_exclude_dtype_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    dtypes: impl CstDecode<Vec<crate::wrapper::DataType>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_exclude_dtype",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_dtypes = dtypes.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::exclude_dtype(api_that, api_dtypes),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_exp_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_exp",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::exp(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_explode_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_explode",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::explode(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_fill_nan_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    value: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_fill_nan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_value = value.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_value = api_value.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::fill_nan(api_that, api_value),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_fill_null_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    value: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_fill_null",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_value = value.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_value = api_value.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::fill_null(api_that, api_value),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_filter_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    cond: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_filter",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_cond = cond.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_cond = api_cond.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::filter(api_that, api_cond),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_first_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_first",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::first(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_flatten_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_flatten",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::flatten(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_floor_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_floor",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::floor(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_floor_div_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    rhs: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_floor_div",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_rhs = rhs.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_rhs = api_rhs.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::floor_div(api_that, api_rhs),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_forward_fill_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    limit: impl CstDecode<Option<u32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_forward_fill",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_limit = limit.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::forward_fill(api_that, api_limit),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_gather_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    idx: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_gather",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_idx = idx.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_idx = api_idx.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::gather(api_that, api_idx),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_get_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    idx: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_get",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_idx = idx.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_idx = api_idx.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::get(api_that, api_idx),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_gt_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_gt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::gt(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_gt_eq_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_gt_eq",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::gt_eq(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_head_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    length: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_head",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::head(api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_implode_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_implode",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::implode(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_is_finite_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_finite",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::is_finite(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_is_in_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_in",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::is_in(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_is_nan_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_nan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::is_nan(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_is_not_nan_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_not_nan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::is_not_nan(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_is_not_null_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_not_null",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::is_not_null(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_is_null_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_is_null",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::is_null(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_last_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_last",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::last(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_log_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    base: impl CstDecode<f64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_log",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_base = base.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::log(api_that, api_base),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_log1p_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_log1p",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::log1p(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_lower_bound_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_lower_bound",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::lower_bound(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_lt_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_lt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::lt(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_lt_eq_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_lt_eq",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::lt_eq(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_mul_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_mul",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::mul(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_n_unique_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_n_unique",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::n_unique(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_nan_max_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_nan_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::nan_max(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_nan_min_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_nan_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::nan_min(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_neq_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_neq",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::neq(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_neq_missing_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_neq_missing",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::neq_missing(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_not_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_not",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::not(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_null_count_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_null_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::null_count(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_or_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    expr: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_or",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_expr = expr.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_expr = api_expr.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::or(api_that, api_expr),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_over_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    partiion_by: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>>>
        + core::panic::UnwindSafe,
    kind: impl CstDecode<Option<crate::wrapper::WindowMapping>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_over",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_partiion_by = partiion_by.cst_decode();
            let api_kind = kind.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_partiion_by = api_partiion_by.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::over(api_that, api_partiion_by, api_kind),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_pow_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    exponent: impl CstDecode<f64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_pow",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exponent = exponent.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::pow(api_that, api_exponent),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_product_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_product",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::product(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_quantile_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    quantile: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    interpol: impl CstDecode<Option<crate::wrapper::QuantileInterpolOptions>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_quantile",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_quantile = quantile.cst_decode();
            let api_interpol = interpol.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_quantile = api_quantile.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::quantile(api_that, api_quantile, api_interpol),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_radians_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_radians",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::radians(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_rem_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rem",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::rem(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_reshape_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    dims: impl CstDecode<Vec<i64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_reshape",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_dims = dims.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::reshape(api_that, api_dims),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_reverse_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_reverse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::reverse(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_rolling_max_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    window_size: impl CstDecode<Option<chrono::Duration>> + core::panic::UnwindSafe,
    min_periods: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    weights: impl CstDecode<Option<Vec<f64>>> + core::panic::UnwindSafe,
    center: impl CstDecode<bool> + core::panic::UnwindSafe,
    by: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    closed_window: impl CstDecode<Option<crate::wrapper::ClosedWindow>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::rolling_max(
                            api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_rolling_mean_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    window_size: impl CstDecode<Option<chrono::Duration>> + core::panic::UnwindSafe,
    min_periods: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    weights: impl CstDecode<Option<Vec<f64>>> + core::panic::UnwindSafe,
    center: impl CstDecode<bool> + core::panic::UnwindSafe,
    by: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    closed_window: impl CstDecode<Option<crate::wrapper::ClosedWindow>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_mean",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::rolling_mean(
                            api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_rolling_median_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    window_size: impl CstDecode<Option<chrono::Duration>> + core::panic::UnwindSafe,
    min_periods: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    weights: impl CstDecode<Option<Vec<f64>>> + core::panic::UnwindSafe,
    center: impl CstDecode<bool> + core::panic::UnwindSafe,
    by: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    closed_window: impl CstDecode<Option<crate::wrapper::ClosedWindow>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_median",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::rolling_median(
                            api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_rolling_min_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    window_size: impl CstDecode<Option<chrono::Duration>> + core::panic::UnwindSafe,
    min_periods: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    weights: impl CstDecode<Option<Vec<f64>>> + core::panic::UnwindSafe,
    center: impl CstDecode<bool> + core::panic::UnwindSafe,
    by: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    closed_window: impl CstDecode<Option<crate::wrapper::ClosedWindow>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::rolling_min(
                            api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_rolling_quantile_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    window_size: impl CstDecode<Option<chrono::Duration>> + core::panic::UnwindSafe,
    min_periods: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    weights: impl CstDecode<Option<Vec<f64>>> + core::panic::UnwindSafe,
    center: impl CstDecode<bool> + core::panic::UnwindSafe,
    by: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    closed_window: impl CstDecode<Option<crate::wrapper::ClosedWindow>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_quantile",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::rolling_quantile(
                            api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_rolling_std_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    window_size: impl CstDecode<Option<chrono::Duration>> + core::panic::UnwindSafe,
    min_periods: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    weights: impl CstDecode<Option<Vec<f64>>> + core::panic::UnwindSafe,
    center: impl CstDecode<bool> + core::panic::UnwindSafe,
    by: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    closed_window: impl CstDecode<Option<crate::wrapper::ClosedWindow>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_std",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::rolling_std(
                            api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_rolling_sum_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    window_size: impl CstDecode<Option<chrono::Duration>> + core::panic::UnwindSafe,
    min_periods: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    weights: impl CstDecode<Option<Vec<f64>>> + core::panic::UnwindSafe,
    center: impl CstDecode<bool> + core::panic::UnwindSafe,
    by: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    closed_window: impl CstDecode<Option<crate::wrapper::ClosedWindow>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::rolling_sum(
                            api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_rolling_var_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    window_size: impl CstDecode<Option<chrono::Duration>> + core::panic::UnwindSafe,
    min_periods: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    weights: impl CstDecode<Option<Vec<f64>>> + core::panic::UnwindSafe,
    center: impl CstDecode<bool> + core::panic::UnwindSafe,
    by: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    closed_window: impl CstDecode<Option<crate::wrapper::ClosedWindow>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_rolling_var",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_window_size = window_size.cst_decode();
            let api_min_periods = min_periods.cst_decode();
            let api_weights = weights.cst_decode();
            let api_center = center.cst_decode();
            let api_by = by.cst_decode();
            let api_closed_window = closed_window.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::rolling_var(
                            api_that,
                            api_window_size,
                            api_min_periods,
                            api_weights,
                            api_center,
                            api_by,
                            api_closed_window,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_round_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    decimals: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_round",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_decimals = decimals.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::round(api_that, api_decimals),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_round_sig_figs_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    digits: impl CstDecode<i32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_round_sig_figs",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_digits = digits.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::round_sig_figs(api_that, api_digits),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_set_sorted_flag_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    sorted: impl CstDecode<crate::wrapper::IsSorted> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_set_sorted_flag",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_sorted = sorted.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::set_sorted_flag(api_that, api_sorted),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_shift_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    n: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_shift",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_n = api_n.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::shift(api_that, api_n),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_shift_and_fill_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    n: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    fill_value: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_shift_and_fill",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            let api_fill_value = fill_value.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_n = api_n.rust_auto_opaque_decode_owned()?;
                let api_fill_value = api_fill_value.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::shift_and_fill(api_that, api_n, api_fill_value),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_shrink_dtype_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_shrink_dtype",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::shrink_dtype(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_sin_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_sin",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::sin(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_sinh_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_sinh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::sinh(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_slice_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    offset: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    length: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_slice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_offset = offset.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_offset = api_offset.rust_auto_opaque_decode_owned()?;
                let api_length = api_length.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::slice(api_that, api_offset, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_sort_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    descending: impl CstDecode<bool> + core::panic::UnwindSafe,
    nulls_last: impl CstDecode<bool> + core::panic::UnwindSafe,
    multithreaded: impl CstDecode<bool> + core::panic::UnwindSafe,
    maintain_order: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_sort",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_descending = descending.cst_decode();
            let api_nulls_last = nulls_last.cst_decode();
            let api_multithreaded = multithreaded.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::sort(
                            api_that,
                            api_descending,
                            api_nulls_last,
                            api_multithreaded,
                            api_maintain_order,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_sqrt_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_sqrt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::sqrt(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_std_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    ddof: impl CstDecode<u8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_std",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::std(api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_strict_cast_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    data_type: impl CstDecode<crate::wrapper::DataType> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_strict_cast",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_data_type = data_type.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::strict_cast(api_that, api_data_type),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_sub_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_sub",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::sub(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_sum_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::sum(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_tail_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    length: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::tail(api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_tan_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_tan",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::tan(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_tanh_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_tanh",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::tanh(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_then_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    value: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    otherwise: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_then",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_value = value.cst_decode();
            let api_otherwise = otherwise.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_value = api_value.rust_auto_opaque_decode_owned()?;
                let api_otherwise = api_otherwise.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::then(api_that, api_value, api_otherwise),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_to_dot_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_to_dot",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Expr::to_dot(&api_that)
            })())
        },
    )
}
fn wire_Expr_to_physical_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_to_physical",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::to_physical(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_unique_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_unique",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::unique(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_unique_stable_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_unique_stable",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::unique_stable(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_upper_bound_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_upper_bound",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::upper_bound(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_value_counts_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    sort: impl CstDecode<bool> + core::panic::UnwindSafe,
    parallel: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_value_counts",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_sort = sort.cst_decode();
            let api_parallel = parallel.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::value_counts(api_that, api_sort, api_parallel),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_variance_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    ddof: impl CstDecode<u8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_variance",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::variance(api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_Expr_what_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_what",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_owned()?;
                    Result::<_, anyhow::Error>::Ok(crate::wrapper::Expr::what(api_that))
                })())
            }
        },
    )
}
fn wire_Expr_xor_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    expr: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Expr_xor",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_expr = expr.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_expr = api_expr.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Expr::xor(api_that, api_expr),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_cache_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_cache",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::cache(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_collect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_collect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || -> Result<_, anyhow::Error> {
                    let api_that = api_that.rust_auto_opaque_decode_owned()?;
                    Result::<_, anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::wrapper::LazyFrame::collect(api_that)?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_LazyFrame_cross_join_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_cross_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::cross_join(api_that, api_other),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_drop_nulls_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    subset: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Expr>>>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_drop_nulls",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_subset = subset.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_subset = api_subset.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::drop_nulls(api_that, api_subset),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_explode_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    columns: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_explode",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_columns = columns.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_columns = api_columns.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::explode(api_that, api_columns),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_fetch_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    n_rows: impl CstDecode<usize> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_fetch",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n_rows = n_rows.cst_decode();
            move |context| {
                transform_result_dco((move || -> Result<_, anyhow::Error> {
                    let api_that = api_that.rust_auto_opaque_decode_owned()?;
                    Result::<_, anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::wrapper::LazyFrame::fetch(api_that, api_n_rows)?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_LazyFrame_filter_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    pred: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_filter",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pred = pred.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_pred = api_pred.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::filter(api_that, api_pred)?,
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_first_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_first",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::first(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_group_by_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    exprs: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>>>
        + core::panic::UnwindSafe,
    maintain_order: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_group_by",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exprs = exprs.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_exprs = api_exprs.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::group_by(
                            api_that,
                            api_exprs,
                            api_maintain_order,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_inner_join_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    left_on: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    right_on: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_inner_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_left_on = left_on.cst_decode();
            let api_right_on = right_on.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                let api_left_on = api_left_on.rust_auto_opaque_decode_owned()?;
                let api_right_on = api_right_on.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::inner_join(
                            api_that,
                            api_other,
                            api_left_on,
                            api_right_on,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_join_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    on: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Expr>>>>>
        + core::panic::UnwindSafe,
    left_on: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Expr>>>>>
        + core::panic::UnwindSafe,
    right_on: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Expr>>>>>
        + core::panic::UnwindSafe,
    suffix: impl CstDecode<String> + core::panic::UnwindSafe,
    how: impl CstDecode<crate::wrapper::JoinType> + core::panic::UnwindSafe,
    allow_parallel: impl CstDecode<bool> + core::panic::UnwindSafe,
    force_parallel: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_on = on.cst_decode();
            let api_left_on = left_on.cst_decode();
            let api_right_on = right_on.cst_decode();
            let api_suffix = suffix.cst_decode();
            let api_how = how.cst_decode();
            let api_allow_parallel = allow_parallel.cst_decode();
            let api_force_parallel = force_parallel.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                let api_on = api_on.rust_auto_opaque_decode_owned()?;
                let api_left_on = api_left_on.rust_auto_opaque_decode_owned()?;
                let api_right_on = api_right_on.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::join(
                            api_that,
                            api_other,
                            api_on,
                            api_left_on,
                            api_right_on,
                            api_suffix,
                            api_how,
                            api_allow_parallel,
                            api_force_parallel,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_last_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_last",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::last(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_left_join_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    left_on: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    right_on: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_left_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_left_on = left_on.cst_decode();
            let api_right_on = right_on.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                let api_left_on = api_left_on.rust_auto_opaque_decode_owned()?;
                let api_right_on = api_right_on.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::left_join(
                            api_that,
                            api_other,
                            api_left_on,
                            api_right_on,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_limit_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    n: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_limit",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::limit(api_that, api_n),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_max_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::max(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_mean_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_mean",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::mean(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_median_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_median",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::median(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_melt_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    id_vars: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
    value_vars: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
    variable_name: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    value_name: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    streamable: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_melt",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_id_vars = id_vars.cst_decode();
            let api_value_vars = value_vars.cst_decode();
            let api_variable_name = variable_name.cst_decode();
            let api_value_name = value_name.cst_decode();
            let api_streamable = streamable.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::melt(
                            api_that,
                            api_id_vars,
                            api_value_vars,
                            api_variable_name,
                            api_value_name,
                            api_streamable,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_min_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::min(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_outer_join_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    left_on: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    right_on: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_outer_join",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_left_on = left_on.cst_decode();
            let api_right_on = right_on.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                let api_left_on = api_left_on.rust_auto_opaque_decode_owned()?;
                let api_right_on = api_right_on.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::outer_join(
                            api_that,
                            api_other,
                            api_left_on,
                            api_right_on,
                        ),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_quantile_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    quantile: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
    interpol: impl CstDecode<crate::wrapper::QuantileInterpolOptions> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_quantile",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_quantile = quantile.cst_decode();
            let api_interpol = interpol.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_quantile = api_quantile.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::quantile(api_that, api_quantile, api_interpol),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_reverse_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_reverse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::reverse(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_select_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    exprs: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_select",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exprs = exprs.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_exprs = api_exprs.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::select(api_that, api_exprs)?,
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_slice_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    offset: impl CstDecode<i64> + core::panic::UnwindSafe,
    len: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_slice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_offset = offset.cst_decode();
            let api_len = len.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::slice(api_that, api_offset, api_len),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_std_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    ddof: impl CstDecode<u8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_std",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::std(api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_sum_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::sum(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_tail_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    n: impl CstDecode<u32> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::tail(api_that, api_n),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_unique_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    subset: impl CstDecode<Option<Vec<String>>> + core::panic::UnwindSafe,
    keep_strategy: impl CstDecode<crate::wrapper::UniqueKeepStrategy> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_unique",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_subset = subset.cst_decode();
            let api_keep_strategy = keep_strategy.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::unique(api_that, api_subset, api_keep_strategy),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_variance_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    ddof: impl CstDecode<u8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_variance",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::variance(api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_with_column_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    expr: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_with_column",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_expr = expr.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_expr = api_expr.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::with_column(api_that, api_expr),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_with_columns_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    exprs: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_with_columns",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exprs = exprs.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_exprs = api_exprs.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::with_columns(api_that, api_exprs),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyFrame_with_row_count_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
        + core::panic::UnwindSafe,
    name: impl CstDecode<String> + core::panic::UnwindSafe,
    offset: impl CstDecode<Option<u32>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyFrame_with_row_count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_name = name.cst_decode();
            let api_offset = offset.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyFrame::with_row_count(api_that, api_name, api_offset),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyGroupBy_agg_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyGroupBy>>>
        + core::panic::UnwindSafe,
    exprs: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyGroupBy_agg",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_exprs = exprs.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                let api_exprs = api_exprs.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyGroupBy::agg(api_that, api_exprs),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyGroupBy_head_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyGroupBy>>>
        + core::panic::UnwindSafe,
    n: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyGroupBy_head",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyGroupBy::head(api_that, api_n),
                    ),
                )
            })())
        },
    )
}
fn wire_LazyGroupBy_tail_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyGroupBy>>>
        + core::panic::UnwindSafe,
    n: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LazyGroupBy_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_n = n.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::LazyGroupBy::tail(api_that, api_n),
                    ),
                )
            })())
        },
    )
}
fn wire_Schema_of_impl(
    fields: impl CstDecode<Vec<crate::wrapper::Field>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Schema_of",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_fields = fields.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::Schema::of(api_fields),
                ))
            })())
        },
    )
}
fn wire_Series_add_to_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_add_to",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                let api_other = api_other.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::add_to(&api_that, &api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_append_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_append",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || {
                let mut api_that = api_that.rust_auto_opaque_decode_ref_mut()?;
                let api_other = api_other.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::append(&mut api_that, &api_other)
            })())
        },
    )
}
fn wire_Series_apply_scalar_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    op: impl CstDecode<crate::wrapper::Operator> + core::panic::UnwindSafe,
    value: impl CstDecode<f64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_apply_scalar",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_op = op.cst_decode();
            let api_value = value.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::apply_scalar(&api_that, api_op, api_value)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_as_doubles_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    strict: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_doubles",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_strict = strict.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref()?;
                    crate::wrapper::Series::as_doubles(&api_that, api_strict)
                })())
            }
        },
    )
}
fn wire_Series_as_durations_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_durations",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::as_durations(&api_that)
            })())
        },
    )
}
fn wire_Series_as_ints_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    strict: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_ints",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_strict = strict.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::as_ints(&api_that, api_strict)
            })())
        },
    )
}
fn wire_Series_as_local_datetime_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_local_datetime",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::as_local_datetime(&api_that)
            })())
        },
    )
}
fn wire_Series_as_naive_datetime_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_naive_datetime",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::as_naive_datetime(&api_that)
            })())
        },
    )
}
fn wire_Series_as_strings_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_strings",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::as_strings(&api_that)
            })())
        },
    )
}
fn wire_Series_as_utc_datetime_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_as_utc_datetime",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::as_utc_datetime(&api_that)
            })())
        },
    )
}
fn wire_Series_cast_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    dtype: impl CstDecode<crate::wrapper::DataType> + core::panic::UnwindSafe,
    strict: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_cast",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_dtype = dtype.cst_decode();
            let api_strict = strict.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::cast(&api_that, api_dtype, api_strict)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_divide_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_divide",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::divide(&api_that, api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_dump_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_dump",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::dump(&api_that))
            })())
        },
    )
}
fn wire_Series_equal_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    ignore_null: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_equal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            let api_ignore_null = ignore_null.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                let api_other = api_other.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::equal(
                    &api_that,
                    &api_other,
                    api_ignore_null,
                ))
            })())
        },
    )
}
fn wire_Series_estimated_size_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_estimated_size",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::estimated_size(&api_that)
            })())
        },
    )
}
fn wire_Series_explode_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_explode",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::explode(&api_that)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_explode_by_offsets_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    offsets: impl CstDecode<Vec<i64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_explode_by_offsets",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_offsets = offsets.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::explode_by_offsets(&api_that, api_offsets)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_get_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    index: impl CstDecode<usize> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_get",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::get(&api_that, api_index)
            })())
        },
    )
}
fn wire_Series_get_string_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    index: impl CstDecode<usize> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_get_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_index = index.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::get_string(
                    &api_that, api_index,
                ))
            })())
        },
    )
}
fn wire_Series_head_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    length: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_head",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::head(&api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_into_frame_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_into_frame",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::into_frame(api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_is_bool_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_is_bool",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::is_bool(&api_that))
            })())
        },
    )
}
fn wire_Series_is_numeric_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_is_numeric",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::is_numeric(&api_that))
            })())
        },
    )
}
fn wire_Series_is_temporal_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_is_temporal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::is_temporal(&api_that))
            })())
        },
    )
}
fn wire_Series_is_utf8_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_is_utf8",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::is_utf8(&api_that)
            })())
        },
    )
}
fn wire_Series_iter_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_iter",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref()?;
                    Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::iter(
                        &api_that,
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, flutter_rust_bridge::for_generated::DartAbi>(),
                        ),
                    ))
                })())
            }
        },
    )
}
fn wire_Series_max_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_max",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                crate::wrapper::Series::max(&api_that)
            })())
        },
    )
}
fn wire_Series_mean_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_mean",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::mean(&api_that))
            })())
        },
    )
}
fn wire_Series_mean_as_series_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_mean_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::mean_as_series(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_median_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_median",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::median(&api_that))
            })())
        },
    )
}
fn wire_Series_median_as_series_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_median_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::median_as_series(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_min_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_min",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::min(&api_that))
            })())
        },
    )
}
fn wire_Series_multiply_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_multiply",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::multiply(&api_that, api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_of_bools_impl(
    name: impl CstDecode<String> + core::panic::UnwindSafe,
    values: impl CstDecode<Option<Vec<bool>>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_of_bools",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_name = name.cst_decode();
            let api_values = values.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::Series::of_bools(api_name, api_values),
                ))
            })())
        },
    )
}
fn wire_Series_of_doubles_impl(
    name: impl CstDecode<String> + core::panic::UnwindSafe,
    values: impl CstDecode<Option<Vec<Option<f64>>>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_of_doubles",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_name = name.cst_decode();
            let api_values = values.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::Series::of_doubles(api_name, api_values),
                ))
            })())
        },
    )
}
fn wire_Series_of_durations_impl(
    name: impl CstDecode<String> + core::panic::UnwindSafe,
    values: impl CstDecode<Option<Vec<Option<chrono::Duration>>>> + core::panic::UnwindSafe,
    unit: impl CstDecode<crate::wrapper::TimeUnit> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_of_durations",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_name = name.cst_decode();
            let api_values = values.cst_decode();
            let api_unit = unit.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::Series::of_durations(api_name, api_values, api_unit),
                ))
            })())
        },
    )
}
fn wire_Series_of_i32_impl(
    name: impl CstDecode<String> + core::panic::UnwindSafe,
    values: impl CstDecode<Option<Vec<Option<i32>>>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_of_i32",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_name = name.cst_decode();
            let api_values = values.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::Series::of_i32(api_name, api_values),
                ))
            })())
        },
    )
}
fn wire_Series_of_ints_impl(
    name: impl CstDecode<String> + core::panic::UnwindSafe,
    values: impl CstDecode<Option<Vec<Option<i64>>>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_of_ints",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_name = name.cst_decode();
            let api_values = values.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::Series::of_ints(api_name, api_values),
                ))
            })())
        },
    )
}
fn wire_Series_of_strings_impl(
    name: impl CstDecode<String> + core::panic::UnwindSafe,
    values: impl CstDecode<Option<Vec<Option<String>>>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_of_strings",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_name = name.cst_decode();
            let api_values = values.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::Series::of_strings(api_name, api_values),
                ))
            })())
        },
    )
}
fn wire_Series_product_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_product",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::product(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_remainder_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_remainder",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                let api_other = api_other.rust_auto_opaque_decode_owned()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::remainder(&api_that, api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_rename_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    name: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_rename",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_name = name.cst_decode();
            transform_result_dco((move || {
                let mut api_that = api_that.rust_auto_opaque_decode_ref_mut()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::rename(
                    &mut api_that,
                    api_name,
                ))
            })())
        },
    )
}
fn wire_Series_reshape_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    dims: impl CstDecode<Vec<i64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_reshape",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_dims = dims.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::reshape(&api_that, api_dims)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_shuffle_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    seed: impl CstDecode<Option<u64>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_shuffle",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_seed = seed.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::shuffle(&api_that, api_seed),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_sort_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    reverse: impl CstDecode<bool> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_sort",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_reverse = reverse.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::sort(&api_that, api_reverse),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_std_as_series_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    ddof: impl CstDecode<u8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_std_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::std_as_series(&api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_subtract_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    other: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_subtract",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_other = other.cst_decode();
            transform_result_dco((move || -> Result<_, anyhow::Error> {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                let api_other = api_other.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::subtract(&api_that, &api_other)?,
                    ),
                )
            })())
        },
    )
}
fn wire_Series_sum_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_sum",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::sum(&api_that))
            })())
        },
    )
}
fn wire_Series_sum_as_series_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_sum_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::sum_as_series(&api_that),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_tail_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    length: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_tail",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_length = length.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::tail(&api_that, api_length),
                    ),
                )
            })())
        },
    )
}
fn wire_Series_to_list_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_to_list",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(crate::wrapper::Series::to_list(&api_that))
            })())
        },
    )
}
fn wire_Series_unique_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    maintain_order: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_unique",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_maintain_order = maintain_order.cst_decode();
            move |context| {
                transform_result_dco((move || -> Result<_, anyhow::Error> {
                    let api_that = api_that.rust_auto_opaque_decode_ref()?;
                    Result::<_, anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::wrapper::Series::unique(&api_that, api_maintain_order)?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_Series_var_as_series_impl(
    that: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
        + core::panic::UnwindSafe,
    ddof: impl CstDecode<u8> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Series_var_as_series",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ddof = ddof.cst_decode();
            transform_result_dco((move || {
                let api_that = api_that.rust_auto_opaque_decode_ref()?;
                Result::<_, anyhow::Error>::Ok(
                    flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                        crate::wrapper::Series::var_as_series(&api_that, api_ddof),
                    ),
                )
            })())
        },
    )
}
fn wire_col_impl(
    name: impl CstDecode<String> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "col",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_name = name.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::col(api_name),
                ))
            })())
        },
    )
}
fn wire_cols_impl(
    names: impl CstDecode<Vec<String>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "cols",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_names = names.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::cols(api_names),
                ))
            })())
        },
    )
}
fn wire_count_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "count",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::count(),
                ))
            })())
        },
    )
}
fn wire_dtypes_impl(
    types: impl CstDecode<Vec<crate::wrapper::DataType>> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "dtypes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_types = types.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::dtypes(api_types),
                ))
            })())
        },
    )
}
fn wire_lit_impl(
    value: impl CstDecode<crate::wrapper::LiteralValue> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "lit",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_value = value.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::lit(api_value),
                ))
            })())
        },
    )
}
fn wire_nth_impl(
    idx: impl CstDecode<i64> + core::panic::UnwindSafe,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "nth",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_idx = idx.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                    crate::wrapper::nth(api_idx),
                ))
            })())
        },
    )
}
fn wire_read_csv_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    path: impl CstDecode<String> + core::panic::UnwindSafe,
    dtypes_slice: impl CstDecode<Option<Vec<crate::wrapper::DataType>>> + core::panic::UnwindSafe,
    has_header: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
    columns: impl CstDecode<Option<Vec<String>>> + core::panic::UnwindSafe,
    comment_char: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    eol_char: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    chunk_size: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    sample_size: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    row_count: impl CstDecode<Option<crate::wrapper::RowCount>> + core::panic::UnwindSafe,
    encoding: impl CstDecode<Option<crate::wrapper::CsvEncoding>> + core::panic::UnwindSafe,
    n_rows: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    n_threads: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    null_values: impl CstDecode<Option<crate::wrapper::NullValues>> + core::panic::UnwindSafe,
    projection: impl CstDecode<Option<Vec<u32>>> + core::panic::UnwindSafe,
    quote_char: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    skip_rows: impl CstDecode<usize> + core::panic::UnwindSafe,
    skip_rows_after_header: impl CstDecode<usize> + core::panic::UnwindSafe,
    ignore_errors: impl CstDecode<bool> + core::panic::UnwindSafe,
    rechunk: impl CstDecode<bool> + core::panic::UnwindSafe,
    try_parse_dates: impl CstDecode<bool> + core::panic::UnwindSafe,
    low_memory: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "read_csv",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_path = path.cst_decode();
            let api_dtypes_slice = dtypes_slice.cst_decode();
            let api_has_header = has_header.cst_decode();
            let api_columns = columns.cst_decode();
            let api_comment_char = comment_char.cst_decode();
            let api_eol_char = eol_char.cst_decode();
            let api_chunk_size = chunk_size.cst_decode();
            let api_sample_size = sample_size.cst_decode();
            let api_row_count = row_count.cst_decode();
            let api_encoding = encoding.cst_decode();
            let api_n_rows = n_rows.cst_decode();
            let api_n_threads = n_threads.cst_decode();
            let api_null_values = null_values.cst_decode();
            let api_projection = projection.cst_decode();
            let api_quote_char = quote_char.cst_decode();
            let api_skip_rows = skip_rows.cst_decode();
            let api_skip_rows_after_header = skip_rows_after_header.cst_decode();
            let api_ignore_errors = ignore_errors.cst_decode();
            let api_rechunk = rechunk.cst_decode();
            let api_try_parse_dates = try_parse_dates.cst_decode();
            let api_low_memory = low_memory.cst_decode();
            move |context| {
                transform_result_dco((move || -> Result<_, anyhow::Error> {
                    Result::<_, anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::wrapper::read_csv(
                                api_path,
                                api_dtypes_slice,
                                api_has_header,
                                api_columns,
                                api_comment_char,
                                api_eol_char,
                                api_chunk_size,
                                api_sample_size,
                                api_row_count,
                                api_encoding,
                                api_n_rows,
                                api_n_threads,
                                api_null_values,
                                api_projection,
                                api_quote_char,
                                api_skip_rows,
                                api_skip_rows_after_header,
                                api_ignore_errors,
                                api_rechunk,
                                api_try_parse_dates,
                                api_low_memory,
                            )?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_read_json_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    path: impl CstDecode<String> + core::panic::UnwindSafe,
    batch_size: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    projection: impl CstDecode<Option<Vec<String>>> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "read_json",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_path = path.cst_decode();
            let api_batch_size = batch_size.cst_decode();
            let api_projection = projection.cst_decode();
            move |context| {
                transform_result_dco((move || -> Result<_, anyhow::Error> {
                    Result::<_, anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::wrapper::read_json(api_path, api_batch_size, api_projection)?,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_scan_csv_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    path: impl CstDecode<String> + core::panic::UnwindSafe,
    dtype_overwrite: impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Schema>>>>
        + core::panic::UnwindSafe,
    has_header: impl CstDecode<Option<bool>> + core::panic::UnwindSafe,
    comment_char: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    eol_char: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    quote_char: impl CstDecode<Option<String>> + core::panic::UnwindSafe,
    skip_rows: impl CstDecode<usize> + core::panic::UnwindSafe,
    skip_rows_after_header: impl CstDecode<usize> + core::panic::UnwindSafe,
    row_count: impl CstDecode<Option<crate::wrapper::RowCount>> + core::panic::UnwindSafe,
    encoding: impl CstDecode<Option<crate::wrapper::CsvEncoding>> + core::panic::UnwindSafe,
    n_rows: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    null_values: impl CstDecode<Option<crate::wrapper::NullValues>> + core::panic::UnwindSafe,
    ignore_errors: impl CstDecode<bool> + core::panic::UnwindSafe,
    rechunk: impl CstDecode<bool> + core::panic::UnwindSafe,
    try_parse_dates: impl CstDecode<bool> + core::panic::UnwindSafe,
    infer_schema_length: impl CstDecode<Option<usize>> + core::panic::UnwindSafe,
    cache: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "scan_csv",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_path = path.cst_decode();
            let api_dtype_overwrite = dtype_overwrite.cst_decode();
            let api_has_header = has_header.cst_decode();
            let api_comment_char = comment_char.cst_decode();
            let api_eol_char = eol_char.cst_decode();
            let api_quote_char = quote_char.cst_decode();
            let api_skip_rows = skip_rows.cst_decode();
            let api_skip_rows_after_header = skip_rows_after_header.cst_decode();
            let api_row_count = row_count.cst_decode();
            let api_encoding = encoding.cst_decode();
            let api_n_rows = n_rows.cst_decode();
            let api_null_values = null_values.cst_decode();
            let api_ignore_errors = ignore_errors.cst_decode();
            let api_rechunk = rechunk.cst_decode();
            let api_try_parse_dates = try_parse_dates.cst_decode();
            let api_infer_schema_length = infer_schema_length.cst_decode();
            let api_cache = cache.cst_decode();
            move |context| {
                transform_result_dco((move || -> Result<_, anyhow::Error> {
                    let api_dtype_overwrite =
                        api_dtype_overwrite.rust_auto_opaque_decode_owned()?;
                    Result::<_, anyhow::Error>::Ok(
                        flutter_rust_bridge::for_generated::rust_auto_opaque_encode(
                            crate::wrapper::scan_csv(
                                api_path,
                                api_dtype_overwrite,
                                api_has_header,
                                api_comment_char,
                                api_eol_char,
                                api_quote_char,
                                api_skip_rows,
                                api_skip_rows_after_header,
                                api_row_count,
                                api_encoding,
                                api_n_rows,
                                api_null_values,
                                api_ignore_errors,
                                api_rechunk,
                                api_try_parse_dates,
                                api_infer_schema_length,
                                api_cache,
                            )?,
                        ),
                    )
                })())
            }
        },
    )
}

// Section: wrapper_structs

#[derive(Clone)]
pub struct mirror_ClosedWindow(crate::wrapper::ClosedWindow);

#[derive(Clone)]
pub struct mirror_CsvEncoding(crate::wrapper::CsvEncoding);

#[derive(Clone)]
pub struct mirror_DataType(crate::wrapper::DataType);

#[derive(Clone)]
pub struct mirror_Field(crate::wrapper::Field);

#[derive(Clone)]
pub struct mirror_IsSorted(crate::wrapper::IsSorted);

#[derive(Clone)]
pub struct mirror_JoinType(crate::wrapper::JoinType);

#[derive(Clone)]
pub struct mirror_LiteralValue(crate::wrapper::LiteralValue);

#[derive(Clone)]
pub struct mirror_NullValues(crate::wrapper::NullValues);

#[derive(Clone)]
pub struct mirror_Operator(crate::wrapper::Operator);

#[derive(Clone)]
pub struct mirror_QuantileInterpolOptions(crate::wrapper::QuantileInterpolOptions);

#[derive(Clone)]
pub struct mirror_RowCount(crate::wrapper::RowCount);

#[derive(Clone)]
pub struct mirror_TimeUnit(crate::wrapper::TimeUnit);

#[derive(Clone)]
pub struct mirror_UniqueKeepStrategy(crate::wrapper::UniqueKeepStrategy);

#[derive(Clone)]
pub struct mirror_WindowMapping(crate::wrapper::WindowMapping);

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    match None::<crate::wrapper::DataType>.unwrap() {
        crate::wrapper::DataType::Boolean => {}
        crate::wrapper::DataType::UInt8 => {}
        crate::wrapper::DataType::UInt16 => {}
        crate::wrapper::DataType::UInt32 => {}
        crate::wrapper::DataType::UInt64 => {}
        crate::wrapper::DataType::Int8 => {}
        crate::wrapper::DataType::Int16 => {}
        crate::wrapper::DataType::Int32 => {}
        crate::wrapper::DataType::Int64 => {}
        crate::wrapper::DataType::Float32 => {}
        crate::wrapper::DataType::Float64 => {}
        crate::wrapper::DataType::Utf8 => {}
        crate::wrapper::DataType::Binary => {}
        crate::wrapper::DataType::Date => {}
        crate::wrapper::DataType::Datetime(field0, field1) => {
            let _: crate::wrapper::TimeUnit = field0;
            let _: Option<String> = field1;
        }
        crate::wrapper::DataType::Duration(field0) => {
            let _: crate::wrapper::TimeUnit = field0;
        }
        crate::wrapper::DataType::Time => {}
        crate::wrapper::DataType::List(field0) => {
            let _: Box<crate::wrapper::DataType> = field0;
        }
        crate::wrapper::DataType::Null => {}
        crate::wrapper::DataType::Struct(field0) => {
            let _: Vec<crate::wrapper::Field> = field0;
        }
        crate::wrapper::DataType::Unknown => {}
    }
    {
        let Field = None::<crate::wrapper::Field>.unwrap();
        let _: String = Field.name;
        let _: crate::wrapper::DataType = Field.dtype;
    }
    match None::<crate::wrapper::LiteralValue>.unwrap() {
        crate::wrapper::LiteralValue::Null => {}
        crate::wrapper::LiteralValue::Boolean(field0) => {
            let _: bool = field0;
        }
        crate::wrapper::LiteralValue::Utf8(field0) => {
            let _: String = field0;
        }
        crate::wrapper::LiteralValue::Binary(field0) => {
            let _: Vec<u8> = field0;
        }
        crate::wrapper::LiteralValue::UInt8(field0) => {
            let _: u8 = field0;
        }
        crate::wrapper::LiteralValue::UInt16(field0) => {
            let _: u16 = field0;
        }
        crate::wrapper::LiteralValue::UInt32(field0) => {
            let _: u32 = field0;
        }
        crate::wrapper::LiteralValue::UInt64(field0) => {
            let _: u64 = field0;
        }
        crate::wrapper::LiteralValue::Int8(field0) => {
            let _: i8 = field0;
        }
        crate::wrapper::LiteralValue::Int16(field0) => {
            let _: i16 = field0;
        }
        crate::wrapper::LiteralValue::Int32(field0) => {
            let _: i32 = field0;
        }
        crate::wrapper::LiteralValue::Int64(field0) => {
            let _: i64 = field0;
        }
        crate::wrapper::LiteralValue::Float32(field0) => {
            let _: f32 = field0;
        }
        crate::wrapper::LiteralValue::Float64(field0) => {
            let _: f64 = field0;
        }
        crate::wrapper::LiteralValue::Range {
            low,
            high,
            data_type,
        } => {
            let _: i64 = low;
            let _: i64 = high;
            let _: crate::wrapper::DataType = data_type;
        }
        crate::wrapper::LiteralValue::DateTime(field0, field1, field2) => {
            let _: i64 = field0;
            let _: crate::wrapper::TimeUnit = field1;
            let _: Option<String> = field2;
        }
        crate::wrapper::LiteralValue::Duration(field0, field1) => {
            let _: i64 = field0;
            let _: crate::wrapper::TimeUnit = field1;
        }
        crate::wrapper::LiteralValue::Date(field0) => {
            let _: i32 = field0;
        }
        crate::wrapper::LiteralValue::Time(field0) => {
            let _: i64 = field0;
        }
    }
    match None::<crate::wrapper::NullValues>.unwrap() {
        crate::wrapper::NullValues::AllColumnsSingle(field0) => {
            let _: String = field0;
        }
        crate::wrapper::NullValues::AllColumns(field0) => {
            let _: Vec<String> = field0;
        }
        crate::wrapper::NullValues::Named(field0) => {
            let _: Vec<(String, String)> = field0;
        }
    }
    {
        let RowCount = None::<crate::wrapper::RowCount>.unwrap();
        let _: String = RowCount.name;
        let _: u32 = RowCount.offset;
    }
};

// Section: dart2rust

impl CstDecode<chrono::DateTime<chrono::Local>> for i64 {
    fn cst_decode(self) -> chrono::DateTime<chrono::Local> {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::DateTime::<chrono::Local>::from(
            chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
                chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                    .expect("invalid or out-of-range datetime"),
                chrono::Utc,
            ),
        )
    }
}
impl CstDecode<chrono::NaiveDateTime> for i64 {
    fn cst_decode(self) -> chrono::NaiveDateTime {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::NaiveDateTime::from_timestamp_opt(s, ns).expect("invalid or out-of-range datetime")
    }
}
impl CstDecode<chrono::DateTime<chrono::Utc>> for i64 {
    fn cst_decode(self) -> chrono::DateTime<chrono::Utc> {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        )
    }
}
impl CstDecode<bool> for bool {
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<crate::wrapper::ClosedWindow> for i32 {
    fn cst_decode(self) -> crate::wrapper::ClosedWindow {
        match self {
            0 => crate::wrapper::ClosedWindow::Left,
            1 => crate::wrapper::ClosedWindow::Right,
            2 => crate::wrapper::ClosedWindow::Both,
            3 => crate::wrapper::ClosedWindow::None,
            _ => unreachable!("Invalid variant for ClosedWindow: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::CsvEncoding> for i32 {
    fn cst_decode(self) -> crate::wrapper::CsvEncoding {
        match self {
            0 => crate::wrapper::CsvEncoding::Utf8,
            1 => crate::wrapper::CsvEncoding::LossyUtf8,
            _ => unreachable!("Invalid variant for CsvEncoding: {}", self),
        }
    }
}
impl CstDecode<f32> for f32 {
    fn cst_decode(self) -> f32 {
        self
    }
}
impl CstDecode<f64> for f64 {
    fn cst_decode(self) -> f64 {
        self
    }
}
impl CstDecode<i16> for i16 {
    fn cst_decode(self) -> i16 {
        self
    }
}
impl CstDecode<i32> for i32 {
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<i8> for i8 {
    fn cst_decode(self) -> i8 {
        self
    }
}
impl CstDecode<crate::wrapper::IsSorted> for i32 {
    fn cst_decode(self) -> crate::wrapper::IsSorted {
        match self {
            0 => crate::wrapper::IsSorted::Ascending,
            1 => crate::wrapper::IsSorted::Descending,
            2 => crate::wrapper::IsSorted::Not,
            _ => unreachable!("Invalid variant for IsSorted: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::JoinType> for i32 {
    fn cst_decode(self) -> crate::wrapper::JoinType {
        match self {
            0 => crate::wrapper::JoinType::Left,
            1 => crate::wrapper::JoinType::Inner,
            2 => crate::wrapper::JoinType::Outer,
            3 => crate::wrapper::JoinType::Cross,
            4 => crate::wrapper::JoinType::Semi,
            5 => crate::wrapper::JoinType::Anti,
            _ => unreachable!("Invalid variant for JoinType: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::Operator> for i32 {
    fn cst_decode(self) -> crate::wrapper::Operator {
        match self {
            0 => crate::wrapper::Operator::Eq,
            1 => crate::wrapper::Operator::EqValidity,
            2 => crate::wrapper::Operator::NotEq,
            3 => crate::wrapper::Operator::NotEqValidity,
            4 => crate::wrapper::Operator::Lt,
            5 => crate::wrapper::Operator::LtEq,
            6 => crate::wrapper::Operator::Gt,
            7 => crate::wrapper::Operator::GtEq,
            8 => crate::wrapper::Operator::Plus,
            9 => crate::wrapper::Operator::Minus,
            10 => crate::wrapper::Operator::Multiply,
            11 => crate::wrapper::Operator::Divide,
            12 => crate::wrapper::Operator::TrueDivide,
            13 => crate::wrapper::Operator::FloorDivide,
            14 => crate::wrapper::Operator::Modulus,
            15 => crate::wrapper::Operator::And,
            16 => crate::wrapper::Operator::Or,
            17 => crate::wrapper::Operator::Xor,
            _ => unreachable!("Invalid variant for Operator: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::QuantileInterpolOptions> for i32 {
    fn cst_decode(self) -> crate::wrapper::QuantileInterpolOptions {
        match self {
            0 => crate::wrapper::QuantileInterpolOptions::Nearest,
            1 => crate::wrapper::QuantileInterpolOptions::Lower,
            2 => crate::wrapper::QuantileInterpolOptions::Higher,
            3 => crate::wrapper::QuantileInterpolOptions::Midpoint,
            4 => crate::wrapper::QuantileInterpolOptions::Linear,
            _ => unreachable!("Invalid variant for QuantileInterpolOptions: {}", self),
        }
    }
}
impl CstDecode<crate::wrapper::TimeUnit> for i32 {
    fn cst_decode(self) -> crate::wrapper::TimeUnit {
        match self {
            0 => crate::wrapper::TimeUnit::Nanoseconds,
            1 => crate::wrapper::TimeUnit::Microseconds,
            2 => crate::wrapper::TimeUnit::Milliseconds,
            _ => unreachable!("Invalid variant for TimeUnit: {}", self),
        }
    }
}
impl CstDecode<u16> for u16 {
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u32> for u32 {
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<crate::wrapper::UniqueKeepStrategy> for i32 {
    fn cst_decode(self) -> crate::wrapper::UniqueKeepStrategy {
        match self {
            0 => crate::wrapper::UniqueKeepStrategy::First,
            1 => crate::wrapper::UniqueKeepStrategy::Last,
            2 => crate::wrapper::UniqueKeepStrategy::None,
            3 => crate::wrapper::UniqueKeepStrategy::Any,
            _ => unreachable!("Invalid variant for UniqueKeepStrategy: {}", self),
        }
    }
}
impl CstDecode<usize> for usize {
    fn cst_decode(self) -> usize {
        self
    }
}
impl CstDecode<crate::wrapper::WindowMapping> for i32 {
    fn cst_decode(self) -> crate::wrapper::WindowMapping {
        match self {
            0 => crate::wrapper::WindowMapping::GroupsToRows,
            1 => crate::wrapper::WindowMapping::Explode,
            2 => crate::wrapper::WindowMapping::Join,
            _ => unreachable!("Invalid variant for WindowMapping: {}", self),
        }
    }
}
impl SseDecode for anyhow::Error {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseDecode for chrono::Duration {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseDecode for chrono::DateTime<chrono::Local> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseDecode for chrono::NaiveDateTime {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseDecode for chrono::DateTime<chrono::Utc> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyGroupBy>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Schema>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Expr>>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Series>>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Schema>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Series>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_rust_opaque(inner) };
    }
}

impl SseDecode for String {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for Box<crate::wrapper::DataType> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::wrapper::DataType>::sse_decode(deserializer));
    }
}

impl SseDecode for crate::wrapper::ClosedWindow {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::ClosedWindow::Left,
            1 => crate::wrapper::ClosedWindow::Right,
            2 => crate::wrapper::ClosedWindow::Both,
            3 => crate::wrapper::ClosedWindow::None,
            _ => unreachable!("Invalid variant for ClosedWindow: {}", inner),
        };
    }
}

impl SseDecode for crate::wrapper::CsvEncoding {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::CsvEncoding::Utf8,
            1 => crate::wrapper::CsvEncoding::LossyUtf8,
            _ => unreachable!("Invalid variant for CsvEncoding: {}", inner),
        };
    }
}

impl SseDecode for flutter_rust_bridge::for_generated::DartAbi {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("");
    }
}

impl SseDecode for crate::wrapper::DataType {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::wrapper::DataType::Boolean;
            }
            1 => {
                return crate::wrapper::DataType::UInt8;
            }
            2 => {
                return crate::wrapper::DataType::UInt16;
            }
            3 => {
                return crate::wrapper::DataType::UInt32;
            }
            4 => {
                return crate::wrapper::DataType::UInt64;
            }
            5 => {
                return crate::wrapper::DataType::Int8;
            }
            6 => {
                return crate::wrapper::DataType::Int16;
            }
            7 => {
                return crate::wrapper::DataType::Int32;
            }
            8 => {
                return crate::wrapper::DataType::Int64;
            }
            9 => {
                return crate::wrapper::DataType::Float32;
            }
            10 => {
                return crate::wrapper::DataType::Float64;
            }
            11 => {
                return crate::wrapper::DataType::Utf8;
            }
            12 => {
                return crate::wrapper::DataType::Binary;
            }
            13 => {
                return crate::wrapper::DataType::Date;
            }
            14 => {
                let mut var_field0 = <crate::wrapper::TimeUnit>::sse_decode(deserializer);
                let mut var_field1 = <Option<String>>::sse_decode(deserializer);
                return crate::wrapper::DataType::Datetime(var_field0, var_field1);
            }
            15 => {
                let mut var_field0 = <crate::wrapper::TimeUnit>::sse_decode(deserializer);
                return crate::wrapper::DataType::Duration(var_field0);
            }
            16 => {
                return crate::wrapper::DataType::Time;
            }
            17 => {
                let mut var_field0 = <Box<crate::wrapper::DataType>>::sse_decode(deserializer);
                return crate::wrapper::DataType::List(var_field0);
            }
            18 => {
                return crate::wrapper::DataType::Null;
            }
            19 => {
                let mut var_field0 = <Vec<crate::wrapper::Field>>::sse_decode(deserializer);
                return crate::wrapper::DataType::Struct(var_field0);
            }
            20 => {
                return crate::wrapper::DataType::Unknown;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for f32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::wrapper::Field {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_dtype = <crate::wrapper::DataType>::sse_decode(deserializer);
        return crate::wrapper::Field {
            name: var_name,
            dtype: var_dtype,
        };
    }
}

impl SseDecode for i16 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i8().unwrap()
    }
}

impl SseDecode for crate::wrapper::IsSorted {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::IsSorted::Ascending,
            1 => crate::wrapper::IsSorted::Descending,
            2 => crate::wrapper::IsSorted::Not,
            _ => unreachable!("Invalid variant for IsSorted: {}", inner),
        };
    }
}

impl SseDecode for crate::wrapper::JoinType {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::JoinType::Left,
            1 => crate::wrapper::JoinType::Inner,
            2 => crate::wrapper::JoinType::Outer,
            3 => crate::wrapper::JoinType::Cross,
            4 => crate::wrapper::JoinType::Semi,
            5 => crate::wrapper::JoinType::Anti,
            _ => unreachable!("Invalid variant for JoinType: {}", inner),
        };
    }
}

impl SseDecode for Vec<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<bool> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<bool>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<flutter_rust_bridge::for_generated::DartAbi> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<flutter_rust_bridge::for_generated::DartAbi>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::wrapper::DataType> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::wrapper::DataType>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::wrapper::Field> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::wrapper::Field>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<String>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<String>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<chrono::Duration>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<chrono::Duration>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<chrono::DateTime<chrono::Local>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<chrono::DateTime<chrono::Local>>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<chrono::NaiveDateTime>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<chrono::NaiveDateTime>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<chrono::DateTime<chrono::Utc>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<chrono::DateTime<chrono::Utc>>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<f64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<f64>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<i32>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<i32>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<i64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<i64>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<f64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<f64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::wrapper::LiteralValue {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::wrapper::LiteralValue::Null;
            }
            1 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Boolean(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Utf8(var_field0);
            }
            3 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Binary(var_field0);
            }
            4 => {
                let mut var_field0 = <u8>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::UInt8(var_field0);
            }
            5 => {
                let mut var_field0 = <u16>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::UInt16(var_field0);
            }
            6 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::UInt32(var_field0);
            }
            7 => {
                let mut var_field0 = <u64>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::UInt64(var_field0);
            }
            8 => {
                let mut var_field0 = <i8>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Int8(var_field0);
            }
            9 => {
                let mut var_field0 = <i16>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Int16(var_field0);
            }
            10 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Int32(var_field0);
            }
            11 => {
                let mut var_field0 = <i64>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Int64(var_field0);
            }
            12 => {
                let mut var_field0 = <f32>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Float32(var_field0);
            }
            13 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Float64(var_field0);
            }
            14 => {
                let mut var_low = <i64>::sse_decode(deserializer);
                let mut var_high = <i64>::sse_decode(deserializer);
                let mut var_dataType = <crate::wrapper::DataType>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Range {
                    low: var_low,
                    high: var_high,
                    data_type: var_dataType,
                };
            }
            15 => {
                let mut var_field0 = <i64>::sse_decode(deserializer);
                let mut var_field1 = <crate::wrapper::TimeUnit>::sse_decode(deserializer);
                let mut var_field2 = <Option<String>>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::DateTime(var_field0, var_field1, var_field2);
            }
            16 => {
                let mut var_field0 = <i64>::sse_decode(deserializer);
                let mut var_field1 = <crate::wrapper::TimeUnit>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Duration(var_field0, var_field1);
            }
            17 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Date(var_field0);
            }
            18 => {
                let mut var_field0 = <i64>::sse_decode(deserializer);
                return crate::wrapper::LiteralValue::Time(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::wrapper::NullValues {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::wrapper::NullValues::AllColumnsSingle(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<String>>::sse_decode(deserializer);
                return crate::wrapper::NullValues::AllColumns(var_field0);
            }
            2 => {
                let mut var_field0 = <Vec<(String, String)>>::sse_decode(deserializer);
                return crate::wrapper::NullValues::Named(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::wrapper::Operator {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::Operator::Eq,
            1 => crate::wrapper::Operator::EqValidity,
            2 => crate::wrapper::Operator::NotEq,
            3 => crate::wrapper::Operator::NotEqValidity,
            4 => crate::wrapper::Operator::Lt,
            5 => crate::wrapper::Operator::LtEq,
            6 => crate::wrapper::Operator::Gt,
            7 => crate::wrapper::Operator::GtEq,
            8 => crate::wrapper::Operator::Plus,
            9 => crate::wrapper::Operator::Minus,
            10 => crate::wrapper::Operator::Multiply,
            11 => crate::wrapper::Operator::Divide,
            12 => crate::wrapper::Operator::TrueDivide,
            13 => crate::wrapper::Operator::FloorDivide,
            14 => crate::wrapper::Operator::Modulus,
            15 => crate::wrapper::Operator::And,
            16 => crate::wrapper::Operator::Or,
            17 => crate::wrapper::Operator::Xor,
            _ => unreachable!("Invalid variant for Operator: {}", inner),
        };
    }
}

impl SseDecode for Option<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::Duration> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::Duration>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::DateTime<chrono::Local>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::DateTime<chrono::Local>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::NaiveDateTime> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::NaiveDateTime>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::DateTime<chrono::Utc>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::DateTime<chrono::Utc>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::ClosedWindow> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::ClosedWindow>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::CsvEncoding> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::CsvEncoding>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::NullValues> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::NullValues>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::QuantileInterpolOptions> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::QuantileInterpolOptions>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::RowCount> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::RowCount>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::wrapper::WindowMapping> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::wrapper::WindowMapping>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<bool>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<bool>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::wrapper::DataType>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::wrapper::DataType>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<Option<String>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<Option<String>>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<Option<chrono::Duration>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<Option<chrono::Duration>>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<Option<f64>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<Option<f64>>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<Option<i32>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<Option<i32>>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<Option<i64>>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<Option<i64>>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<f64>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<f64>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u32>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u32>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::wrapper::QuantileInterpolOptions {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::QuantileInterpolOptions::Nearest,
            1 => crate::wrapper::QuantileInterpolOptions::Lower,
            2 => crate::wrapper::QuantileInterpolOptions::Higher,
            3 => crate::wrapper::QuantileInterpolOptions::Midpoint,
            4 => crate::wrapper::QuantileInterpolOptions::Linear,
            _ => unreachable!("Invalid variant for QuantileInterpolOptions: {}", inner),
        };
    }
}

impl SseDecode for (String, String) {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::wrapper::RowCount {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_offset = <u32>::sse_decode(deserializer);
        return crate::wrapper::RowCount {
            name: var_name,
            offset: var_offset,
        };
    }
}

impl SseDecode for crate::wrapper::Shape {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_height = <usize>::sse_decode(deserializer);
        let mut var_width = <usize>::sse_decode(deserializer);
        return crate::wrapper::Shape {
            height: var_height,
            width: var_width,
        };
    }
}

impl SseDecode for crate::wrapper::TimeUnit {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::TimeUnit::Nanoseconds,
            1 => crate::wrapper::TimeUnit::Microseconds,
            2 => crate::wrapper::TimeUnit::Milliseconds,
            _ => unreachable!("Invalid variant for TimeUnit: {}", inner),
        };
    }
}

impl SseDecode for u16 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for crate::wrapper::UniqueKeepStrategy {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::UniqueKeepStrategy::First,
            1 => crate::wrapper::UniqueKeepStrategy::Last,
            2 => crate::wrapper::UniqueKeepStrategy::None,
            3 => crate::wrapper::UniqueKeepStrategy::Any,
            _ => unreachable!("Invalid variant for UniqueKeepStrategy: {}", inner),
        };
    }
}

impl SseDecode for () {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::wrapper::WindowMapping {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::wrapper::WindowMapping::GroupsToRows,
            1 => crate::wrapper::WindowMapping::Explode,
            2 => crate::wrapper::WindowMapping::Join,
            _ => unreachable!("Invalid variant for WindowMapping: {}", inner),
        };
    }
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for mirror_ClosedWindow {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::ClosedWindow::Left => 0,
            crate::wrapper::ClosedWindow::Right => 1,
            crate::wrapper::ClosedWindow::Both => 2,
            crate::wrapper::ClosedWindow::None => 3,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ClosedWindow {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ClosedWindow> for crate::wrapper::ClosedWindow {
    fn into_into_dart(self) -> mirror_ClosedWindow {
        mirror_ClosedWindow(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_CsvEncoding {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::CsvEncoding::Utf8 => 0,
            crate::wrapper::CsvEncoding::LossyUtf8 => 1,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_CsvEncoding {}
impl flutter_rust_bridge::IntoIntoDart<mirror_CsvEncoding> for crate::wrapper::CsvEncoding {
    fn into_into_dart(self) -> mirror_CsvEncoding {
        mirror_CsvEncoding(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_DataType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::DataType::Boolean => {
                vec![0.into_dart()]
            }
            crate::wrapper::DataType::UInt8 => {
                vec![1.into_dart()]
            }
            crate::wrapper::DataType::UInt16 => {
                vec![2.into_dart()]
            }
            crate::wrapper::DataType::UInt32 => {
                vec![3.into_dart()]
            }
            crate::wrapper::DataType::UInt64 => {
                vec![4.into_dart()]
            }
            crate::wrapper::DataType::Int8 => {
                vec![5.into_dart()]
            }
            crate::wrapper::DataType::Int16 => {
                vec![6.into_dart()]
            }
            crate::wrapper::DataType::Int32 => {
                vec![7.into_dart()]
            }
            crate::wrapper::DataType::Int64 => {
                vec![8.into_dart()]
            }
            crate::wrapper::DataType::Float32 => {
                vec![9.into_dart()]
            }
            crate::wrapper::DataType::Float64 => {
                vec![10.into_dart()]
            }
            crate::wrapper::DataType::Utf8 => {
                vec![11.into_dart()]
            }
            crate::wrapper::DataType::Binary => {
                vec![12.into_dart()]
            }
            crate::wrapper::DataType::Date => {
                vec![13.into_dart()]
            }
            crate::wrapper::DataType::Datetime(field0, field1) => {
                vec![
                    14.into_dart(),
                    field0.into_into_dart().into_dart(),
                    field1.into_into_dart().into_dart(),
                ]
            }
            crate::wrapper::DataType::Duration(field0) => {
                vec![15.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::DataType::Time => {
                vec![16.into_dart()]
            }
            crate::wrapper::DataType::List(field0) => {
                vec![17.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::DataType::Null => {
                vec![18.into_dart()]
            }
            crate::wrapper::DataType::Struct(field0) => {
                vec![19.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::DataType::Unknown => {
                vec![20.into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_DataType {}
impl flutter_rust_bridge::IntoIntoDart<mirror_DataType> for crate::wrapper::DataType {
    fn into_into_dart(self) -> mirror_DataType {
        mirror_DataType(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_Field {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.0.name.into_into_dart().into_dart(),
            self.0.dtype.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_Field {}
impl flutter_rust_bridge::IntoIntoDart<mirror_Field> for crate::wrapper::Field {
    fn into_into_dart(self) -> mirror_Field {
        mirror_Field(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_IsSorted {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::IsSorted::Ascending => 0,
            crate::wrapper::IsSorted::Descending => 1,
            crate::wrapper::IsSorted::Not => 2,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_IsSorted {}
impl flutter_rust_bridge::IntoIntoDart<mirror_IsSorted> for crate::wrapper::IsSorted {
    fn into_into_dart(self) -> mirror_IsSorted {
        mirror_IsSorted(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_JoinType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::JoinType::Left => 0,
            crate::wrapper::JoinType::Inner => 1,
            crate::wrapper::JoinType::Outer => 2,
            crate::wrapper::JoinType::Cross => 3,
            crate::wrapper::JoinType::Semi => 4,
            crate::wrapper::JoinType::Anti => 5,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_JoinType {}
impl flutter_rust_bridge::IntoIntoDart<mirror_JoinType> for crate::wrapper::JoinType {
    fn into_into_dart(self) -> mirror_JoinType {
        mirror_JoinType(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_LiteralValue {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::LiteralValue::Null => {
                vec![0.into_dart()]
            }
            crate::wrapper::LiteralValue::Boolean(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Utf8(field0) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Binary(field0) => {
                vec![3.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::UInt8(field0) => {
                vec![4.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::UInt16(field0) => {
                vec![5.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::UInt32(field0) => {
                vec![6.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::UInt64(field0) => {
                vec![7.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Int8(field0) => {
                vec![8.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Int16(field0) => {
                vec![9.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Int32(field0) => {
                vec![10.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Int64(field0) => {
                vec![11.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Float32(field0) => {
                vec![12.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Float64(field0) => {
                vec![13.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Range {
                low,
                high,
                data_type,
            } => {
                vec![
                    14.into_dart(),
                    low.into_into_dart().into_dart(),
                    high.into_into_dart().into_dart(),
                    data_type.into_into_dart().into_dart(),
                ]
            }
            crate::wrapper::LiteralValue::DateTime(field0, field1, field2) => {
                vec![
                    15.into_dart(),
                    field0.into_into_dart().into_dart(),
                    field1.into_into_dart().into_dart(),
                    field2.into_into_dart().into_dart(),
                ]
            }
            crate::wrapper::LiteralValue::Duration(field0, field1) => {
                vec![
                    16.into_dart(),
                    field0.into_into_dart().into_dart(),
                    field1.into_into_dart().into_dart(),
                ]
            }
            crate::wrapper::LiteralValue::Date(field0) => {
                vec![17.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::LiteralValue::Time(field0) => {
                vec![18.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_LiteralValue {}
impl flutter_rust_bridge::IntoIntoDart<mirror_LiteralValue> for crate::wrapper::LiteralValue {
    fn into_into_dart(self) -> mirror_LiteralValue {
        mirror_LiteralValue(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_NullValues {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::NullValues::AllColumnsSingle(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::NullValues::AllColumns(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::wrapper::NullValues::Named(field0) => {
                vec![2.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_NullValues {}
impl flutter_rust_bridge::IntoIntoDart<mirror_NullValues> for crate::wrapper::NullValues {
    fn into_into_dart(self) -> mirror_NullValues {
        mirror_NullValues(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_Operator {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::Operator::Eq => 0,
            crate::wrapper::Operator::EqValidity => 1,
            crate::wrapper::Operator::NotEq => 2,
            crate::wrapper::Operator::NotEqValidity => 3,
            crate::wrapper::Operator::Lt => 4,
            crate::wrapper::Operator::LtEq => 5,
            crate::wrapper::Operator::Gt => 6,
            crate::wrapper::Operator::GtEq => 7,
            crate::wrapper::Operator::Plus => 8,
            crate::wrapper::Operator::Minus => 9,
            crate::wrapper::Operator::Multiply => 10,
            crate::wrapper::Operator::Divide => 11,
            crate::wrapper::Operator::TrueDivide => 12,
            crate::wrapper::Operator::FloorDivide => 13,
            crate::wrapper::Operator::Modulus => 14,
            crate::wrapper::Operator::And => 15,
            crate::wrapper::Operator::Or => 16,
            crate::wrapper::Operator::Xor => 17,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_Operator {}
impl flutter_rust_bridge::IntoIntoDart<mirror_Operator> for crate::wrapper::Operator {
    fn into_into_dart(self) -> mirror_Operator {
        mirror_Operator(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_QuantileInterpolOptions {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::QuantileInterpolOptions::Nearest => 0,
            crate::wrapper::QuantileInterpolOptions::Lower => 1,
            crate::wrapper::QuantileInterpolOptions::Higher => 2,
            crate::wrapper::QuantileInterpolOptions::Midpoint => 3,
            crate::wrapper::QuantileInterpolOptions::Linear => 4,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for mirror_QuantileInterpolOptions
{
}
impl flutter_rust_bridge::IntoIntoDart<mirror_QuantileInterpolOptions>
    for crate::wrapper::QuantileInterpolOptions
{
    fn into_into_dart(self) -> mirror_QuantileInterpolOptions {
        mirror_QuantileInterpolOptions(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_RowCount {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.0.name.into_into_dart().into_dart(),
            self.0.offset.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_RowCount {}
impl flutter_rust_bridge::IntoIntoDart<mirror_RowCount> for crate::wrapper::RowCount {
    fn into_into_dart(self) -> mirror_RowCount {
        mirror_RowCount(self)
    }
}
impl flutter_rust_bridge::IntoDart for crate::wrapper::Shape {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.height.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::wrapper::Shape {}
impl flutter_rust_bridge::IntoIntoDart<crate::wrapper::Shape> for crate::wrapper::Shape {
    fn into_into_dart(self) -> crate::wrapper::Shape {
        self
    }
}
impl flutter_rust_bridge::IntoDart for mirror_TimeUnit {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::TimeUnit::Nanoseconds => 0,
            crate::wrapper::TimeUnit::Microseconds => 1,
            crate::wrapper::TimeUnit::Milliseconds => 2,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_TimeUnit {}
impl flutter_rust_bridge::IntoIntoDart<mirror_TimeUnit> for crate::wrapper::TimeUnit {
    fn into_into_dart(self) -> mirror_TimeUnit {
        mirror_TimeUnit(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_UniqueKeepStrategy {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::UniqueKeepStrategy::First => 0,
            crate::wrapper::UniqueKeepStrategy::Last => 1,
            crate::wrapper::UniqueKeepStrategy::None => 2,
            crate::wrapper::UniqueKeepStrategy::Any => 3,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_UniqueKeepStrategy {}
impl flutter_rust_bridge::IntoIntoDart<mirror_UniqueKeepStrategy>
    for crate::wrapper::UniqueKeepStrategy
{
    fn into_into_dart(self) -> mirror_UniqueKeepStrategy {
        mirror_UniqueKeepStrategy(self)
    }
}
impl flutter_rust_bridge::IntoDart for mirror_WindowMapping {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::wrapper::WindowMapping::GroupsToRows => 0,
            crate::wrapper::WindowMapping::Explode => 1,
            crate::wrapper::WindowMapping::Join => 2,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_WindowMapping {}
impl flutter_rust_bridge::IntoIntoDart<mirror_WindowMapping> for crate::wrapper::WindowMapping {
    fn into_into_dart(self) -> mirror_WindowMapping {
        mirror_WindowMapping(self)
    }
}

impl SseEncode for anyhow::Error {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for chrono::Duration {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseEncode for chrono::DateTime<chrono::Local> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseEncode for chrono::NaiveDateTime {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseEncode for chrono::DateTime<chrono::Utc> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("not yet supported in serialized mode, feel free to create an issue");
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyGroupBy>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Schema>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Expr>>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Series>>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Schema>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Series>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for Box<crate::wrapper::DataType> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::wrapper::DataType>::sse_encode(*self, serializer);
    }
}

impl SseEncode for crate::wrapper::ClosedWindow {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::wrapper::CsvEncoding {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::DartAbi {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("");
    }
}

impl SseEncode for crate::wrapper::DataType {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::DataType::Boolean => {
                <i32>::sse_encode(0, serializer);
            }
            crate::wrapper::DataType::UInt8 => {
                <i32>::sse_encode(1, serializer);
            }
            crate::wrapper::DataType::UInt16 => {
                <i32>::sse_encode(2, serializer);
            }
            crate::wrapper::DataType::UInt32 => {
                <i32>::sse_encode(3, serializer);
            }
            crate::wrapper::DataType::UInt64 => {
                <i32>::sse_encode(4, serializer);
            }
            crate::wrapper::DataType::Int8 => {
                <i32>::sse_encode(5, serializer);
            }
            crate::wrapper::DataType::Int16 => {
                <i32>::sse_encode(6, serializer);
            }
            crate::wrapper::DataType::Int32 => {
                <i32>::sse_encode(7, serializer);
            }
            crate::wrapper::DataType::Int64 => {
                <i32>::sse_encode(8, serializer);
            }
            crate::wrapper::DataType::Float32 => {
                <i32>::sse_encode(9, serializer);
            }
            crate::wrapper::DataType::Float64 => {
                <i32>::sse_encode(10, serializer);
            }
            crate::wrapper::DataType::Utf8 => {
                <i32>::sse_encode(11, serializer);
            }
            crate::wrapper::DataType::Binary => {
                <i32>::sse_encode(12, serializer);
            }
            crate::wrapper::DataType::Date => {
                <i32>::sse_encode(13, serializer);
            }
            crate::wrapper::DataType::Datetime(field0, field1) => {
                <i32>::sse_encode(14, serializer);
                <crate::wrapper::TimeUnit>::sse_encode(field0, serializer);
                <Option<String>>::sse_encode(field1, serializer);
            }
            crate::wrapper::DataType::Duration(field0) => {
                <i32>::sse_encode(15, serializer);
                <crate::wrapper::TimeUnit>::sse_encode(field0, serializer);
            }
            crate::wrapper::DataType::Time => {
                <i32>::sse_encode(16, serializer);
            }
            crate::wrapper::DataType::List(field0) => {
                <i32>::sse_encode(17, serializer);
                <Box<crate::wrapper::DataType>>::sse_encode(field0, serializer);
            }
            crate::wrapper::DataType::Null => {
                <i32>::sse_encode(18, serializer);
            }
            crate::wrapper::DataType::Struct(field0) => {
                <i32>::sse_encode(19, serializer);
                <Vec<crate::wrapper::Field>>::sse_encode(field0, serializer);
            }
            crate::wrapper::DataType::Unknown => {
                <i32>::sse_encode(20, serializer);
            }
        }
    }
}

impl SseEncode for f32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::wrapper::Field {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <crate::wrapper::DataType>::sse_encode(self.dtype, serializer);
    }
}

impl SseEncode for i16 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i8(self).unwrap();
    }
}

impl SseEncode for crate::wrapper::IsSorted {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for crate::wrapper::JoinType {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for Vec<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<bool> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <bool>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<flutter_rust_bridge::for_generated::DartAbi> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <flutter_rust_bridge::for_generated::DartAbi>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::wrapper::DataType> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::wrapper::DataType>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::wrapper::Field> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::wrapper::Field>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<String>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<String>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<chrono::Duration>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<chrono::Duration>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<chrono::DateTime<chrono::Local>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<chrono::DateTime<chrono::Local>>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<chrono::NaiveDateTime>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<chrono::NaiveDateTime>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<chrono::DateTime<chrono::Utc>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<f64>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<f64>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<i32>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<i32>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<i64>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<i64>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<f64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <f64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <i64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::wrapper::LiteralValue {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::LiteralValue::Null => {
                <i32>::sse_encode(0, serializer);
            }
            crate::wrapper::LiteralValue::Boolean(field0) => {
                <i32>::sse_encode(1, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Utf8(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Binary(field0) => {
                <i32>::sse_encode(3, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::UInt8(field0) => {
                <i32>::sse_encode(4, serializer);
                <u8>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::UInt16(field0) => {
                <i32>::sse_encode(5, serializer);
                <u16>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::UInt32(field0) => {
                <i32>::sse_encode(6, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::UInt64(field0) => {
                <i32>::sse_encode(7, serializer);
                <u64>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Int8(field0) => {
                <i32>::sse_encode(8, serializer);
                <i8>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Int16(field0) => {
                <i32>::sse_encode(9, serializer);
                <i16>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Int32(field0) => {
                <i32>::sse_encode(10, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Int64(field0) => {
                <i32>::sse_encode(11, serializer);
                <i64>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Float32(field0) => {
                <i32>::sse_encode(12, serializer);
                <f32>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Float64(field0) => {
                <i32>::sse_encode(13, serializer);
                <f64>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Range {
                low,
                high,
                data_type,
            } => {
                <i32>::sse_encode(14, serializer);
                <i64>::sse_encode(low, serializer);
                <i64>::sse_encode(high, serializer);
                <crate::wrapper::DataType>::sse_encode(data_type, serializer);
            }
            crate::wrapper::LiteralValue::DateTime(field0, field1, field2) => {
                <i32>::sse_encode(15, serializer);
                <i64>::sse_encode(field0, serializer);
                <crate::wrapper::TimeUnit>::sse_encode(field1, serializer);
                <Option<String>>::sse_encode(field2, serializer);
            }
            crate::wrapper::LiteralValue::Duration(field0, field1) => {
                <i32>::sse_encode(16, serializer);
                <i64>::sse_encode(field0, serializer);
                <crate::wrapper::TimeUnit>::sse_encode(field1, serializer);
            }
            crate::wrapper::LiteralValue::Date(field0) => {
                <i32>::sse_encode(17, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::wrapper::LiteralValue::Time(field0) => {
                <i32>::sse_encode(18, serializer);
                <i64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::wrapper::NullValues {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::wrapper::NullValues::AllColumnsSingle(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::wrapper::NullValues::AllColumns(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<String>>::sse_encode(field0, serializer);
            }
            crate::wrapper::NullValues::Named(field0) => {
                <i32>::sse_encode(2, serializer);
                <Vec<(String, String)>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::wrapper::Operator {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for Option<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::Duration> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::Duration>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::DateTime<chrono::Local>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::DateTime<chrono::Local>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::NaiveDateTime> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::NaiveDateTime>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::DateTime<chrono::Utc>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::DateTime<chrono::Utc>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::wrapper::ClosedWindow> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::wrapper::ClosedWindow>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::wrapper::CsvEncoding> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::wrapper::CsvEncoding>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::wrapper::NullValues> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::wrapper::NullValues>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::wrapper::QuantileInterpolOptions> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::wrapper::QuantileInterpolOptions>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::wrapper::RowCount> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::wrapper::RowCount>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::wrapper::WindowMapping> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::wrapper::WindowMapping>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<bool>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<bool>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::wrapper::DataType>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::wrapper::DataType>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<Option<String>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<String>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<Option<chrono::Duration>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<chrono::Duration>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<Option<f64>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<f64>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<Option<i32>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<i32>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<Option<i64>>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<i64>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<f64>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<f64>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u32>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u32>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::wrapper::QuantileInterpolOptions {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for (String, String) {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::wrapper::RowCount {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <u32>::sse_encode(self.offset, serializer);
    }
}

impl SseEncode for crate::wrapper::Shape {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.height, serializer);
        <usize>::sse_encode(self.width, serializer);
    }
}

impl SseEncode for crate::wrapper::TimeUnit {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for u16 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for crate::wrapper::UniqueKeepStrategy {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::wrapper::WindowMapping {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
