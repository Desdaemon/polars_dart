#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.59.0.

use crate::wrapper::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_read_csv_impl(
    port_: MessagePort,
    path: impl Wire2Api<String> + UnwindSafe,
    has_header: impl Wire2Api<Option<bool>> + UnwindSafe,
    delimiter: impl Wire2Api<Option<u8>> + UnwindSafe,
    skip_rows: impl Wire2Api<Option<usize>> + UnwindSafe,
    skip_rows_after_header: impl Wire2Api<Option<usize>> + UnwindSafe,
    chunk_size: impl Wire2Api<Option<usize>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "read_csv",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            let api_has_header = has_header.wire2api();
            let api_delimiter = delimiter.wire2api();
            let api_skip_rows = skip_rows.wire2api();
            let api_skip_rows_after_header = skip_rows_after_header.wire2api();
            let api_chunk_size = chunk_size.wire2api();
            move |task_callback| {
                read_csv(
                    api_path,
                    api_has_header,
                    api_delimiter,
                    api_skip_rows,
                    api_skip_rows_after_header,
                    api_chunk_size,
                )
            }
        },
    )
}
fn wire_iter__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "iter__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| DataFrame::iter(&api_that, task_callback.stream_sink())
        },
    )
}
fn wire_column__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    column: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "column__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_column = column.wire2api();
            DataFrame::column(&api_that, api_column)
        },
    )
}
fn wire_columns__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    columns: impl Wire2Api<Vec<String>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "columns__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_columns = columns.wire2api();
            DataFrame::columns(&api_that, api_columns)
        },
    )
}
fn wire_dump__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dump__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| DataFrame::dump(&api_that)
        },
    )
}
fn wire_estimated_size__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "estimated_size__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            DataFrame::estimated_size(&api_that)
        },
    )
}
fn wire_with_row_count__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
    offset: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "with_row_count__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_name = name.wire2api();
            let api_offset = offset.wire2api();
            move |task_callback| DataFrame::with_row_count(&api_that, api_name, api_offset)
        },
    )
}
fn wire_get_column_names__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_column_names__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            DataFrame::get_column_names(&api_that)
        },
    )
}
fn wire_get_columns__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_columns__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| DataFrame::get_columns(&api_that)
        },
    )
}
fn wire_width__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "width__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            DataFrame::width(&api_that)
        },
    )
}
fn wire_height__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "height__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            DataFrame::height(&api_that)
        },
    )
}
fn wire_is_empty__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "is_empty__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            DataFrame::is_empty(&api_that)
        },
    )
}
fn wire_sample__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    n: impl Wire2Api<usize> + UnwindSafe,
    with_replacement: impl Wire2Api<bool> + UnwindSafe,
    shuffle: impl Wire2Api<bool> + UnwindSafe,
    seed: impl Wire2Api<Option<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sample__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_n = n.wire2api();
            let api_with_replacement = with_replacement.wire2api();
            let api_shuffle = shuffle.wire2api();
            let api_seed = seed.wire2api();
            move |task_callback| {
                DataFrame::sample(
                    &api_that,
                    api_n,
                    api_with_replacement,
                    api_shuffle,
                    api_seed,
                )
            }
        },
    )
}
fn wire_select__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    columns: impl Wire2Api<Vec<String>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "select__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_columns = columns.wire2api();
            DataFrame::select(&api_that, api_columns)
        },
    )
}
fn wire_head__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    length: impl Wire2Api<Option<usize>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "head__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_length = length.wire2api();
            DataFrame::head(&api_that, api_length)
        },
    )
}
fn wire_tail__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    length: impl Wire2Api<Option<usize>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "tail__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_length = length.wire2api();
            DataFrame::tail(&api_that, api_length)
        },
    )
}
fn wire_describe__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    percentiles: impl Wire2Api<Option<Vec<f64>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "describe__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_percentiles = percentiles.wire2api();
            move |task_callback| DataFrame::describe(&api_that, api_percentiles)
        },
    )
}
fn wire_drop__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    column: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "drop__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_column = column.wire2api();
            DataFrame::drop(&api_that, api_column)
        },
    )
}
fn wire_drop_in_place__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    column: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "drop_in_place__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_column = column.wire2api();
            DataFrame::drop_in_place(&api_that, api_column)
        },
    )
}
fn wire_reverse__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "reverse__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            DataFrame::reverse(&api_that)
        },
    )
}
fn wire_shape__method__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "shape__method__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            DataFrame::shape(&api_that)
        },
    )
}
fn wire_max__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "max__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| DataFrame::max(&api_that)
        },
    )
}
fn wire_get_row__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    index: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_row__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_index = index.wire2api();
            move |task_callback| DataFrame::get_row(&api_that, api_index)
        },
    )
}
fn wire_lazy__method__take_self__DataFrame_impl(
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    allow_copy: impl Wire2Api<bool> + UnwindSafe,
    projection_pushdown: impl Wire2Api<Option<bool>> + UnwindSafe,
    predicate_pushdown: impl Wire2Api<Option<bool>> + UnwindSafe,
    type_coercion: impl Wire2Api<Option<bool>> + UnwindSafe,
    simplify_expressions: impl Wire2Api<Option<bool>> + UnwindSafe,
    slice_pushdown: impl Wire2Api<Option<bool>> + UnwindSafe,
    streaming: impl Wire2Api<Option<bool>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "lazy__method__take_self__DataFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_allow_copy = allow_copy.wire2api();
            let api_projection_pushdown = projection_pushdown.wire2api();
            let api_predicate_pushdown = predicate_pushdown.wire2api();
            let api_type_coercion = type_coercion.wire2api();
            let api_simplify_expressions = simplify_expressions.wire2api();
            let api_slice_pushdown = slice_pushdown.wire2api();
            let api_streaming = streaming.wire2api();
            DataFrame::lazy(
                api_that,
                api_allow_copy,
                api_projection_pushdown,
                api_predicate_pushdown,
                api_type_coercion,
                api_simplify_expressions,
                api_slice_pushdown,
                api_streaming,
            )
        },
    )
}
fn wire_select__method__take_self__LazyFrame_impl(
    that: impl Wire2Api<LazyFrame> + UnwindSafe,
    exprs: impl Wire2Api<Vec<Expr>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "select__method__take_self__LazyFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_exprs = exprs.wire2api();
            LazyFrame::select(api_that, api_exprs)
        },
    )
}
fn wire_filter__method__take_self__LazyFrame_impl(
    that: impl Wire2Api<LazyFrame> + UnwindSafe,
    pred: impl Wire2Api<Expr> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "filter__method__take_self__LazyFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_pred = pred.wire2api();
            LazyFrame::filter(api_that, api_pred)
        },
    )
}
fn wire_group_by__method__take_self__LazyFrame_impl(
    that: impl Wire2Api<LazyFrame> + UnwindSafe,
    exprs: impl Wire2Api<Vec<Expr>> + UnwindSafe,
    stable: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "group_by__method__take_self__LazyFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_exprs = exprs.wire2api();
            let api_stable = stable.wire2api();
            LazyFrame::group_by(api_that, api_exprs, api_stable)
        },
    )
}
fn wire_reverse__method__take_self__LazyFrame_impl(
    that: impl Wire2Api<LazyFrame> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "reverse__method__take_self__LazyFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            LazyFrame::reverse(api_that)
        },
    )
}
fn wire_with_column__method__take_self__LazyFrame_impl(
    that: impl Wire2Api<LazyFrame> + UnwindSafe,
    expr: impl Wire2Api<Expr> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "with_column__method__take_self__LazyFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_expr = expr.wire2api();
            LazyFrame::with_column(api_that, api_expr)
        },
    )
}
fn wire_with_columns__method__take_self__LazyFrame_impl(
    that: impl Wire2Api<LazyFrame> + UnwindSafe,
    expr: impl Wire2Api<Vec<Expr>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "with_columns__method__take_self__LazyFrame",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_expr = expr.wire2api();
            LazyFrame::with_columns(api_that, api_expr)
        },
    )
}
fn wire_collect__method__take_self__LazyFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<LazyFrame> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "collect__method__take_self__LazyFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| LazyFrame::collect(api_that)
        },
    )
}
fn wire_of_i32__static_method__Series_impl(
    name: impl Wire2Api<String> + UnwindSafe,
    values: impl Wire2Api<Option<Vec<i32>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "of_i32__static_method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_name = name.wire2api();
            let api_values = values.wire2api();
            Ok(Series::of_i32(api_name, api_values))
        },
    )
}
fn wire_of_i64__static_method__Series_impl(
    name: impl Wire2Api<String> + UnwindSafe,
    values: impl Wire2Api<Option<Vec<i64>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "of_i64__static_method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_name = name.wire2api();
            let api_values = values.wire2api();
            Ok(Series::of_i64(api_name, api_values))
        },
    )
}
fn wire_of_f64__static_method__Series_impl(
    name: impl Wire2Api<String> + UnwindSafe,
    values: impl Wire2Api<Option<Vec<f64>>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "of_f64__static_method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_name = name.wire2api();
            let api_values = values.wire2api();
            Ok(Series::of_f64(api_name, api_values))
        },
    )
}
fn wire_append__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    other: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "append__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_other = other.wire2api();
            move |task_callback| Series::append(&api_that, api_other)
        },
    )
}
fn wire_as_strings__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_strings__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_strings(&api_that)
        },
    )
}
fn wire_as_i32__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_i32__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_i32(&api_that)
        },
    )
}
fn wire_as_f64__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_f64__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_f64(&api_that)
        },
    )
}
fn wire_as_durations__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_durations__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_durations(&api_that)
        },
    )
}
fn wire_as_naive_datetime__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_naive_datetime__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_naive_datetime(&api_that)
        },
    )
}
fn wire_as_utc_datetime__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_utc_datetime__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_utc_datetime(&api_that)
        },
    )
}
fn wire_as_local_datetime__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_local_datetime__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_local_datetime(&api_that)
        },
    )
}
fn wire_abs__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "abs__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::abs(&api_that)
        },
    )
}
fn wire_sort__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    reverse: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sort__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_reverse = reverse.wire2api();
            move |task_callback| Series::sort(&api_that, api_reverse)
        },
    )
}
fn wire_shuffle__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    seed: impl Wire2Api<Option<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "shuffle__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_seed = seed.wire2api();
            move |task_callback| Series::shuffle(&api_that, api_seed)
        },
    )
}
fn wire_sum__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sum__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::sum(&api_that)
        },
    )
}
fn wire_sum_as_series__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sum_as_series__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::sum_as_series(&api_that)
        },
    )
}
fn wire_min__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "min__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::min(&api_that)
        },
    )
}
fn wire_max__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "max__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::max(&api_that)
        },
    )
}
fn wire_explode__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "explode__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::explode(&api_that)
        },
    )
}
fn wire_explode_by_offsets__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    offsets: impl Wire2Api<Vec<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "explode_by_offsets__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_offsets = offsets.wire2api();
            move |task_callback| Series::explode_by_offsets(&api_that, api_offsets)
        },
    )
}
fn wire_cummax__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    reverse: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "cummax__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_reverse = reverse.wire2api();
            move |task_callback| Series::cummax(&api_that, api_reverse)
        },
    )
}
fn wire_cummin__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    reverse: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "cummin__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_reverse = reverse.wire2api();
            move |task_callback| Series::cummin(&api_that, api_reverse)
        },
    )
}
fn wire_cumprod__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    reverse: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "cumprod__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_reverse = reverse.wire2api();
            move |task_callback| Series::cumprod(&api_that, api_reverse)
        },
    )
}
fn wire_cumsum__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    reverse: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "cumsum__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_reverse = reverse.wire2api();
            move |task_callback| Series::cumsum(&api_that, api_reverse)
        },
    )
}
fn wire_product__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "product__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::product(&api_that)
        },
    )
}
fn wire_get_string__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    index: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_string__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_index = index.wire2api();
            Series::get_string(&api_that, api_index)
        },
    )
}
fn wire_get__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    index: impl Wire2Api<usize> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_index = index.wire2api();
            Series::get(&api_that, api_index)
        },
    )
}
fn wire_head__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    length: impl Wire2Api<Option<usize>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "head__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_length = length.wire2api();
            Series::head(&api_that, api_length)
        },
    )
}
fn wire_tail__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    length: impl Wire2Api<Option<usize>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "tail__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_length = length.wire2api();
            Series::tail(&api_that, api_length)
        },
    )
}
fn wire_mean__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mean__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::mean(&api_that)
        },
    )
}
fn wire_median__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "median__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::median(&api_that)
        },
    )
}
fn wire_mean_as_series__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "mean_as_series__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::mean_as_series(&api_that)
        },
    )
}
fn wire_median_as_series__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "median_as_series__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::median_as_series(&api_that)
        },
    )
}
fn wire_estimated_size__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "estimated_size__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Series::estimated_size(&api_that)
        },
    )
}
fn wire_add_to__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    other: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "add_to__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_other = other.wire2api();
            Series::add_to(&api_that, api_other)
        },
    )
}
fn wire_subtract__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    other: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "subtract__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_other = other.wire2api();
            Series::subtract(&api_that, api_other)
        },
    )
}
fn wire_multiply__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    other: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "multiply__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_other = other.wire2api();
            Series::multiply(&api_that, api_other)
        },
    )
}
fn wire_divide__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    other: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "divide__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_other = other.wire2api();
            Series::divide(&api_that, api_other)
        },
    )
}
fn wire_remainder__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    other: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "remainder__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_other = other.wire2api();
            Series::remainder(&api_that, api_other)
        },
    )
}
fn wire_is_bool__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "is_bool__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Series::is_bool(&api_that)
        },
    )
}
fn wire_is_utf8__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "is_utf8__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Series::is_utf8(&api_that)
        },
    )
}
fn wire_is_numeric__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "is_numeric__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Series::is_numeric(&api_that)
        },
    )
}
fn wire_is_temporal__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "is_temporal__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Series::is_temporal(&api_that)
        },
    )
}
fn wire_dump__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dump__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::dump(&api_that)
        },
    )
}
fn wire_rename__method__Series_impl(
    that: impl Wire2Api<Series> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "rename__method__Series",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            let api_name = name.wire2api();
            Series::rename(&api_that, api_name)
        },
    )
}
fn wire_unique__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    stable: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "unique__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_stable = stable.wire2api();
            move |task_callback| Series::unique(&api_that, api_stable)
        },
    )
}
fn wire_equal__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    other: impl Wire2Api<Series> + UnwindSafe,
    ignore_null: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "equal__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_other = other.wire2api();
            let api_ignore_null = ignore_null.wire2api();
            move |task_callback| Series::equal(&api_that, api_other, api_ignore_null)
        },
    )
}
fn wire_reshape__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    dims: impl Wire2Api<Vec<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "reshape__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_dims = dims.wire2api();
            move |task_callback| Series::reshape(&api_that, api_dims)
        },
    )
}
fn wire_std_as_series__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    ddof: impl Wire2Api<u8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "std_as_series__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_ddof = ddof.wire2api();
            move |task_callback| Series::std_as_series(&api_that, api_ddof)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<chrono::NaiveDateTime> for i64 {
    fn wire2api(self) -> chrono::NaiveDateTime {
        let Timestamp { s, ns } = wire2api_timestamp(self);
        chrono::NaiveDateTime::from_timestamp_opt(s, ns).expect("invalid or out-of-range datetime")
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<i16> for i16 {
    fn wire2api(self) -> i16 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}

impl Wire2Api<Operator> for i32 {
    fn wire2api(self) -> Operator {
        match self {
            0 => Operator::Eq,
            1 => Operator::NotEq,
            2 => Operator::Lt,
            3 => Operator::LtEq,
            4 => Operator::Gt,
            5 => Operator::GtEq,
            6 => Operator::Plus,
            7 => Operator::Minus,
            8 => Operator::Multiply,
            9 => Operator::Divide,
            10 => Operator::TrueDivide,
            11 => Operator::FloorDivide,
            12 => Operator::Modulus,
            13 => Operator::And,
            14 => Operator::Or,
            15 => Operator::Xor,
            _ => unreachable!("Invalid variant for Operator: {}", self),
        }
    }
}

impl Wire2Api<TimeUnit> for i32 {
    fn wire2api(self) -> TimeUnit {
        match self {
            0 => TimeUnit::Nanoseconds,
            1 => TimeUnit::Microseconds,
            2 => TimeUnit::Milliseconds,
            _ => unreachable!("Invalid variant for TimeUnit: {}", self),
        }
    }
}
impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for DataFrame {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DataFrame {}

impl support::IntoDart for LazyFrame {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LazyFrame {}

impl support::IntoDart for LazyGroupBy {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LazyGroupBy {}

impl support::IntoDart for Series {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Series {}

impl support::IntoDart for Shape {
    fn into_dart(self) -> support::DartAbi {
        vec![self.height.into_dart(), self.width.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Shape {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
