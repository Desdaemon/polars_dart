#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.59.0.

use crate::wrapper::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_read_csv_impl(
    port_: MessagePort,
    path: impl Wire2Api<String> + UnwindSafe,
    has_header: impl Wire2Api<Option<bool>> + UnwindSafe,
    columns: impl Wire2Api<Option<Vec<String>>> + UnwindSafe,
    delimiter: impl Wire2Api<Option<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "read_csv",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            let api_has_header = has_header.wire2api();
            let api_columns = columns.wire2api();
            let api_delimiter = delimiter.wire2api();
            move |task_callback| read_csv(api_path, api_has_header, api_columns, api_delimiter)
        },
    )
}
fn wire_read_json_impl(port_: MessagePort, path: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "read_json",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            move |task_callback| read_json(api_path)
        },
    )
}
fn wire_column__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    column: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "column__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_column = column.wire2api();
            move |task_callback| DataFrame::column(&api_that, api_column)
        },
    )
}
fn wire_columns__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
    columns: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "columns__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_columns = columns.wire2api();
            move |task_callback| DataFrame::columns(&api_that, api_columns)
        },
    )
}
fn wire_dump__method__DataFrame_impl(
    port_: MessagePort,
    that: impl Wire2Api<DataFrame> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "dump__method__DataFrame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| DataFrame::dump(&api_that)
        },
    )
}
fn wire_of_strings__static_method__Series_impl(
    port_: MessagePort,
    name: impl Wire2Api<String> + UnwindSafe,
    values: impl Wire2Api<Option<Vec<String>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "of_strings__static_method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            let api_values = values.wire2api();
            move |task_callback| Ok(Series::of_strings(api_name, api_values))
        },
    )
}
fn wire_of_i32__static_method__Series_impl(
    port_: MessagePort,
    name: impl Wire2Api<String> + UnwindSafe,
    values: impl Wire2Api<Option<Vec<i32>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "of_i32__static_method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            let api_values = values.wire2api();
            move |task_callback| Ok(Series::of_i32(api_name, api_values))
        },
    )
}
fn wire_of_f64__static_method__Series_impl(
    port_: MessagePort,
    name: impl Wire2Api<String> + UnwindSafe,
    values: impl Wire2Api<Option<Vec<f64>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "of_f64__static_method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            let api_values = values.wire2api();
            move |task_callback| Ok(Series::of_f64(api_name, api_values))
        },
    )
}
fn wire_append__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
    other: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "append__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_other = other.wire2api();
            move |task_callback| Series::append(&api_that, api_other)
        },
    )
}
fn wire_as_strings__method__Series_impl(
    port_: MessagePort,
    that: impl Wire2Api<Series> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_strings__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_strings(&api_that)
        },
    )
}
fn wire_as_i32__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_i32__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_i32(&api_that)
        },
    )
}
fn wire_as_f64__method__Series_impl(port_: MessagePort, that: impl Wire2Api<Series> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "as_f64__method__Series",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| Series::as_f64(&api_that)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<bool> for *mut bool {
    fn wire2api(self) -> bool {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}

impl Wire2Api<u8> for *mut u8 {
    fn wire2api(self) -> u8 {
        unsafe { *support::box_from_leak_ptr(self) }
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for DataFrame {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DataFrame {}

impl support::IntoDart for Series {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Series {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
