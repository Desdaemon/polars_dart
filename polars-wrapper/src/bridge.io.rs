// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.4.

// Section: imports

use super::*;
use crate::wrapper::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<anyhow::Error> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<chrono::Duration> for i64 {
    fn cst_decode(self) -> chrono::Duration {
        chrono::Duration::microseconds(self)
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Expr>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyGroupBy>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyGroupBy>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Schema>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Schema>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Expr>>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Expr>>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Series>>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Series>>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Schema>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Schema>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Expr>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Series>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<Series>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<chrono::Duration> for *mut i64 {
    fn cst_decode(self) -> chrono::Duration {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::Duration>::cst_decode(*wrap).into()
    }
}
impl CstDecode<chrono::DateTime<chrono::Local>> for *mut i64 {
    fn cst_decode(self) -> chrono::DateTime<chrono::Local> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::DateTime<chrono::Local>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<chrono::NaiveDateTime> for *mut i64 {
    fn cst_decode(self) -> chrono::NaiveDateTime {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::NaiveDateTime>::cst_decode(*wrap).into()
    }
}
impl CstDecode<chrono::DateTime<chrono::Utc>> for *mut i64 {
    fn cst_decode(self) -> chrono::DateTime<chrono::Utc> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::DateTime<chrono::Utc>>::cst_decode(*wrap).into()
    }
}
impl CstDecode<bool> for *mut bool {
    fn cst_decode(self) -> bool {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::wrapper::ClosedWindow> for *mut i32 {
    fn cst_decode(self) -> crate::wrapper::ClosedWindow {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::ClosedWindow>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::CsvEncoding> for *mut i32 {
    fn cst_decode(self) -> crate::wrapper::CsvEncoding {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::CsvEncoding>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::DataType> for *mut wire_cst_data_type {
    fn cst_decode(self) -> crate::wrapper::DataType {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::DataType>::cst_decode(*wrap).into()
    }
}
impl CstDecode<f64> for *mut f64 {
    fn cst_decode(self) -> f64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i32> for *mut i32 {
    fn cst_decode(self) -> i32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i64> for *mut i64 {
    fn cst_decode(self) -> i64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::wrapper::LiteralValue> for *mut wire_cst_literal_value {
    fn cst_decode(self) -> crate::wrapper::LiteralValue {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::LiteralValue>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::NullValues> for *mut wire_cst_null_values {
    fn cst_decode(self) -> crate::wrapper::NullValues {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::NullValues>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::QuantileInterpolOptions> for *mut i32 {
    fn cst_decode(self) -> crate::wrapper::QuantileInterpolOptions {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::QuantileInterpolOptions>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::RowCount> for *mut wire_cst_row_count {
    fn cst_decode(self) -> crate::wrapper::RowCount {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::RowCount>::cst_decode(*wrap).into()
    }
}
impl CstDecode<u32> for *mut u32 {
    fn cst_decode(self) -> u32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u64> for *mut u64 {
    fn cst_decode(self) -> u64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<usize> for *mut usize {
    fn cst_decode(self) -> usize {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::wrapper::WindowMapping> for *mut i32 {
    fn cst_decode(self) -> crate::wrapper::WindowMapping {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::WindowMapping>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::wrapper::DataType>> for *mut wire_cst_data_type {
    fn cst_decode(self) -> Box<crate::wrapper::DataType> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::DataType>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::DataType> for wire_cst_data_type {
    fn cst_decode(self) -> crate::wrapper::DataType {
        match self.tag {
            0 => crate::wrapper::DataType::Boolean,
            1 => crate::wrapper::DataType::UInt8,
            2 => crate::wrapper::DataType::UInt16,
            3 => crate::wrapper::DataType::UInt32,
            4 => crate::wrapper::DataType::UInt64,
            5 => crate::wrapper::DataType::Int8,
            6 => crate::wrapper::DataType::Int16,
            7 => crate::wrapper::DataType::Int32,
            8 => crate::wrapper::DataType::Int64,
            9 => crate::wrapper::DataType::Float32,
            10 => crate::wrapper::DataType::Float64,
            11 => crate::wrapper::DataType::Utf8,
            12 => crate::wrapper::DataType::Binary,
            13 => crate::wrapper::DataType::Date,
            14 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Datetime);
                crate::wrapper::DataType::Datetime(ans.field0.cst_decode(), ans.field1.cst_decode())
            },
            15 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Duration);
                crate::wrapper::DataType::Duration(ans.field0.cst_decode())
            },
            16 => crate::wrapper::DataType::Time,
            17 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.List);
                crate::wrapper::DataType::List(ans.field0.cst_decode())
            },
            18 => crate::wrapper::DataType::Null,
            19 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Struct);
                crate::wrapper::DataType::Struct(ans.field0.cst_decode())
            },
            20 => crate::wrapper::DataType::Unknown,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::wrapper::Field> for wire_cst_field {
    fn cst_decode(self) -> crate::wrapper::Field {
        crate::wrapper::Field {
            name: self.name.cst_decode(),
            dtype: self.dtype.cst_decode(),
        }
    }
}
impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
    fn cst_decode(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<bool>> for *mut wire_cst_list_bool {
    fn cst_decode(self) -> Vec<bool> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<flutter_rust_bridge::for_generated::DartAbi>> for *mut wire_cst_list_dartabi {
    fn cst_decode(self) -> Vec<flutter_rust_bridge::for_generated::DartAbi> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::wrapper::DataType>> for *mut wire_cst_list_data_type {
    fn cst_decode(self) -> Vec<crate::wrapper::DataType> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::wrapper::Field>> for *mut wire_cst_list_field {
    fn cst_decode(self) -> Vec<crate::wrapper::Field> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<String>>> for *mut wire_cst_list_opt_String {
    fn cst_decode(self) -> Vec<Option<String>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<chrono::Duration>>>
    for *mut wire_cst_list_opt_box_autoadd_Chrono_Duration
{
    fn cst_decode(self) -> Vec<Option<chrono::Duration>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<chrono::DateTime<chrono::Local>>>>
    for *mut wire_cst_list_opt_box_autoadd_Chrono_Local
{
    fn cst_decode(self) -> Vec<Option<chrono::DateTime<chrono::Local>>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<chrono::NaiveDateTime>>>
    for *mut wire_cst_list_opt_box_autoadd_Chrono_Naive
{
    fn cst_decode(self) -> Vec<Option<chrono::NaiveDateTime>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<chrono::DateTime<chrono::Utc>>>>
    for *mut wire_cst_list_opt_box_autoadd_Chrono_Utc
{
    fn cst_decode(self) -> Vec<Option<chrono::DateTime<chrono::Utc>>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<f64>>> for *mut wire_cst_list_opt_box_autoadd_f_64 {
    fn cst_decode(self) -> Vec<Option<f64>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<i32>>> for *mut wire_cst_list_opt_box_autoadd_i_32 {
    fn cst_decode(self) -> Vec<Option<i32>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<i64>>> for *mut wire_cst_list_opt_box_autoadd_i_64 {
    fn cst_decode(self) -> Vec<Option<i64>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<f64>> for *mut wire_cst_list_prim_f_64 {
    fn cst_decode(self) -> Vec<f64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i64>> for *mut wire_cst_list_prim_i_64 {
    fn cst_decode(self) -> Vec<i64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u32>> for *mut wire_cst_list_prim_u_32 {
    fn cst_decode(self) -> Vec<u32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<(String, String)>> for *mut wire_cst_list_record_string_string {
    fn cst_decode(self) -> Vec<(String, String)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::wrapper::LiteralValue> for wire_cst_literal_value {
    fn cst_decode(self) -> crate::wrapper::LiteralValue {
        match self.tag {
            0 => crate::wrapper::LiteralValue::Null,
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Boolean);
                crate::wrapper::LiteralValue::Boolean(ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Utf8);
                crate::wrapper::LiteralValue::Utf8(ans.field0.cst_decode())
            },
            3 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Binary);
                crate::wrapper::LiteralValue::Binary(ans.field0.cst_decode())
            },
            4 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.UInt8);
                crate::wrapper::LiteralValue::UInt8(ans.field0.cst_decode())
            },
            5 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.UInt16);
                crate::wrapper::LiteralValue::UInt16(ans.field0.cst_decode())
            },
            6 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.UInt32);
                crate::wrapper::LiteralValue::UInt32(ans.field0.cst_decode())
            },
            7 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.UInt64);
                crate::wrapper::LiteralValue::UInt64(ans.field0.cst_decode())
            },
            8 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Int8);
                crate::wrapper::LiteralValue::Int8(ans.field0.cst_decode())
            },
            9 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Int16);
                crate::wrapper::LiteralValue::Int16(ans.field0.cst_decode())
            },
            10 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Int32);
                crate::wrapper::LiteralValue::Int32(ans.field0.cst_decode())
            },
            11 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Int64);
                crate::wrapper::LiteralValue::Int64(ans.field0.cst_decode())
            },
            12 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Float32);
                crate::wrapper::LiteralValue::Float32(ans.field0.cst_decode())
            },
            13 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Float64);
                crate::wrapper::LiteralValue::Float64(ans.field0.cst_decode())
            },
            14 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Range);
                crate::wrapper::LiteralValue::Range {
                    low: ans.low.cst_decode(),
                    high: ans.high.cst_decode(),
                    data_type: ans.data_type.cst_decode(),
                }
            },
            15 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.DateTime);
                crate::wrapper::LiteralValue::DateTime(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                    ans.field2.cst_decode(),
                )
            },
            16 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Duration);
                crate::wrapper::LiteralValue::Duration(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            17 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Date);
                crate::wrapper::LiteralValue::Date(ans.field0.cst_decode())
            },
            18 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Time);
                crate::wrapper::LiteralValue::Time(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::wrapper::NullValues> for wire_cst_null_values {
    fn cst_decode(self) -> crate::wrapper::NullValues {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans =
                    flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.AllColumnsSingle);
                crate::wrapper::NullValues::AllColumnsSingle(ans.field0.cst_decode())
            },
            1 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.AllColumns);
                crate::wrapper::NullValues::AllColumns(ans.field0.cst_decode())
            },
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Named);
                crate::wrapper::NullValues::Named(ans.field0.cst_decode())
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<(String, String)> for wire_cst_record_string_string {
    fn cst_decode(self) -> (String, String) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<crate::wrapper::RowCount> for wire_cst_row_count {
    fn cst_decode(self) -> crate::wrapper::RowCount {
        crate::wrapper::RowCount {
            name: self.name.cst_decode(),
            offset: self.offset.cst_decode(),
        }
    }
}
impl CstDecode<crate::wrapper::Shape> for wire_cst_shape {
    fn cst_decode(self) -> crate::wrapper::Shape {
        crate::wrapper::Shape {
            height: self.height.cst_decode(),
            width: self.width.cst_decode(),
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_data_type {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_data_type {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_field {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            dtype: Default::default(),
        }
    }
}
impl Default for wire_cst_field {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_literal_value {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_literal_value {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_null_values {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_null_values {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_string {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_string_string {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_row_count {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            offset: Default::default(),
        }
    }
}
impl Default for wire_cst_row_count {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_shape {
    fn new_with_null_ptr() -> Self {
        Self {
            height: Default::default(),
            width: Default::default(),
        }
    }
}
impl Default for wire_cst_shape {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_column(
    that: *const std::ffi::c_void,
    column: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_column_impl(that, column)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_column_at(
    that: *const std::ffi::c_void,
    index: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_column_at_impl(that, index)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_columns(
    that: *const std::ffi::c_void,
    columns: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_columns_impl(that, columns)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_describe(
    port_: i64,
    that: *const std::ffi::c_void,
    percentiles: *mut wire_cst_list_prim_f_64,
) {
    wire_DataFrame_describe_impl(port_, that, percentiles)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_drop(
    that: *const std::ffi::c_void,
    column: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_drop_impl(that, column)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_drop_in_place(
    that: *const std::ffi::c_void,
    column: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_drop_in_place_impl(that, column)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_dtypes(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_dtypes_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_dump(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_dump_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_estimated_size(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_estimated_size_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_get_column_names(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_get_column_names_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_get_columns(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_get_columns_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_get_row(
    that: *const std::ffi::c_void,
    index: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_get_row_impl(that, index)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_head(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_head_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_height(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_height_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_is_empty(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_is_empty_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_iter(port_: i64, that: *const std::ffi::c_void) {
    wire_DataFrame_iter_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_lazy(
    that: *const std::ffi::c_void,
    projection_pushdown: *mut bool,
    predicate_pushdown: *mut bool,
    type_coercion: *mut bool,
    simplify_expressions: *mut bool,
    slice_pushdown: *mut bool,
    streaming: *mut bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_lazy_impl(
        that,
        projection_pushdown,
        predicate_pushdown,
        type_coercion,
        simplify_expressions,
        slice_pushdown,
        streaming,
    )
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_max(port_: i64, that: *const std::ffi::c_void) {
    wire_DataFrame_max_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_of(
    series: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_of_impl(series)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_reverse(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_reverse_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_sample(
    port_: i64,
    that: *const std::ffi::c_void,
    n: *const std::ffi::c_void,
    with_replacement: bool,
    shuffle: bool,
    seed: *mut u64,
) {
    wire_DataFrame_sample_impl(port_, that, n, with_replacement, shuffle, seed)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_schema(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_schema_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_select(
    that: *const std::ffi::c_void,
    columns: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_select_impl(that, columns)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_shape(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_shape_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_sort_in_place(
    that: *const std::ffi::c_void,
    by_column: *mut wire_cst_list_String,
    descending: *mut wire_cst_list_bool,
    maintain_order: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_sort_in_place_impl(that, by_column, descending, maintain_order)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_tail(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_tail_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_width(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_width_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_with_row_count(
    that: *const std::ffi::c_void,
    name: *mut wire_cst_list_prim_u_8,
    offset: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_with_row_count_impl(that, name, offset)
}

#[no_mangle]
pub extern "C" fn wire_Expr_abs(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_abs_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_add(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_add_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_agg_groups(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_agg_groups_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_alias(
    that: *const std::ffi::c_void,
    name: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_alias_impl(that, name)
}

#[no_mangle]
pub extern "C" fn wire_Expr_all(
    that: *const std::ffi::c_void,
    ignore_nulls: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_all_impl(that, ignore_nulls)
}

#[no_mangle]
pub extern "C" fn wire_Expr_and(
    that: *const std::ffi::c_void,
    expr: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_and_impl(that, expr)
}

#[no_mangle]
pub extern "C" fn wire_Expr_any(
    that: *const std::ffi::c_void,
    ignore_nulls: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_any_impl(that, ignore_nulls)
}

#[no_mangle]
pub extern "C" fn wire_Expr_append(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    upcast: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_append_impl(that, other, upcast)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arccos(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arccos_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arccosh(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arccosh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arcsin(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arcsin_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arcsinh(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arcsinh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arctan(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arctan_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arctan2(
    that: *const std::ffi::c_void,
    x: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arctan2_impl(that, x)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arctanh(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arctanh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arg_max(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arg_max_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arg_min(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arg_min_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arg_sort(
    that: *const std::ffi::c_void,
    descending: bool,
    nulls_last: bool,
    multithreaded: bool,
    maintain_order: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arg_sort_impl(that, descending, nulls_last, multithreaded, maintain_order)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arg_unique(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arg_unique_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_backward_fill(
    that: *const std::ffi::c_void,
    limit: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_backward_fill_impl(that, limit)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cast(
    that: *const std::ffi::c_void,
    data_type: *mut wire_cst_data_type,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cast_impl(that, data_type)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cbrt(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cbrt_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_ceil(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_ceil_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_clip(
    that: *const std::ffi::c_void,
    min: *const std::ffi::c_void,
    max: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_clip_impl(that, min, max)
}

#[no_mangle]
pub extern "C" fn wire_Expr_clip_max(
    that: *const std::ffi::c_void,
    max: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_clip_max_impl(that, max)
}

#[no_mangle]
pub extern "C" fn wire_Expr_clip_min(
    that: *const std::ffi::c_void,
    min: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_clip_min_impl(that, min)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cos(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cos_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cosh(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cosh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cot(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cot_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_count(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_count_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_count(
    that: *const std::ffi::c_void,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_count_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_max(
    that: *const std::ffi::c_void,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_max_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_min(
    that: *const std::ffi::c_void,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_min_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_prod(
    that: *const std::ffi::c_void,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_prod_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_sum(
    that: *const std::ffi::c_void,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_sum_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_degrees(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_degrees_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_div(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_div_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_dot(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_dot_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_drop_nans(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_drop_nans_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_drop_nulls(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_drop_nulls_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_entropy(
    that: *const std::ffi::c_void,
    base: f64,
    normalize: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_entropy_impl(that, base, normalize)
}

#[no_mangle]
pub extern "C" fn wire_Expr_eq(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_eq_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_eq_missing(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_eq_missing_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_exclude(
    that: *const std::ffi::c_void,
    columns: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_exclude_impl(that, columns)
}

#[no_mangle]
pub extern "C" fn wire_Expr_exclude_dtype(
    that: *const std::ffi::c_void,
    dtypes: *mut wire_cst_list_data_type,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_exclude_dtype_impl(that, dtypes)
}

#[no_mangle]
pub extern "C" fn wire_Expr_exp(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_exp_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_explode(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_explode_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_fill_nan(
    that: *const std::ffi::c_void,
    value: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_fill_nan_impl(that, value)
}

#[no_mangle]
pub extern "C" fn wire_Expr_fill_null(
    that: *const std::ffi::c_void,
    value: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_fill_null_impl(that, value)
}

#[no_mangle]
pub extern "C" fn wire_Expr_filter(
    that: *const std::ffi::c_void,
    cond: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_filter_impl(that, cond)
}

#[no_mangle]
pub extern "C" fn wire_Expr_first(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_first_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_flatten(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_flatten_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_floor(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_floor_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_floor_div(
    that: *const std::ffi::c_void,
    rhs: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_floor_div_impl(that, rhs)
}

#[no_mangle]
pub extern "C" fn wire_Expr_forward_fill(
    that: *const std::ffi::c_void,
    limit: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_forward_fill_impl(that, limit)
}

#[no_mangle]
pub extern "C" fn wire_Expr_gather(
    that: *const std::ffi::c_void,
    idx: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_gather_impl(that, idx)
}

#[no_mangle]
pub extern "C" fn wire_Expr_get(
    that: *const std::ffi::c_void,
    idx: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_get_impl(that, idx)
}

#[no_mangle]
pub extern "C" fn wire_Expr_gt(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_gt_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_gt_eq(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_gt_eq_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_head(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_head_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_Expr_implode(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_implode_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_finite(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_finite_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_in(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_in_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_nan(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_nan_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_not_nan(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_not_nan_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_not_null(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_not_null_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_null(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_null_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_last(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_last_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_log(
    that: *const std::ffi::c_void,
    base: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_log_impl(that, base)
}

#[no_mangle]
pub extern "C" fn wire_Expr_log1p(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_log1p_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_lower_bound(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_lower_bound_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_lt(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_lt_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_lt_eq(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_lt_eq_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_mul(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_mul_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_n_unique(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_n_unique_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_nan_max(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_nan_max_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_nan_min(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_nan_min_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_neq(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_neq_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_neq_missing(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_neq_missing_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_not(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_not_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_null_count(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_null_count_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_or(
    that: *const std::ffi::c_void,
    expr: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_or_impl(that, expr)
}

#[no_mangle]
pub extern "C" fn wire_Expr_over(
    that: *const std::ffi::c_void,
    partiion_by: *const std::ffi::c_void,
    kind: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_over_impl(that, partiion_by, kind)
}

#[no_mangle]
pub extern "C" fn wire_Expr_pow(
    that: *const std::ffi::c_void,
    exponent: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_pow_impl(that, exponent)
}

#[no_mangle]
pub extern "C" fn wire_Expr_product(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_product_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_quantile(
    that: *const std::ffi::c_void,
    quantile: *const std::ffi::c_void,
    interpol: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_quantile_impl(that, quantile, interpol)
}

#[no_mangle]
pub extern "C" fn wire_Expr_radians(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_radians_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_rem(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rem_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_reshape(
    that: *const std::ffi::c_void,
    dims: *mut wire_cst_list_prim_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_reshape_impl(that, dims)
}

#[no_mangle]
pub extern "C" fn wire_Expr_reverse(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_reverse_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_max(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: *mut usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_max_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_mean(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: *mut usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_mean_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_median(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: *mut usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_median_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_min(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: *mut usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_min_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_quantile(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: *mut usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_quantile_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_std(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: *mut usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_std_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_sum(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: *mut usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_sum_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_var(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: *mut usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_var_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_round(
    that: *const std::ffi::c_void,
    decimals: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_round_impl(that, decimals)
}

#[no_mangle]
pub extern "C" fn wire_Expr_round_sig_figs(
    that: *const std::ffi::c_void,
    digits: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_round_sig_figs_impl(that, digits)
}

#[no_mangle]
pub extern "C" fn wire_Expr_set_sorted_flag(
    that: *const std::ffi::c_void,
    sorted: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_set_sorted_flag_impl(that, sorted)
}

#[no_mangle]
pub extern "C" fn wire_Expr_shift(
    that: *const std::ffi::c_void,
    n: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_shift_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_Expr_shift_and_fill(
    that: *const std::ffi::c_void,
    n: *const std::ffi::c_void,
    fill_value: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_shift_and_fill_impl(that, n, fill_value)
}

#[no_mangle]
pub extern "C" fn wire_Expr_shrink_dtype(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_shrink_dtype_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_sin(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_sin_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_sinh(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_sinh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_slice(
    that: *const std::ffi::c_void,
    offset: *const std::ffi::c_void,
    length: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_slice_impl(that, offset, length)
}

#[no_mangle]
pub extern "C" fn wire_Expr_sort(
    that: *const std::ffi::c_void,
    descending: bool,
    nulls_last: bool,
    multithreaded: bool,
    maintain_order: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_sort_impl(that, descending, nulls_last, multithreaded, maintain_order)
}

#[no_mangle]
pub extern "C" fn wire_Expr_sqrt(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_sqrt_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_std(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_std_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn wire_Expr_strict_cast(
    that: *const std::ffi::c_void,
    data_type: *mut wire_cst_data_type,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_strict_cast_impl(that, data_type)
}

#[no_mangle]
pub extern "C" fn wire_Expr_sub(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_sub_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_sum(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_sum_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_tail(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_tail_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_Expr_tan(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_tan_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_tanh(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_tanh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_then(
    that: *const std::ffi::c_void,
    value: *const std::ffi::c_void,
    otherwise: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_then_impl(that, value, otherwise)
}

#[no_mangle]
pub extern "C" fn wire_Expr_to_dot(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_to_dot_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_to_physical(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_to_physical_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_unique(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_unique_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_unique_stable(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_unique_stable_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_upper_bound(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_upper_bound_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_value_counts(
    that: *const std::ffi::c_void,
    sort: bool,
    parallel: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_value_counts_impl(that, sort, parallel)
}

#[no_mangle]
pub extern "C" fn wire_Expr_variance(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_variance_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn wire_Expr_what(port_: i64, that: *const std::ffi::c_void) {
    wire_Expr_what_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_xor(
    that: *const std::ffi::c_void,
    expr: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_xor_impl(that, expr)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_cache(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_cache_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_collect(port_: i64, that: *const std::ffi::c_void) {
    wire_LazyFrame_collect_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_cross_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_cross_join_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_drop_nulls(
    that: *const std::ffi::c_void,
    subset: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_drop_nulls_impl(that, subset)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_explode(
    that: *const std::ffi::c_void,
    columns: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_explode_impl(that, columns)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_fetch(port_: i64, that: *const std::ffi::c_void, n_rows: usize) {
    wire_LazyFrame_fetch_impl(port_, that, n_rows)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_filter(
    that: *const std::ffi::c_void,
    pred: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_filter_impl(that, pred)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_first(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_first_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_group_by(
    that: *const std::ffi::c_void,
    exprs: *const std::ffi::c_void,
    maintain_order: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_group_by_impl(that, exprs, maintain_order)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_inner_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    left_on: *const std::ffi::c_void,
    right_on: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_inner_join_impl(that, other, left_on, right_on)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    on: *const std::ffi::c_void,
    left_on: *const std::ffi::c_void,
    right_on: *const std::ffi::c_void,
    suffix: *mut wire_cst_list_prim_u_8,
    how: i32,
    allow_parallel: bool,
    force_parallel: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_join_impl(
        that,
        other,
        on,
        left_on,
        right_on,
        suffix,
        how,
        allow_parallel,
        force_parallel,
    )
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_last(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_last_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_left_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    left_on: *const std::ffi::c_void,
    right_on: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_left_join_impl(that, other, left_on, right_on)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_limit(
    that: *const std::ffi::c_void,
    n: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_limit_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_max(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_max_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_mean(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_mean_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_median(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_median_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_melt(
    that: *const std::ffi::c_void,
    id_vars: *mut wire_cst_list_String,
    value_vars: *mut wire_cst_list_String,
    variable_name: *mut wire_cst_list_prim_u_8,
    value_name: *mut wire_cst_list_prim_u_8,
    streamable: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_melt_impl(
        that,
        id_vars,
        value_vars,
        variable_name,
        value_name,
        streamable,
    )
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_min(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_min_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_outer_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    left_on: *const std::ffi::c_void,
    right_on: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_outer_join_impl(that, other, left_on, right_on)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_quantile(
    that: *const std::ffi::c_void,
    quantile: *const std::ffi::c_void,
    interpol: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_quantile_impl(that, quantile, interpol)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_reverse(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_reverse_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_select(
    that: *const std::ffi::c_void,
    exprs: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_select_impl(that, exprs)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_slice(
    that: *const std::ffi::c_void,
    offset: i64,
    len: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_slice_impl(that, offset, len)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_std(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_std_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_sum(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_sum_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_tail(
    that: *const std::ffi::c_void,
    n: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_tail_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_unique(
    that: *const std::ffi::c_void,
    subset: *mut wire_cst_list_String,
    keep_strategy: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_unique_impl(that, subset, keep_strategy)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_variance(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_variance_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_with_column(
    that: *const std::ffi::c_void,
    expr: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_with_column_impl(that, expr)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_with_columns(
    that: *const std::ffi::c_void,
    exprs: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_with_columns_impl(that, exprs)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_with_row_count(
    that: *const std::ffi::c_void,
    name: *mut wire_cst_list_prim_u_8,
    offset: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_with_row_count_impl(that, name, offset)
}

#[no_mangle]
pub extern "C" fn wire_LazyGroupBy_agg(
    that: *const std::ffi::c_void,
    exprs: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyGroupBy_agg_impl(that, exprs)
}

#[no_mangle]
pub extern "C" fn wire_LazyGroupBy_head(
    that: *const std::ffi::c_void,
    n: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyGroupBy_head_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_LazyGroupBy_tail(
    that: *const std::ffi::c_void,
    n: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyGroupBy_tail_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_Schema_of(
    fields: *mut wire_cst_list_field,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Schema_of_impl(fields)
}

#[no_mangle]
pub extern "C" fn wire_Series_add_to(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_add_to_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_append(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_append_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_apply_scalar(
    that: *const std::ffi::c_void,
    op: i32,
    value: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_apply_scalar_impl(that, op, value)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_doubles(port_: i64, that: *const std::ffi::c_void, strict: bool) {
    wire_Series_as_doubles_impl(port_, that, strict)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_durations(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_durations_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_ints(
    that: *const std::ffi::c_void,
    strict: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_ints_impl(that, strict)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_local_datetime(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_local_datetime_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_naive_datetime(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_naive_datetime_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_strings(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_strings_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_utc_datetime(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_utc_datetime_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_cast(
    that: *const std::ffi::c_void,
    dtype: *mut wire_cst_data_type,
    strict: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_cast_impl(that, dtype, strict)
}

#[no_mangle]
pub extern "C" fn wire_Series_divide(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_divide_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_dump(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_dump_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_equal(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    ignore_null: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_equal_impl(that, other, ignore_null)
}

#[no_mangle]
pub extern "C" fn wire_Series_estimated_size(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_estimated_size_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_explode(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_explode_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_explode_by_offsets(
    that: *const std::ffi::c_void,
    offsets: *mut wire_cst_list_prim_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_explode_by_offsets_impl(that, offsets)
}

#[no_mangle]
pub extern "C" fn wire_Series_get(
    that: *const std::ffi::c_void,
    index: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_get_impl(that, index)
}

#[no_mangle]
pub extern "C" fn wire_Series_get_string(
    that: *const std::ffi::c_void,
    index: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_get_string_impl(that, index)
}

#[no_mangle]
pub extern "C" fn wire_Series_head(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_head_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_Series_into_frame(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_into_frame_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_is_bool(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_is_bool_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_is_numeric(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_is_numeric_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_is_temporal(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_is_temporal_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_is_utf8(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_is_utf8_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_iter(port_: i64, that: *const std::ffi::c_void) {
    wire_Series_iter_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_Series_max(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_max_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_mean(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_mean_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_mean_as_series(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_mean_as_series_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_median(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_median_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_median_as_series(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_median_as_series_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_min(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_min_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_multiply(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_multiply_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_bools(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_bools_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_doubles(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_box_autoadd_f_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_doubles_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_durations(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_box_autoadd_Chrono_Duration,
    unit: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_durations_impl(name, values, unit)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_i32(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_box_autoadd_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_i32_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_ints(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_box_autoadd_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_ints_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_strings(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_strings_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_product(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_product_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_remainder(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_remainder_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_rename(
    that: *const std::ffi::c_void,
    name: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rename_impl(that, name)
}

#[no_mangle]
pub extern "C" fn wire_Series_reshape(
    that: *const std::ffi::c_void,
    dims: *mut wire_cst_list_prim_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_reshape_impl(that, dims)
}

#[no_mangle]
pub extern "C" fn wire_Series_shuffle(
    that: *const std::ffi::c_void,
    seed: *mut u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_shuffle_impl(that, seed)
}

#[no_mangle]
pub extern "C" fn wire_Series_sort(
    that: *const std::ffi::c_void,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_sort_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Series_std_as_series(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_std_as_series_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn wire_Series_subtract(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_subtract_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_sum(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_sum_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_sum_as_series(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_sum_as_series_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_tail(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_tail_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_Series_to_list(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_to_list_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_unique(
    port_: i64,
    that: *const std::ffi::c_void,
    maintain_order: bool,
) {
    wire_Series_unique_impl(port_, that, maintain_order)
}

#[no_mangle]
pub extern "C" fn wire_Series_var_as_series(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_var_as_series_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn wire_col(
    name: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_col_impl(name)
}

#[no_mangle]
pub extern "C" fn wire_cols(
    names: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_cols_impl(names)
}

#[no_mangle]
pub extern "C" fn wire_count() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_count_impl()
}

#[no_mangle]
pub extern "C" fn wire_dtypes(
    types: *mut wire_cst_list_data_type,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_dtypes_impl(types)
}

#[no_mangle]
pub extern "C" fn wire_lit(
    value: *mut wire_cst_literal_value,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_lit_impl(value)
}

#[no_mangle]
pub extern "C" fn wire_nth(idx: i64) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_nth_impl(idx)
}

#[no_mangle]
pub extern "C" fn wire_read_csv(
    port_: i64,
    path: *mut wire_cst_list_prim_u_8,
    dtypes_slice: *mut wire_cst_list_data_type,
    has_header: *mut bool,
    columns: *mut wire_cst_list_String,
    comment_char: *mut wire_cst_list_prim_u_8,
    eol_char: *mut wire_cst_list_prim_u_8,
    chunk_size: *mut usize,
    sample_size: *mut usize,
    row_count: *mut wire_cst_row_count,
    encoding: *mut i32,
    n_rows: *mut usize,
    n_threads: *mut usize,
    null_values: *mut wire_cst_null_values,
    projection: *mut wire_cst_list_prim_u_32,
    quote_char: *mut wire_cst_list_prim_u_8,
    skip_rows: usize,
    skip_rows_after_header: usize,
    ignore_errors: bool,
    rechunk: bool,
    try_parse_dates: bool,
    low_memory: bool,
) {
    wire_read_csv_impl(
        port_,
        path,
        dtypes_slice,
        has_header,
        columns,
        comment_char,
        eol_char,
        chunk_size,
        sample_size,
        row_count,
        encoding,
        n_rows,
        n_threads,
        null_values,
        projection,
        quote_char,
        skip_rows,
        skip_rows_after_header,
        ignore_errors,
        rechunk,
        try_parse_dates,
        low_memory,
    )
}

#[no_mangle]
pub extern "C" fn wire_read_json(
    port_: i64,
    path: *mut wire_cst_list_prim_u_8,
    batch_size: *mut usize,
    projection: *mut wire_cst_list_String,
) {
    wire_read_json_impl(port_, path, batch_size, projection)
}

#[no_mangle]
pub extern "C" fn wire_scan_csv(
    port_: i64,
    path: *mut wire_cst_list_prim_u_8,
    dtype_overwrite: *const std::ffi::c_void,
    has_header: *mut bool,
    comment_char: *mut wire_cst_list_prim_u_8,
    eol_char: *mut wire_cst_list_prim_u_8,
    quote_char: *mut wire_cst_list_prim_u_8,
    skip_rows: usize,
    skip_rows_after_header: usize,
    row_count: *mut wire_cst_row_count,
    encoding: *mut i32,
    n_rows: *mut usize,
    null_values: *mut wire_cst_null_values,
    ignore_errors: bool,
    rechunk: bool,
    try_parse_dates: bool,
    infer_schema_length: *mut usize,
    cache: bool,
) {
    wire_scan_csv_impl(
        port_,
        path,
        dtype_overwrite,
        has_header,
        comment_char,
        eol_char,
        quote_char,
        skip_rows,
        skip_rows_after_header,
        row_count,
        encoding,
        n_rows,
        null_values,
        ignore_errors,
        rechunk,
        try_parse_dates,
        infer_schema_length,
        cache,
    )
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockDataFrame(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<DataFrame>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFrame(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<DataFrame>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockExpr(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Expr>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockExpr(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Expr>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyFrame(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<LazyFrame>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFrame(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<LazyFrame>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<LazyGroupBy>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<LazyGroupBy>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionSchema(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Option<Schema>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchema(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Option<Schema>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Option<Vec<Expr>>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Option<Vec<Expr>>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Option<Vec<Series>>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Option<Vec<Series>>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSchema(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Schema>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchema(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Schema>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Series>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Series>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecExpr(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Vec<Expr>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecExpr(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Vec<Expr>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Vec<Series>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Vec<Series>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_Chrono_Duration(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_Chrono_Local(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_Chrono_Naive(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_Chrono_Utc(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_bool(value: bool) -> *mut bool {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_closed_window(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_csv_encoding(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_data_type() -> *mut wire_cst_data_type {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_data_type::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_f_64(value: f64) -> *mut f64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_32(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_64(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_literal_value() -> *mut wire_cst_literal_value {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_literal_value::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_null_values() -> *mut wire_cst_null_values {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_null_values::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_quantile_interpol_options(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_row_count() -> *mut wire_cst_row_count {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_row_count::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_usize(value: usize) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_window_mapping(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_data_type() -> *mut wire_cst_data_type {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_data_type::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_list_String(len: i32) -> *mut wire_cst_list_String {
    let wrap = wire_cst_list_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_bool(len: i32) -> *mut wire_cst_list_bool {
    let wrap = wire_cst_list_bool {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_dartabi(len: i32) -> *mut wire_cst_list_dartabi {
    let wrap = wire_cst_list_dartabi {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <UNREACHABLE_RUST_WIRE_TYPE>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_data_type(len: i32) -> *mut wire_cst_list_data_type {
    let wrap = wire_cst_list_data_type {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_data_type>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_field(len: i32) -> *mut wire_cst_list_field {
    let wrap = wire_cst_list_field {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_field>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_String(len: i32) -> *mut wire_cst_list_opt_String {
    let wrap = wire_cst_list_opt_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_Chrono_Duration(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_Chrono_Duration {
    let wrap = wire_cst_list_opt_box_autoadd_Chrono_Duration {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_Chrono_Local(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_Chrono_Local {
    let wrap = wire_cst_list_opt_box_autoadd_Chrono_Local {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_Chrono_Naive(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_Chrono_Naive {
    let wrap = wire_cst_list_opt_box_autoadd_Chrono_Naive {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_Chrono_Utc(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_Chrono_Utc {
    let wrap = wire_cst_list_opt_box_autoadd_Chrono_Utc {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_f_64(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_f_64 {
    let wrap = wire_cst_list_opt_box_autoadd_f_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_i_32(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_i_32 {
    let wrap = wire_cst_list_opt_box_autoadd_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_i_64(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_i_64 {
    let wrap = wire_cst_list_opt_box_autoadd_i_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_f_64(len: i32) -> *mut wire_cst_list_prim_f_64 {
    let ans = wire_cst_list_prim_f_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_64(len: i32) -> *mut wire_cst_list_prim_i_64 {
    let ans = wire_cst_list_prim_i_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_32(len: i32) -> *mut wire_cst_list_prim_u_32 {
    let ans = wire_cst_list_prim_u_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_8(len: i32) -> *mut wire_cst_list_prim_u_8 {
    let ans = wire_cst_list_prim_u_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_record_string_string(
    len: i32,
) -> *mut wire_cst_list_record_string_string {
    let wrap = wire_cst_list_record_string_string {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_string>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_inflate_DataType_Datetime() -> *mut DataTypeKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DataTypeKind {
        Datetime: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_DataType_Datetime {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DataType_Duration() -> *mut DataTypeKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DataTypeKind {
        Duration: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_DataType_Duration {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DataType_List() -> *mut DataTypeKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DataTypeKind {
        List: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_DataType_List {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_DataType_Struct() -> *mut DataTypeKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DataTypeKind {
        Struct: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_DataType_Struct {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Boolean() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Boolean: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_LiteralValue_Boolean {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Utf8() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Utf8: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_LiteralValue_Utf8 {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Binary() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Binary: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_LiteralValue_Binary {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_UInt8() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        UInt8: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_LiteralValue_UInt8 {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_UInt16() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        UInt16: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_LiteralValue_UInt16 {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_UInt32() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        UInt32: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_LiteralValue_UInt32 {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_UInt64() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        UInt64: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_LiteralValue_UInt64 {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Int8() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Int8: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_LiteralValue_Int8 {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Int16() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Int16: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_LiteralValue_Int16 {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Int32() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Int32: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_LiteralValue_Int32 {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Int64() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Int64: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_LiteralValue_Int64 {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Float32() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Float32: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_LiteralValue_Float32 {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Float64() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Float64: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_LiteralValue_Float64 {
                field0: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Range() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Range: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_LiteralValue_Range {
            low: Default::default(),
            high: Default::default(),
            data_type: core::ptr::null_mut(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_DateTime() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        DateTime: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_LiteralValue_DateTime {
                field0: Default::default(),
                field1: Default::default(),
                field2: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Duration() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Duration: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_LiteralValue_Duration {
                field0: Default::default(),
                field1: Default::default(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Date() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Date: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_LiteralValue_Date {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_LiteralValue_Time() -> *mut LiteralValueKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(LiteralValueKind {
        Time: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_LiteralValue_Time {
            field0: Default::default(),
        }),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_NullValues_AllColumnsSingle() -> *mut NullValuesKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(NullValuesKind {
        AllColumnsSingle: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_NullValues_AllColumnsSingle {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_NullValues_AllColumns() -> *mut NullValuesKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(NullValuesKind {
        AllColumns: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_NullValues_AllColumns {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_NullValues_Named() -> *mut NullValuesKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(NullValuesKind {
        Named: flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_NullValues_Named {
            field0: core::ptr::null_mut(),
        }),
    })
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_data_type {
    tag: i32,
    kind: *mut DataTypeKind,
}
#[repr(C)]
pub union DataTypeKind {
    Boolean: *mut wire_cst_DataType_Boolean,
    UInt8: *mut wire_cst_DataType_UInt8,
    UInt16: *mut wire_cst_DataType_UInt16,
    UInt32: *mut wire_cst_DataType_UInt32,
    UInt64: *mut wire_cst_DataType_UInt64,
    Int8: *mut wire_cst_DataType_Int8,
    Int16: *mut wire_cst_DataType_Int16,
    Int32: *mut wire_cst_DataType_Int32,
    Int64: *mut wire_cst_DataType_Int64,
    Float32: *mut wire_cst_DataType_Float32,
    Float64: *mut wire_cst_DataType_Float64,
    Utf8: *mut wire_cst_DataType_Utf8,
    Binary: *mut wire_cst_DataType_Binary,
    Date: *mut wire_cst_DataType_Date,
    Datetime: *mut wire_cst_DataType_Datetime,
    Duration: *mut wire_cst_DataType_Duration,
    Time: *mut wire_cst_DataType_Time,
    List: *mut wire_cst_DataType_List,
    Null: *mut wire_cst_DataType_Null,
    Struct: *mut wire_cst_DataType_Struct,
    Unknown: *mut wire_cst_DataType_Unknown,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Boolean {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_UInt8 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_UInt16 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_UInt32 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_UInt64 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Int8 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Int16 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Int32 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Int64 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Float32 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Float64 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Utf8 {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Binary {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Date {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Datetime {
    field0: i32,
    field1: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Duration {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Time {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_List {
    field0: *mut wire_cst_data_type,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Null {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Struct {
    field0: *mut wire_cst_list_field,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DataType_Unknown {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_field {
    name: *mut wire_cst_list_prim_u_8,
    dtype: wire_cst_data_type,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_String {
    ptr: *mut *mut wire_cst_list_prim_u_8,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_bool {
    ptr: *mut bool,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_dartabi {
    ptr: *mut UNREACHABLE_RUST_WIRE_TYPE,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_data_type {
    ptr: *mut wire_cst_data_type,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_field {
    ptr: *mut wire_cst_field,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_String {
    ptr: *mut *mut wire_cst_list_prim_u_8,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_Chrono_Duration {
    ptr: *mut *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_Chrono_Local {
    ptr: *mut *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_Chrono_Naive {
    ptr: *mut *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_Chrono_Utc {
    ptr: *mut *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_f_64 {
    ptr: *mut *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_i_32 {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_opt_box_autoadd_i_64 {
    ptr: *mut *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_f_64 {
    ptr: *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_i_64 {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_32 {
    ptr: *mut u32,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_8 {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_record_string_string {
    ptr: *mut wire_cst_record_string_string,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_literal_value {
    tag: i32,
    kind: *mut LiteralValueKind,
}
#[repr(C)]
pub union LiteralValueKind {
    Null: *mut wire_cst_LiteralValue_Null,
    Boolean: *mut wire_cst_LiteralValue_Boolean,
    Utf8: *mut wire_cst_LiteralValue_Utf8,
    Binary: *mut wire_cst_LiteralValue_Binary,
    UInt8: *mut wire_cst_LiteralValue_UInt8,
    UInt16: *mut wire_cst_LiteralValue_UInt16,
    UInt32: *mut wire_cst_LiteralValue_UInt32,
    UInt64: *mut wire_cst_LiteralValue_UInt64,
    Int8: *mut wire_cst_LiteralValue_Int8,
    Int16: *mut wire_cst_LiteralValue_Int16,
    Int32: *mut wire_cst_LiteralValue_Int32,
    Int64: *mut wire_cst_LiteralValue_Int64,
    Float32: *mut wire_cst_LiteralValue_Float32,
    Float64: *mut wire_cst_LiteralValue_Float64,
    Range: *mut wire_cst_LiteralValue_Range,
    DateTime: *mut wire_cst_LiteralValue_DateTime,
    Duration: *mut wire_cst_LiteralValue_Duration,
    Date: *mut wire_cst_LiteralValue_Date,
    Time: *mut wire_cst_LiteralValue_Time,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Null {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Boolean {
    field0: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Utf8 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Binary {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_UInt8 {
    field0: u8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_UInt16 {
    field0: u16,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_UInt32 {
    field0: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_UInt64 {
    field0: u64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Int8 {
    field0: i8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Int16 {
    field0: i16,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Int32 {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Int64 {
    field0: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Float32 {
    field0: f32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Float64 {
    field0: f64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Range {
    low: i64,
    high: i64,
    data_type: *mut wire_cst_data_type,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_DateTime {
    field0: i64,
    field1: i32,
    field2: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Duration {
    field0: i64,
    field1: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Date {
    field0: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_LiteralValue_Time {
    field0: i64,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_null_values {
    tag: i32,
    kind: *mut NullValuesKind,
}
#[repr(C)]
pub union NullValuesKind {
    AllColumnsSingle: *mut wire_cst_NullValues_AllColumnsSingle,
    AllColumns: *mut wire_cst_NullValues_AllColumns,
    Named: *mut wire_cst_NullValues_Named,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_NullValues_AllColumnsSingle {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_NullValues_AllColumns {
    field0: *mut wire_cst_list_String,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_NullValues_Named {
    field0: *mut wire_cst_list_record_string_string,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_record_string_string {
    field0: *mut wire_cst_list_prim_u_8,
    field1: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_row_count {
    name: *mut wire_cst_list_prim_u_8,
    offset: u32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_shape {
    height: usize,
    width: usize,
}
