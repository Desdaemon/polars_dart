// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.6.

// Section: imports

use super::*;
use crate::wrapper::df::*;
use crate::wrapper::entry::*;
use crate::wrapper::series::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<chrono::Duration> for i64 {
    fn cst_decode(self) -> chrono::Duration {
        chrono::Duration::microseconds(self)
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<AssertUnwindSafe<PExpr>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<AssertUnwindSafe<PExpr>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<AssertUnwindSafe<SpecialEq<PSeries>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<AssertUnwindSafe<SpecialEq<PSeries>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<DataFrame>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyFrame>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyGroupBy>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<LazyGroupBy>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Schema>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Schema>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Series>>>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Option<Vec<Series>>>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<Series>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::wrapper::expr::AggExpr> for wire_cst_agg_expr {
    fn cst_decode(self) -> crate::wrapper::expr::AggExpr {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Min };
                crate::wrapper::expr::AggExpr::Min {
                    input: ans.input.cst_decode(),
                    propagate_nans: ans.propagate_nans.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.Max };
                crate::wrapper::expr::AggExpr::Max {
                    input: ans.input.cst_decode(),
                    propagate_nans: ans.propagate_nans.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.Median };
                crate::wrapper::expr::AggExpr::Median(ans.field0.cst_decode())
            }
            3 => {
                let ans = unsafe { self.kind.NUnique };
                crate::wrapper::expr::AggExpr::NUnique(ans.field0.cst_decode())
            }
            4 => {
                let ans = unsafe { self.kind.First };
                crate::wrapper::expr::AggExpr::First(ans.field0.cst_decode())
            }
            5 => {
                let ans = unsafe { self.kind.Last };
                crate::wrapper::expr::AggExpr::Last(ans.field0.cst_decode())
            }
            6 => {
                let ans = unsafe { self.kind.Mean };
                crate::wrapper::expr::AggExpr::Mean(ans.field0.cst_decode())
            }
            7 => {
                let ans = unsafe { self.kind.Implode };
                crate::wrapper::expr::AggExpr::Implode(ans.field0.cst_decode())
            }
            8 => {
                let ans = unsafe { self.kind.Count };
                crate::wrapper::expr::AggExpr::Count(ans.field0.cst_decode())
            }
            9 => {
                let ans = unsafe { self.kind.Quantile };
                crate::wrapper::expr::AggExpr::Quantile {
                    expr: ans.expr.cst_decode(),
                    quantile: ans.quantile.cst_decode(),
                    interpol: ans.interpol.cst_decode(),
                }
            }
            10 => {
                let ans = unsafe { self.kind.Sum };
                crate::wrapper::expr::AggExpr::Sum(ans.field0.cst_decode())
            }
            11 => {
                let ans = unsafe { self.kind.AggGroups };
                crate::wrapper::expr::AggExpr::AggGroups(ans.field0.cst_decode())
            }
            12 => {
                let ans = unsafe { self.kind.Std };
                crate::wrapper::expr::AggExpr::Std(ans.field0.cst_decode(), ans.field1.cst_decode())
            }
            13 => {
                let ans = unsafe { self.kind.Var };
                crate::wrapper::expr::AggExpr::Var(ans.field0.cst_decode(), ans.field1.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<chrono::Duration> for *mut i64 {
    fn cst_decode(self) -> chrono::Duration {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<chrono::Duration>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::expr::AggExpr> for *mut wire_cst_agg_expr {
    fn cst_decode(self) -> crate::wrapper::expr::AggExpr {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::expr::AggExpr>::cst_decode(*wrap).into()
    }
}
impl CstDecode<bool> for *mut bool {
    fn cst_decode(self) -> bool {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::wrapper::expr::ClosedWindow> for *mut i32 {
    fn cst_decode(self) -> crate::wrapper::expr::ClosedWindow {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::expr::ClosedWindow>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::entry::CsvEncoding> for *mut i32 {
    fn cst_decode(self) -> crate::wrapper::entry::CsvEncoding {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::entry::CsvEncoding>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::expr::DataType> for *mut wire_cst_data_type {
    fn cst_decode(self) -> crate::wrapper::expr::DataType {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::expr::DataType>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::expr::Expr> for *mut wire_cst_expr {
    fn cst_decode(self) -> crate::wrapper::expr::Expr {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::expr::Expr>::cst_decode(*wrap).into()
    }
}
impl CstDecode<f64> for *mut f64 {
    fn cst_decode(self) -> f64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i32> for *mut i32 {
    fn cst_decode(self) -> i32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<i64> for *mut i64 {
    fn cst_decode(self) -> i64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::wrapper::expr::LiteralValue> for *mut wire_cst_literal_value {
    fn cst_decode(self) -> crate::wrapper::expr::LiteralValue {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::expr::LiteralValue>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::entry::NullValues> for *mut wire_cst_null_values {
    fn cst_decode(self) -> crate::wrapper::entry::NullValues {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::entry::NullValues>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::entry::RowCount> for *mut wire_cst_row_count {
    fn cst_decode(self) -> crate::wrapper::entry::RowCount {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::entry::RowCount>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::expr::SortOptions> for *mut wire_cst_sort_options {
    fn cst_decode(self) -> crate::wrapper::expr::SortOptions {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::expr::SortOptions>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::entry::TimeUnit> for *mut i32 {
    fn cst_decode(self) -> crate::wrapper::entry::TimeUnit {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::entry::TimeUnit>::cst_decode(*wrap).into()
    }
}
impl CstDecode<u32> for *mut u32 {
    fn cst_decode(self) -> u32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u64> for *mut u64 {
    fn cst_decode(self) -> u64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<usize> for *mut usize {
    fn cst_decode(self) -> usize {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::wrapper::expr::WindowType> for *mut wire_cst_window_type {
    fn cst_decode(self) -> crate::wrapper::expr::WindowType {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::expr::WindowType>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::wrapper::expr::DataType>> for *mut wire_cst_data_type {
    fn cst_decode(self) -> Box<crate::wrapper::expr::DataType> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::expr::DataType>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::wrapper::expr::Expr>> for *mut wire_cst_expr {
    fn cst_decode(self) -> Box<crate::wrapper::expr::Expr> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::wrapper::expr::Expr>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::wrapper::expr::DataType> for wire_cst_data_type {
    fn cst_decode(self) -> crate::wrapper::expr::DataType {
        match self.tag {
            0 => crate::wrapper::expr::DataType::Boolean,
            1 => crate::wrapper::expr::DataType::Uint8,
            2 => crate::wrapper::expr::DataType::Uint16,
            3 => crate::wrapper::expr::DataType::Uint32,
            4 => crate::wrapper::expr::DataType::Uint64,
            5 => crate::wrapper::expr::DataType::Int8,
            6 => crate::wrapper::expr::DataType::Int16,
            7 => crate::wrapper::expr::DataType::Int32,
            8 => crate::wrapper::expr::DataType::Int64,
            9 => crate::wrapper::expr::DataType::Float32,
            10 => crate::wrapper::expr::DataType::Float64,
            11 => crate::wrapper::expr::DataType::Utf8,
            12 => crate::wrapper::expr::DataType::Binary,
            13 => crate::wrapper::expr::DataType::Date,
            14 => {
                let ans = unsafe { self.kind.Datetime };
                crate::wrapper::expr::DataType::Datetime(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            }
            15 => {
                let ans = unsafe { self.kind.Duration };
                crate::wrapper::expr::DataType::Duration(ans.field0.cst_decode())
            }
            16 => crate::wrapper::expr::DataType::Time,
            17 => {
                let ans = unsafe { self.kind.List };
                crate::wrapper::expr::DataType::List(ans.field0.cst_decode())
            }
            18 => {
                let ans = unsafe { self.kind.Struct };
                crate::wrapper::expr::DataType::Struct(ans.field0.cst_decode())
            }
            19 => crate::wrapper::expr::DataType::Null,
            20 => crate::wrapper::expr::DataType::Unknown,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::wrapper::expr::Excluded> for wire_cst_excluded {
    fn cst_decode(self) -> crate::wrapper::expr::Excluded {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Name };
                crate::wrapper::expr::Excluded::Name(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Dtype };
                crate::wrapper::expr::Excluded::Dtype(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::wrapper::expr::Expr> for wire_cst_expr {
    fn cst_decode(self) -> crate::wrapper::expr::Expr {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Alias };
                crate::wrapper::expr::Expr::Alias(ans.field0.cst_decode(), ans.field1.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Column };
                crate::wrapper::expr::Expr::Column(ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.Columns };
                crate::wrapper::expr::Expr::Columns(ans.field0.cst_decode())
            }
            3 => {
                let ans = unsafe { self.kind.DtypeColumn };
                crate::wrapper::expr::Expr::DtypeColumn(ans.field0.cst_decode())
            }
            4 => {
                let ans = unsafe { self.kind.Literal };
                crate::wrapper::expr::Expr::Literal(ans.field0.cst_decode())
            }
            5 => {
                let ans = unsafe { self.kind.BinaryExpr };
                crate::wrapper::expr::Expr::BinaryExpr {
                    left: ans.left.cst_decode(),
                    op: ans.op.cst_decode(),
                    right: ans.right.cst_decode(),
                }
            }
            6 => {
                let ans = unsafe { self.kind.Cast };
                crate::wrapper::expr::Expr::Cast {
                    expr: ans.expr.cst_decode(),
                    data_type: ans.data_type.cst_decode(),
                    strict: ans.strict.cst_decode(),
                }
            }
            7 => {
                let ans = unsafe { self.kind.Sort };
                crate::wrapper::expr::Expr::Sort {
                    expr: ans.expr.cst_decode(),
                    options: ans.options.cst_decode(),
                }
            }
            8 => {
                let ans = unsafe { self.kind.Gather };
                crate::wrapper::expr::Expr::Gather {
                    expr: ans.expr.cst_decode(),
                    idx: ans.idx.cst_decode(),
                    returns_scalar: ans.returns_scalar.cst_decode(),
                }
            }
            9 => {
                let ans = unsafe { self.kind.SortBy };
                crate::wrapper::expr::Expr::SortBy {
                    expr: ans.expr.cst_decode(),
                    by: ans.by.cst_decode(),
                    descending: ans.descending.cst_decode(),
                }
            }
            10 => {
                let ans = unsafe { self.kind.Agg };
                crate::wrapper::expr::Expr::Agg(ans.field0.cst_decode())
            }
            11 => {
                let ans = unsafe { self.kind.Ternary };
                crate::wrapper::expr::Expr::Ternary {
                    predicate: ans.predicate.cst_decode(),
                    truthy: ans.truthy.cst_decode(),
                    falsy: ans.falsy.cst_decode(),
                }
            }
            12 => {
                let ans = unsafe { self.kind.Explode };
                crate::wrapper::expr::Expr::Explode(ans.field0.cst_decode())
            }
            13 => {
                let ans = unsafe { self.kind.Filter };
                crate::wrapper::expr::Expr::Filter {
                    input: ans.input.cst_decode(),
                    by: ans.by.cst_decode(),
                }
            }
            14 => crate::wrapper::expr::Expr::Wildcard,
            15 => {
                let ans = unsafe { self.kind.Window };
                crate::wrapper::expr::Expr::Window {
                    function: ans.function.cst_decode(),
                    partition_by: ans.partition_by.cst_decode(),
                    options: ans.options.cst_decode(),
                }
            }
            16 => {
                let ans = unsafe { self.kind.Slice };
                crate::wrapper::expr::Expr::Slice {
                    input: ans.input.cst_decode(),
                    offset: ans.offset.cst_decode(),
                    length: ans.length.cst_decode(),
                }
            }
            17 => {
                let ans = unsafe { self.kind.Exclude };
                crate::wrapper::expr::Expr::Exclude(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            }
            18 => {
                let ans = unsafe { self.kind.KeepName };
                crate::wrapper::expr::Expr::KeepName(ans.field0.cst_decode())
            }
            19 => crate::wrapper::expr::Expr::Count,
            20 => {
                let ans = unsafe { self.kind.Nth };
                crate::wrapper::expr::Expr::Nth(ans.field0.cst_decode())
            }
            21 => {
                let ans = unsafe { self.kind.Internal };
                crate::wrapper::expr::Expr::Internal(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::wrapper::expr::Field> for wire_cst_field {
    fn cst_decode(self) -> crate::wrapper::expr::Field {
        crate::wrapper::expr::Field {
            name: self.name.cst_decode(),
            dtype: self.dtype.cst_decode(),
        }
    }
}
impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
    fn cst_decode(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<bool>> for *mut wire_cst_list_bool {
    fn cst_decode(self) -> Vec<bool> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::wrapper::expr::DataType>> for *mut wire_cst_list_data_type {
    fn cst_decode(self) -> Vec<crate::wrapper::expr::DataType> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::wrapper::expr::Excluded>> for *mut wire_cst_list_excluded {
    fn cst_decode(self) -> Vec<crate::wrapper::expr::Excluded> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::wrapper::expr::Expr>> for *mut wire_cst_list_expr {
    fn cst_decode(self) -> Vec<crate::wrapper::expr::Expr> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::wrapper::expr::Field>> for *mut wire_cst_list_field {
    fn cst_decode(self) -> Vec<crate::wrapper::expr::Field> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<String>>> for *mut wire_cst_list_opt_String {
    fn cst_decode(self) -> Vec<Option<String>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<chrono::Duration>>>
    for *mut wire_cst_list_opt_box_autoadd_Chrono_Duration
{
    fn cst_decode(self) -> Vec<Option<chrono::Duration>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<bool>>> for *mut wire_cst_list_opt_box_autoadd_bool {
    fn cst_decode(self) -> Vec<Option<bool>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<f64>>> for *mut wire_cst_list_opt_box_autoadd_f_64 {
    fn cst_decode(self) -> Vec<Option<f64>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<i32>>> for *mut wire_cst_list_opt_box_autoadd_i_32 {
    fn cst_decode(self) -> Vec<Option<i32>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Option<i64>>> for *mut wire_cst_list_opt_box_autoadd_i_64 {
    fn cst_decode(self) -> Vec<Option<i64>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<f64>> for *mut wire_cst_list_prim_f_64 {
    fn cst_decode(self) -> Vec<f64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<i64>> for *mut wire_cst_list_prim_i_64 {
    fn cst_decode(self) -> Vec<i64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u32>> for *mut wire_cst_list_prim_u_32 {
    fn cst_decode(self) -> Vec<u32> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<(String, String)>> for *mut wire_cst_list_record_string_string {
    fn cst_decode(self) -> Vec<(String, String)> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::wrapper::expr::LiteralValue> for wire_cst_literal_value {
    fn cst_decode(self) -> crate::wrapper::expr::LiteralValue {
        match self.tag {
            0 => crate::wrapper::expr::LiteralValue::Null,
            1 => {
                let ans = unsafe { self.kind.Boolean };
                crate::wrapper::expr::LiteralValue::Boolean(ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.Utf8 };
                crate::wrapper::expr::LiteralValue::Utf8(ans.field0.cst_decode())
            }
            3 => {
                let ans = unsafe { self.kind.Binary };
                crate::wrapper::expr::LiteralValue::Binary(ans.field0.cst_decode())
            }
            4 => {
                let ans = unsafe { self.kind.Uint32 };
                crate::wrapper::expr::LiteralValue::Uint32(ans.field0.cst_decode())
            }
            5 => {
                let ans = unsafe { self.kind.Uint64 };
                crate::wrapper::expr::LiteralValue::Uint64(ans.field0.cst_decode())
            }
            6 => {
                let ans = unsafe { self.kind.Int32 };
                crate::wrapper::expr::LiteralValue::Int32(ans.field0.cst_decode())
            }
            7 => {
                let ans = unsafe { self.kind.Int64 };
                crate::wrapper::expr::LiteralValue::Int64(ans.field0.cst_decode())
            }
            8 => {
                let ans = unsafe { self.kind.Float32 };
                crate::wrapper::expr::LiteralValue::Float32(ans.field0.cst_decode())
            }
            9 => {
                let ans = unsafe { self.kind.Float64 };
                crate::wrapper::expr::LiteralValue::Float64(ans.field0.cst_decode())
            }
            10 => {
                let ans = unsafe { self.kind.Range };
                crate::wrapper::expr::LiteralValue::Range {
                    low: ans.low.cst_decode(),
                    high: ans.high.cst_decode(),
                    data_type: ans.data_type.cst_decode(),
                }
            }
            11 => {
                let ans = unsafe { self.kind.DateTime };
                crate::wrapper::expr::LiteralValue::DateTime(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                    ans.field2.cst_decode(),
                )
            }
            12 => {
                let ans = unsafe { self.kind.Duration };
                crate::wrapper::expr::LiteralValue::Duration(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            }
            13 => {
                let ans = unsafe { self.kind.Series };
                crate::wrapper::expr::LiteralValue::Series(ans.field0.cst_decode())
            }
            14 => {
                let ans = unsafe { self.kind.Date };
                crate::wrapper::expr::LiteralValue::Date(ans.field0.cst_decode())
            }
            15 => {
                let ans = unsafe { self.kind.Time };
                crate::wrapper::expr::LiteralValue::Time(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::wrapper::entry::NullValues> for wire_cst_null_values {
    fn cst_decode(self) -> crate::wrapper::entry::NullValues {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.AllColumnsSingle };
                crate::wrapper::entry::NullValues::AllColumnsSingle(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.AllColumns };
                crate::wrapper::entry::NullValues::AllColumns(ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.Named };
                crate::wrapper::entry::NullValues::Named(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<(String, String)> for wire_cst_record_string_string {
    fn cst_decode(self) -> (String, String) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<crate::wrapper::entry::RowCount> for wire_cst_row_count {
    fn cst_decode(self) -> crate::wrapper::entry::RowCount {
        crate::wrapper::entry::RowCount {
            name: self.name.cst_decode(),
            offset: self.offset.cst_decode(),
        }
    }
}
impl CstDecode<crate::wrapper::expr::SortOptions> for wire_cst_sort_options {
    fn cst_decode(self) -> crate::wrapper::expr::SortOptions {
        crate::wrapper::expr::SortOptions {
            descending: self.descending.cst_decode(),
            nulls_last: self.nulls_last.cst_decode(),
            multithreaded: self.multithreaded.cst_decode(),
            maintain_order: self.maintain_order.cst_decode(),
        }
    }
}
impl CstDecode<crate::wrapper::expr::WindowType> for wire_cst_window_type {
    fn cst_decode(self) -> crate::wrapper::expr::WindowType {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Over };
                crate::wrapper::expr::WindowType::Over(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_agg_expr {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: AggExprKind { nil__: () },
        }
    }
}
impl Default for wire_cst_agg_expr {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_data_type {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: DataTypeKind { nil__: () },
        }
    }
}
impl Default for wire_cst_data_type {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_excluded {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: ExcludedKind { nil__: () },
        }
    }
}
impl Default for wire_cst_excluded {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_expr {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: ExprKind { nil__: () },
        }
    }
}
impl Default for wire_cst_expr {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_field {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            dtype: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_field {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_literal_value {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: LiteralValueKind { nil__: () },
        }
    }
}
impl Default for wire_cst_literal_value {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_null_values {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: NullValuesKind { nil__: () },
        }
    }
}
impl Default for wire_cst_null_values {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_string_string {
    fn new_with_null_ptr() -> Self {
        Self {
            field0: core::ptr::null_mut(),
            field1: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_record_string_string {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_row_count {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            offset: Default::default(),
        }
    }
}
impl Default for wire_cst_row_count {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sort_options {
    fn new_with_null_ptr() -> Self {
        Self {
            descending: Default::default(),
            nulls_last: Default::default(),
            multithreaded: Default::default(),
            maintain_order: Default::default(),
        }
    }
}
impl Default for wire_cst_sort_options {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_window_type {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: WindowTypeKind { nil__: () },
        }
    }
}
impl Default for wire_cst_window_type {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_clone(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_clone_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_column(
    that: *const std::ffi::c_void,
    column: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_column_impl(that, column)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_column_at(
    that: *const std::ffi::c_void,
    index: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_column_at_impl(that, index)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_columns(
    that: *const std::ffi::c_void,
    columns: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_columns_impl(that, columns)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_describe(
    port_: i64,
    that: *const std::ffi::c_void,
    percentiles: *mut wire_cst_list_prim_f_64,
) {
    wire_DataFrame_describe_impl(port_, that, percentiles)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_drop(
    that: *const std::ffi::c_void,
    column: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_drop_impl(that, column)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_drop_in_place(
    that: *const std::ffi::c_void,
    column: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_drop_in_place_impl(that, column)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_dtypes(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_dtypes_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_dump(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_dump_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_estimated_size(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_estimated_size_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_get_column_names(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_get_column_names_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_get_columns(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_get_columns_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_get_row(
    that: *const std::ffi::c_void,
    index: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_get_row_impl(that, index)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_head(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_head_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_height(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_height_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_is_empty(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_is_empty_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_iter(port_: i64, that: *const std::ffi::c_void) {
    wire_DataFrame_iter_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_lazy(
    that: *const std::ffi::c_void,
    projection_pushdown: *mut bool,
    predicate_pushdown: *mut bool,
    type_coercion: *mut bool,
    simplify_expressions: *mut bool,
    slice_pushdown: *mut bool,
    streaming: *mut bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_lazy_impl(
        that,
        projection_pushdown,
        predicate_pushdown,
        type_coercion,
        simplify_expressions,
        slice_pushdown,
        streaming,
    )
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_max(port_: i64, that: *const std::ffi::c_void) {
    wire_DataFrame_max_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_of(
    series: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_of_impl(series)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_reverse(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_reverse_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_sample(
    port_: i64,
    that: *const std::ffi::c_void,
    n: *const std::ffi::c_void,
    with_replacement: bool,
    shuffle: bool,
    seed: *mut u64,
) {
    wire_DataFrame_sample_impl(port_, that, n, with_replacement, shuffle, seed)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_schema(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_schema_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_select(
    that: *const std::ffi::c_void,
    columns: *mut wire_cst_list_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_select_impl(that, columns)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_shape(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_shape_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_sort_in_place(
    that: *const std::ffi::c_void,
    by_column: *mut wire_cst_list_String,
    descending: *mut wire_cst_list_bool,
    maintain_order: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_sort_in_place_impl(that, by_column, descending, maintain_order)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_tail(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_tail_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_width(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_width_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_DataFrame_with_row_count(
    that: *const std::ffi::c_void,
    name: *mut wire_cst_list_prim_u_8,
    offset: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_DataFrame_with_row_count_impl(that, name, offset)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_cache(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_cache_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_collect(
    port_: i64,
    that: *const std::ffi::c_void,
    streaming: bool,
) {
    wire_LazyFrame_collect_impl(port_, that, streaming)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_cross_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_cross_join_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_drop_nulls(
    that: *const std::ffi::c_void,
    subset: *mut wire_cst_list_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_drop_nulls_impl(that, subset)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_explode(
    that: *const std::ffi::c_void,
    columns: *mut wire_cst_list_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_explode_impl(that, columns)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_fetch(port_: i64, that: *const std::ffi::c_void, n_rows: usize) {
    wire_LazyFrame_fetch_impl(port_, that, n_rows)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_filter(
    that: *const std::ffi::c_void,
    pred: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_filter_impl(that, pred)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_first(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_first_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_group_by(
    that: *const std::ffi::c_void,
    exprs: *mut wire_cst_list_expr,
    maintain_order: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_group_by_impl(that, exprs, maintain_order)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_inner_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    left_on: *mut wire_cst_expr,
    right_on: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_inner_join_impl(that, other, left_on, right_on)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    on: *mut wire_cst_list_expr,
    left_on: *mut wire_cst_list_expr,
    right_on: *mut wire_cst_list_expr,
    suffix: *mut wire_cst_list_prim_u_8,
    how: i32,
    allow_parallel: bool,
    force_parallel: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_join_impl(
        that,
        other,
        on,
        left_on,
        right_on,
        suffix,
        how,
        allow_parallel,
        force_parallel,
    )
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_last(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_last_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_left_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    left_on: *mut wire_cst_expr,
    right_on: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_left_join_impl(that, other, left_on, right_on)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_limit(
    that: *const std::ffi::c_void,
    n: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_limit_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_max(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_max_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_mean(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_mean_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_median(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_median_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_melt(
    that: *const std::ffi::c_void,
    id_vars: *mut wire_cst_list_String,
    value_vars: *mut wire_cst_list_String,
    variable_name: *mut wire_cst_list_prim_u_8,
    value_name: *mut wire_cst_list_prim_u_8,
    streamable: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_melt_impl(
        that,
        id_vars,
        value_vars,
        variable_name,
        value_name,
        streamable,
    )
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_min(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_min_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_outer_join(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    left_on: *mut wire_cst_expr,
    right_on: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_outer_join_impl(that, other, left_on, right_on)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_quantile(
    that: *const std::ffi::c_void,
    quantile: *mut wire_cst_expr,
    interpol: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_quantile_impl(that, quantile, interpol)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_reverse(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_reverse_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_select(
    that: *const std::ffi::c_void,
    exprs: *mut wire_cst_list_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_select_impl(that, exprs)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_slice(
    that: *const std::ffi::c_void,
    offset: i64,
    len: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_slice_impl(that, offset, len)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_std(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_std_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_sum(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_sum_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_tail(
    that: *const std::ffi::c_void,
    n: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_tail_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_unique(
    that: *const std::ffi::c_void,
    subset: *mut wire_cst_list_String,
    keep_strategy: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_unique_impl(that, subset, keep_strategy)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_variance(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_variance_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_with_column(
    that: *const std::ffi::c_void,
    expr: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_with_column_impl(that, expr)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_with_columns(
    that: *const std::ffi::c_void,
    exprs: *mut wire_cst_list_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_with_columns_impl(that, exprs)
}

#[no_mangle]
pub extern "C" fn wire_LazyFrame_with_row_count(
    that: *const std::ffi::c_void,
    name: *mut wire_cst_list_prim_u_8,
    offset: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyFrame_with_row_count_impl(that, name, offset)
}

#[no_mangle]
pub extern "C" fn wire_read_csv(
    port_: i64,
    path: *mut wire_cst_list_prim_u_8,
    dtypes_slice: *mut wire_cst_list_data_type,
    has_header: *mut bool,
    columns: *mut wire_cst_list_String,
    comment_char: *mut wire_cst_list_prim_u_8,
    eol_char: *mut wire_cst_list_prim_u_8,
    chunk_size: *mut usize,
    sample_size: *mut usize,
    row_count: *mut wire_cst_row_count,
    encoding: *mut i32,
    n_rows: *mut usize,
    n_threads: *mut usize,
    null_values: *mut wire_cst_null_values,
    projection: *mut wire_cst_list_prim_u_32,
    quote_char: *mut wire_cst_list_prim_u_8,
    skip_rows: usize,
    skip_rows_after_header: usize,
    ignore_errors: bool,
    rechunk: bool,
    try_parse_dates: bool,
    low_memory: bool,
) {
    wire_read_csv_impl(
        port_,
        path,
        dtypes_slice,
        has_header,
        columns,
        comment_char,
        eol_char,
        chunk_size,
        sample_size,
        row_count,
        encoding,
        n_rows,
        n_threads,
        null_values,
        projection,
        quote_char,
        skip_rows,
        skip_rows_after_header,
        ignore_errors,
        rechunk,
        try_parse_dates,
        low_memory,
    )
}

#[no_mangle]
pub extern "C" fn wire_read_json(
    port_: i64,
    path: *mut wire_cst_list_prim_u_8,
    batch_size: *mut usize,
    projection: *mut wire_cst_list_String,
) {
    wire_read_json_impl(port_, path, batch_size, projection)
}

#[no_mangle]
pub extern "C" fn wire_scan_csv(
    port_: i64,
    path: *mut wire_cst_list_prim_u_8,
    dtype_overwrite: *const std::ffi::c_void,
    has_header: *mut bool,
    comment_char: *mut wire_cst_list_prim_u_8,
    eol_char: *mut wire_cst_list_prim_u_8,
    quote_char: *mut wire_cst_list_prim_u_8,
    skip_rows: usize,
    skip_rows_after_header: usize,
    row_count: *mut wire_cst_row_count,
    encoding: *mut i32,
    n_rows: *mut usize,
    null_values: *mut wire_cst_null_values,
    ignore_errors: bool,
    rechunk: bool,
    try_parse_dates: bool,
    infer_schema_length: *mut usize,
    cache: bool,
) {
    wire_scan_csv_impl(
        port_,
        path,
        dtype_overwrite,
        has_header,
        comment_char,
        eol_char,
        quote_char,
        skip_rows,
        skip_rows_after_header,
        row_count,
        encoding,
        n_rows,
        null_values,
        ignore_errors,
        rechunk,
        try_parse_dates,
        infer_schema_length,
        cache,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_abs(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_abs_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_all(
    that: *mut wire_cst_expr,
    ignore_nulls: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_all_impl(that, ignore_nulls)
}

#[no_mangle]
pub extern "C" fn wire_Expr_any(
    that: *mut wire_cst_expr,
    ignore_nulls: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_any_impl(that, ignore_nulls)
}

#[no_mangle]
pub extern "C" fn wire_Expr_append(
    that: *mut wire_cst_expr,
    other: *mut wire_cst_expr,
    upcast: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_append_impl(that, other, upcast)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arccos(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arccos_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arccosh(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arccosh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arcsin(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arcsin_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arcsinh(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arcsinh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arctan(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arctan_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arctan2(
    that: *mut wire_cst_expr,
    x: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arctan2_impl(that, x)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arctanh(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arctanh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arg_max(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arg_max_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arg_min(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arg_min_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arg_sort(
    that: *mut wire_cst_expr,
    descending: bool,
    nulls_last: bool,
    multithreaded: bool,
    maintain_order: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arg_sort_impl(that, descending, nulls_last, multithreaded, maintain_order)
}

#[no_mangle]
pub extern "C" fn wire_Expr_arg_unique(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_arg_unique_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_backward_fill(
    that: *mut wire_cst_expr,
    limit: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_backward_fill_impl(that, limit)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cbrt(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cbrt_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_ceil(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_ceil_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_clip(
    that: *mut wire_cst_expr,
    min: *mut wire_cst_expr,
    max: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_clip_impl(that, min, max)
}

#[no_mangle]
pub extern "C" fn wire_Expr_clip_max(
    that: *mut wire_cst_expr,
    max: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_clip_max_impl(that, max)
}

#[no_mangle]
pub extern "C" fn wire_Expr_clip_min(
    that: *mut wire_cst_expr,
    min: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_clip_min_impl(that, min)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cos(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cos_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cosh(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cosh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cot(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cot_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_count(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_count_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_count(
    that: *mut wire_cst_expr,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_count_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_max(
    that: *mut wire_cst_expr,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_max_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_min(
    that: *mut wire_cst_expr,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_min_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_prod(
    that: *mut wire_cst_expr,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_prod_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_cum_sum(
    that: *mut wire_cst_expr,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_cum_sum_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Expr_degrees(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_degrees_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_div(
    that: *mut wire_cst_expr,
    other: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_div_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_dot(
    that: *mut wire_cst_expr,
    other: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_dot_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_drop_nans(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_drop_nans_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_drop_nulls(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_drop_nulls_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_entropy(
    that: *mut wire_cst_expr,
    base: f64,
    normalize: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_entropy_impl(that, base, normalize)
}

#[no_mangle]
pub extern "C" fn wire_Expr_exp(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_exp_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_fill_nan(
    that: *mut wire_cst_expr,
    value: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_fill_nan_impl(that, value)
}

#[no_mangle]
pub extern "C" fn wire_Expr_fill_null(
    that: *mut wire_cst_expr,
    value: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_fill_null_impl(that, value)
}

#[no_mangle]
pub extern "C" fn wire_Expr_floor(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_floor_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_forward_fill(
    that: *mut wire_cst_expr,
    limit: *mut u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_forward_fill_impl(that, limit)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_finite(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_finite_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_in(
    that: *mut wire_cst_expr,
    other: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_in_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_nan(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_nan_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_not_nan(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_not_nan_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_not_null(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_not_null_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_is_null(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_is_null_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_log(
    that: *mut wire_cst_expr,
    base: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_log_impl(that, base)
}

#[no_mangle]
pub extern "C" fn wire_Expr_log1p(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_log1p_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_lower_bound(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_lower_bound_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_not(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_not_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_null_count(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_null_count_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_pow(
    that: *mut wire_cst_expr,
    exponent: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_pow_impl(that, exponent)
}

#[no_mangle]
pub extern "C" fn wire_Expr_product(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_product_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_radians(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_radians_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_reshape(
    that: *mut wire_cst_expr,
    dims: *mut wire_cst_list_prim_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_reshape_impl(that, dims)
}

#[no_mangle]
pub extern "C" fn wire_Expr_reverse(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_reverse_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_max(
    that: *mut wire_cst_expr,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_max_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_mean(
    that: *mut wire_cst_expr,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_mean_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_median(
    that: *mut wire_cst_expr,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_median_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_min(
    that: *mut wire_cst_expr,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_min_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_quantile(
    that: *mut wire_cst_expr,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_quantile_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_std(
    that: *mut wire_cst_expr,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_std_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_sum(
    that: *mut wire_cst_expr,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_sum_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_rolling_var(
    that: *mut wire_cst_expr,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_u_8,
    closed_window: *mut i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_rolling_var_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
    )
}

#[no_mangle]
pub extern "C" fn wire_Expr_round(
    that: *mut wire_cst_expr,
    decimals: u32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_round_impl(that, decimals)
}

#[no_mangle]
pub extern "C" fn wire_Expr_round_sig_figs(
    that: *mut wire_cst_expr,
    digits: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_round_sig_figs_impl(that, digits)
}

#[no_mangle]
pub extern "C" fn wire_Expr_set_sorted_flag(
    that: *mut wire_cst_expr,
    sorted: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_set_sorted_flag_impl(that, sorted)
}

#[no_mangle]
pub extern "C" fn wire_Expr_shift(
    that: *mut wire_cst_expr,
    n: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_shift_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_Expr_shift_and_fill(
    that: *mut wire_cst_expr,
    n: *mut wire_cst_expr,
    fill_value: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_shift_and_fill_impl(that, n, fill_value)
}

#[no_mangle]
pub extern "C" fn wire_Expr_shrink_dtype(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_shrink_dtype_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_sin(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_sin_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_sinh(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_sinh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_sqrt(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_sqrt_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_tan(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_tan_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_tanh(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_tanh_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_to_dot(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_to_dot_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_to_physical(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_to_physical_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_unique(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_unique_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_unique_stable(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_unique_stable_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_upper_bound(
    that: *mut wire_cst_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_upper_bound_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Expr_value_counts(
    that: *mut wire_cst_expr,
    sort: bool,
    parallel: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Expr_value_counts_impl(that, sort, parallel)
}

#[no_mangle]
pub extern "C" fn wire_LazyGroupBy_agg(
    that: *const std::ffi::c_void,
    exprs: *mut wire_cst_list_expr,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyGroupBy_agg_impl(that, exprs)
}

#[no_mangle]
pub extern "C" fn wire_LazyGroupBy_head(
    that: *const std::ffi::c_void,
    n: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyGroupBy_head_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_LazyGroupBy_tail(
    that: *const std::ffi::c_void,
    n: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_LazyGroupBy_tail_impl(that, n)
}

#[no_mangle]
pub extern "C" fn wire_Schema_of(
    fields: *mut wire_cst_list_field,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Schema_of_impl(fields)
}

#[no_mangle]
pub extern "C" fn wire_Series_add_to(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_add_to_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_append(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_append_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_apply_scalar(
    that: *const std::ffi::c_void,
    op: i32,
    value: f64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_apply_scalar_impl(that, op, value)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_doubles(port_: i64, that: *const std::ffi::c_void, strict: bool) {
    wire_Series_as_doubles_impl(port_, that, strict)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_durations(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_durations_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_ints(
    that: *const std::ffi::c_void,
    strict: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_ints_impl(that, strict)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_local_datetime(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_local_datetime_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_naive_datetime(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_naive_datetime_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_strings(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_strings_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_as_utc_datetime(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_as_utc_datetime_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_cast(
    that: *const std::ffi::c_void,
    dtype: *mut wire_cst_data_type,
    strict: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_cast_impl(that, dtype, strict)
}

#[no_mangle]
pub extern "C" fn wire_Series_divide(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_divide_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_dump(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_dump_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_equal(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
    ignore_null: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_equal_impl(that, other, ignore_null)
}

#[no_mangle]
pub extern "C" fn wire_Series_estimated_size(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_estimated_size_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_explode(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_explode_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_explode_by_offsets(
    that: *const std::ffi::c_void,
    offsets: *mut wire_cst_list_prim_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_explode_by_offsets_impl(that, offsets)
}

#[no_mangle]
pub extern "C" fn wire_Series_get(
    that: *const std::ffi::c_void,
    index: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_get_impl(that, index)
}

#[no_mangle]
pub extern "C" fn wire_Series_get_string(
    that: *const std::ffi::c_void,
    index: usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_get_string_impl(that, index)
}

#[no_mangle]
pub extern "C" fn wire_Series_head(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_head_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_Series_into_frame(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_into_frame_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_into_literal(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_into_literal_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_is_bool(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_is_bool_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_is_numeric(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_is_numeric_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_is_temporal(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_is_temporal_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_is_utf8(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_is_utf8_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_iter(port_: i64, that: *const std::ffi::c_void) {
    wire_Series_iter_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn wire_Series_max(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_max_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_mean(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_mean_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_mean_as_series(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_mean_as_series_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_median(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_median_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_median_as_series(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_median_as_series_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_min(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_min_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_multiply(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_multiply_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_bools(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_box_autoadd_bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_bools_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_doubles(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_box_autoadd_f_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_doubles_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_durations(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_box_autoadd_Chrono_Duration,
    unit: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_durations_impl(name, values, unit)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_i32(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_box_autoadd_i_32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_i32_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_ints(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_box_autoadd_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_ints_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_of_strings(
    name: *mut wire_cst_list_prim_u_8,
    values: *mut wire_cst_list_opt_String,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_of_strings_impl(name, values)
}

#[no_mangle]
pub extern "C" fn wire_Series_product(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_product_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_remainder(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_remainder_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_rename(
    that: *const std::ffi::c_void,
    name: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rename_impl(that, name)
}

#[no_mangle]
pub extern "C" fn wire_Series_reshape(
    that: *const std::ffi::c_void,
    dims: *mut wire_cst_list_prim_i_64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_reshape_impl(that, dims)
}

#[no_mangle]
pub extern "C" fn wire_Series_rolling_max(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_i_64,
    closed_window: *mut i32,
    time_unit: *mut i32,
    timezone: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rolling_max_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
        time_unit,
        timezone,
    )
}

#[no_mangle]
pub extern "C" fn wire_Series_rolling_mean(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_i_64,
    closed_window: *mut i32,
    time_unit: *mut i32,
    timezone: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rolling_mean_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
        time_unit,
        timezone,
    )
}

#[no_mangle]
pub extern "C" fn wire_Series_rolling_median(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_i_64,
    closed_window: *mut i32,
    time_unit: *mut i32,
    timezone: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rolling_median_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
        time_unit,
        timezone,
    )
}

#[no_mangle]
pub extern "C" fn wire_Series_rolling_min(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_i_64,
    closed_window: *mut i32,
    time_unit: *mut i32,
    timezone: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rolling_min_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
        time_unit,
        timezone,
    )
}

#[no_mangle]
pub extern "C" fn wire_Series_rolling_quantile(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_i_64,
    closed_window: *mut i32,
    time_unit: *mut i32,
    timezone: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rolling_quantile_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
        time_unit,
        timezone,
    )
}

#[no_mangle]
pub extern "C" fn wire_Series_rolling_std(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_i_64,
    closed_window: *mut i32,
    time_unit: *mut i32,
    timezone: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rolling_std_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
        time_unit,
        timezone,
    )
}

#[no_mangle]
pub extern "C" fn wire_Series_rolling_sum(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_i_64,
    closed_window: *mut i32,
    time_unit: *mut i32,
    timezone: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rolling_sum_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
        time_unit,
        timezone,
    )
}

#[no_mangle]
pub extern "C" fn wire_Series_rolling_var(
    that: *const std::ffi::c_void,
    window_size: *mut i64,
    min_periods: usize,
    weights: *mut wire_cst_list_prim_f_64,
    center: bool,
    by: *mut wire_cst_list_prim_i_64,
    closed_window: *mut i32,
    time_unit: *mut i32,
    timezone: *mut wire_cst_list_prim_u_8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_rolling_var_impl(
        that,
        window_size,
        min_periods,
        weights,
        center,
        by,
        closed_window,
        time_unit,
        timezone,
    )
}

#[no_mangle]
pub extern "C" fn wire_Series_shuffle(
    that: *const std::ffi::c_void,
    seed: *mut u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_shuffle_impl(that, seed)
}

#[no_mangle]
pub extern "C" fn wire_Series_sort(
    that: *const std::ffi::c_void,
    reverse: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_sort_impl(that, reverse)
}

#[no_mangle]
pub extern "C" fn wire_Series_std_as_series(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_std_as_series_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn wire_Series_subtract(
    that: *const std::ffi::c_void,
    other: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_subtract_impl(that, other)
}

#[no_mangle]
pub extern "C" fn wire_Series_sum(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_sum_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_sum_as_series(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_sum_as_series_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_tail(
    that: *const std::ffi::c_void,
    length: *mut usize,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_tail_impl(that, length)
}

#[no_mangle]
pub extern "C" fn wire_Series_to_list(
    that: *const std::ffi::c_void,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_to_list_impl(that)
}

#[no_mangle]
pub extern "C" fn wire_Series_unique(
    that: *const std::ffi::c_void,
    maintain_order: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_unique_impl(that, maintain_order)
}

#[no_mangle]
pub extern "C" fn wire_Series_var_as_series(
    that: *const std::ffi::c_void,
    ddof: u8,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire_Series_var_as_series_impl(that, ddof)
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_AssertUnwindSafePExpr(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            AssertUnwindSafe<PExpr>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafePExpr(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            AssertUnwindSafe<PExpr>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            AssertUnwindSafe<SpecialEq<PSeries>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            AssertUnwindSafe<SpecialEq<PSeries>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockDataFrame(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<DataFrame>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFrame(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<DataFrame>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyFrame(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<LazyFrame>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFrame(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<LazyFrame>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<LazyGroupBy>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<LazyGroupBy>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionSchema(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Option<Schema>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchema(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Option<Schema>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Option<Vec<Series>>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Option<Vec<Series>>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSchema(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Schema>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchema(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Schema>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Series>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Series>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<Vec<Series>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeries(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<Vec<Series>>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_Chrono_Duration(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_agg_expr() -> *mut wire_cst_agg_expr {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_agg_expr::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_bool(value: bool) -> *mut bool {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_closed_window(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_csv_encoding(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_data_type() -> *mut wire_cst_data_type {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_data_type::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_expr() -> *mut wire_cst_expr {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_expr::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_f_64(value: f64) -> *mut f64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_32(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_i_64(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_literal_value() -> *mut wire_cst_literal_value {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_literal_value::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_null_values() -> *mut wire_cst_null_values {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_null_values::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_row_count() -> *mut wire_cst_row_count {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_row_count::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_sort_options() -> *mut wire_cst_sort_options {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_sort_options::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_time_unit(value: i32) -> *mut i32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_usize(value: usize) -> *mut usize {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_window_type() -> *mut wire_cst_window_type {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_window_type::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_data_type() -> *mut wire_cst_data_type {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_data_type::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_expr() -> *mut wire_cst_expr {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_expr::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_list_String(len: i32) -> *mut wire_cst_list_String {
    let wrap = wire_cst_list_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_bool(len: i32) -> *mut wire_cst_list_bool {
    let wrap = wire_cst_list_bool {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_data_type(len: i32) -> *mut wire_cst_list_data_type {
    let wrap = wire_cst_list_data_type {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_data_type>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_excluded(len: i32) -> *mut wire_cst_list_excluded {
    let wrap = wire_cst_list_excluded {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_excluded>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_expr(len: i32) -> *mut wire_cst_list_expr {
    let wrap = wire_cst_list_expr {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_expr>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_field(len: i32) -> *mut wire_cst_list_field {
    let wrap = wire_cst_list_field {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_field>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_String(len: i32) -> *mut wire_cst_list_opt_String {
    let wrap = wire_cst_list_opt_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_Chrono_Duration(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_Chrono_Duration {
    let wrap = wire_cst_list_opt_box_autoadd_Chrono_Duration {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_bool(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_bool {
    let wrap = wire_cst_list_opt_box_autoadd_bool {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_f_64(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_f_64 {
    let wrap = wire_cst_list_opt_box_autoadd_f_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_i_32(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_i_32 {
    let wrap = wire_cst_list_opt_box_autoadd_i_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_opt_box_autoadd_i_64(
    len: i32,
) -> *mut wire_cst_list_opt_box_autoadd_i_64 {
    let wrap = wire_cst_list_opt_box_autoadd_i_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(core::ptr::null_mut(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_f_64(len: i32) -> *mut wire_cst_list_prim_f_64 {
    let ans = wire_cst_list_prim_f_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_i_64(len: i32) -> *mut wire_cst_list_prim_i_64 {
    let ans = wire_cst_list_prim_i_64 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_32(len: i32) -> *mut wire_cst_list_prim_u_32 {
    let ans = wire_cst_list_prim_u_32 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_8(len: i32) -> *mut wire_cst_list_prim_u_8 {
    let ans = wire_cst_list_prim_u_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_new_list_record_string_string(
    len: i32,
) -> *mut wire_cst_list_record_string_string {
    let wrap = wire_cst_list_record_string_string {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_record_string_string>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_agg_expr {
    tag: i32,
    kind: AggExprKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union AggExprKind {
    Min: wire_cst_AggExpr_Min,
    Max: wire_cst_AggExpr_Max,
    Median: wire_cst_AggExpr_Median,
    NUnique: wire_cst_AggExpr_NUnique,
    First: wire_cst_AggExpr_First,
    Last: wire_cst_AggExpr_Last,
    Mean: wire_cst_AggExpr_Mean,
    Implode: wire_cst_AggExpr_Implode,
    Count: wire_cst_AggExpr_Count,
    Quantile: wire_cst_AggExpr_Quantile,
    Sum: wire_cst_AggExpr_Sum,
    AggGroups: wire_cst_AggExpr_AggGroups,
    Std: wire_cst_AggExpr_Std,
    Var: wire_cst_AggExpr_Var,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Min {
    input: *mut wire_cst_expr,
    propagate_nans: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Max {
    input: *mut wire_cst_expr,
    propagate_nans: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Median {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_NUnique {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_First {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Last {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Mean {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Implode {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Count {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Quantile {
    expr: *mut wire_cst_expr,
    quantile: *mut wire_cst_expr,
    interpol: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Sum {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_AggGroups {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Std {
    field0: *mut wire_cst_expr,
    field1: u8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AggExpr_Var {
    field0: *mut wire_cst_expr,
    field1: u8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_data_type {
    tag: i32,
    kind: DataTypeKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union DataTypeKind {
    Datetime: wire_cst_DataType_Datetime,
    Duration: wire_cst_DataType_Duration,
    List: wire_cst_DataType_List,
    Struct: wire_cst_DataType_Struct,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_DataType_Datetime {
    field0: i32,
    field1: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_DataType_Duration {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_DataType_List {
    field0: *mut wire_cst_data_type,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_DataType_Struct {
    field0: *mut wire_cst_list_field,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_excluded {
    tag: i32,
    kind: ExcludedKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union ExcludedKind {
    Name: wire_cst_Excluded_Name,
    Dtype: wire_cst_Excluded_Dtype,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Excluded_Name {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Excluded_Dtype {
    field0: *mut wire_cst_data_type,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_expr {
    tag: i32,
    kind: ExprKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union ExprKind {
    Alias: wire_cst_Expr_Alias,
    Column: wire_cst_Expr_Column,
    Columns: wire_cst_Expr_Columns,
    DtypeColumn: wire_cst_Expr_DtypeColumn,
    Literal: wire_cst_Expr_Literal,
    BinaryExpr: wire_cst_Expr_BinaryExpr,
    Cast: wire_cst_Expr_Cast,
    Sort: wire_cst_Expr_Sort,
    Gather: wire_cst_Expr_Gather,
    SortBy: wire_cst_Expr_SortBy,
    Agg: wire_cst_Expr_Agg,
    Ternary: wire_cst_Expr_Ternary,
    Explode: wire_cst_Expr_Explode,
    Filter: wire_cst_Expr_Filter,
    Window: wire_cst_Expr_Window,
    Slice: wire_cst_Expr_Slice,
    Exclude: wire_cst_Expr_Exclude,
    KeepName: wire_cst_Expr_KeepName,
    Nth: wire_cst_Expr_Nth,
    Internal: wire_cst_Expr_Internal,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Alias {
    field0: *mut wire_cst_expr,
    field1: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Column {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Columns {
    field0: *mut wire_cst_list_String,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_DtypeColumn {
    field0: *mut wire_cst_list_data_type,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Literal {
    field0: *mut wire_cst_literal_value,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_BinaryExpr {
    left: *mut wire_cst_expr,
    op: i32,
    right: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Cast {
    expr: *mut wire_cst_expr,
    data_type: *mut wire_cst_data_type,
    strict: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Sort {
    expr: *mut wire_cst_expr,
    options: *mut wire_cst_sort_options,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Gather {
    expr: *mut wire_cst_expr,
    idx: *mut wire_cst_expr,
    returns_scalar: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_SortBy {
    expr: *mut wire_cst_expr,
    by: *mut wire_cst_list_expr,
    descending: *mut wire_cst_list_bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Agg {
    field0: *mut wire_cst_agg_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Ternary {
    predicate: *mut wire_cst_expr,
    truthy: *mut wire_cst_expr,
    falsy: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Explode {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Filter {
    input: *mut wire_cst_expr,
    by: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Window {
    function: *mut wire_cst_expr,
    partition_by: *mut wire_cst_list_expr,
    options: *mut wire_cst_window_type,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Slice {
    input: *mut wire_cst_expr,
    offset: *mut wire_cst_expr,
    length: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Exclude {
    field0: *mut wire_cst_expr,
    field1: *mut wire_cst_list_excluded,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_KeepName {
    field0: *mut wire_cst_expr,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Nth {
    field0: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_Expr_Internal {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_field {
    name: *mut wire_cst_list_prim_u_8,
    dtype: *mut wire_cst_data_type,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_String {
    ptr: *mut *mut wire_cst_list_prim_u_8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_bool {
    ptr: *mut bool,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_data_type {
    ptr: *mut wire_cst_data_type,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_excluded {
    ptr: *mut wire_cst_excluded,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_expr {
    ptr: *mut wire_cst_expr,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_field {
    ptr: *mut wire_cst_field,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_String {
    ptr: *mut *mut wire_cst_list_prim_u_8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_Chrono_Duration {
    ptr: *mut *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_bool {
    ptr: *mut *mut bool,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_f_64 {
    ptr: *mut *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_i_32 {
    ptr: *mut *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opt_box_autoadd_i_64 {
    ptr: *mut *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_f_64 {
    ptr: *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_i_64 {
    ptr: *mut i64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_32 {
    ptr: *mut u32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8 {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_record_string_string {
    ptr: *mut wire_cst_record_string_string,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_literal_value {
    tag: i32,
    kind: LiteralValueKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union LiteralValueKind {
    Boolean: wire_cst_LiteralValue_Boolean,
    Utf8: wire_cst_LiteralValue_Utf8,
    Binary: wire_cst_LiteralValue_Binary,
    Uint32: wire_cst_LiteralValue_Uint32,
    Uint64: wire_cst_LiteralValue_Uint64,
    Int32: wire_cst_LiteralValue_Int32,
    Int64: wire_cst_LiteralValue_Int64,
    Float32: wire_cst_LiteralValue_Float32,
    Float64: wire_cst_LiteralValue_Float64,
    Range: wire_cst_LiteralValue_Range,
    DateTime: wire_cst_LiteralValue_DateTime,
    Duration: wire_cst_LiteralValue_Duration,
    Series: wire_cst_LiteralValue_Series,
    Date: wire_cst_LiteralValue_Date,
    Time: wire_cst_LiteralValue_Time,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Boolean {
    field0: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Utf8 {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Binary {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Uint32 {
    field0: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Uint64 {
    field0: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Int32 {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Int64 {
    field0: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Float32 {
    field0: f32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Float64 {
    field0: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Range {
    low: i64,
    high: i64,
    data_type: *mut wire_cst_data_type,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_DateTime {
    field0: i64,
    field1: i32,
    field2: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Duration {
    field0: i64,
    field1: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Series {
    field0: *const std::ffi::c_void,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Date {
    field0: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LiteralValue_Time {
    field0: i64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_null_values {
    tag: i32,
    kind: NullValuesKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union NullValuesKind {
    AllColumnsSingle: wire_cst_NullValues_AllColumnsSingle,
    AllColumns: wire_cst_NullValues_AllColumns,
    Named: wire_cst_NullValues_Named,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_NullValues_AllColumnsSingle {
    field0: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_NullValues_AllColumns {
    field0: *mut wire_cst_list_String,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_NullValues_Named {
    field0: *mut wire_cst_list_record_string_string,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_string_string {
    field0: *mut wire_cst_list_prim_u_8,
    field1: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_row_count {
    name: *mut wire_cst_list_prim_u_8,
    offset: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_sort_options {
    descending: bool,
    nulls_last: bool,
    multithreaded: bool,
    maintain_order: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_window_type {
    tag: i32,
    kind: WindowTypeKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union WindowTypeKind {
    Over: wire_cst_WindowType_Over,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_WindowType_Over {
    field0: i32,
}
