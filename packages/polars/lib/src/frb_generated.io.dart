// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.6.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'wrapper/df.dart';
import 'wrapper/entry.dart';
import 'wrapper/expr.dart';
import 'wrapper/series.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SpecialEqPSeriesPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeriesPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DataFramePtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFramePtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ExprPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockExprPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LazyFramePtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFramePtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LazyGroupByPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupByPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OptionSchemaPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchemaPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OptionVecExprPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecExprPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OptionVecSeriesPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeriesPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SchemaPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchemaPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SeriesPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeriesPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VecExprPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecExprPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VecSeriesPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeriesPtr;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  DataFrame dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame(
      dynamic raw);

  @protected
  Expr dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(dynamic raw);

  @protected
  LazyFrame dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(
      dynamic raw);

  @protected
  LazyGroupBy dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(
      dynamic raw);

  @protected
  Schema dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSchema(dynamic raw);

  @protected
  Series dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(dynamic raw);

  @protected
  VecSeries dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockVecSeries(
      dynamic raw);

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw);

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw);

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw);

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw);

  @protected
  SpecialEqPSeries dco_decode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      dynamic raw);

  @protected
  DataFrame dco_decode_RustOpaque_stdsyncRwLockDataFrame(dynamic raw);

  @protected
  Expr dco_decode_RustOpaque_stdsyncRwLockExpr(dynamic raw);

  @protected
  LazyFrame dco_decode_RustOpaque_stdsyncRwLockLazyFrame(dynamic raw);

  @protected
  LazyGroupBy dco_decode_RustOpaque_stdsyncRwLockLazyGroupBy(dynamic raw);

  @protected
  Schema dco_decode_RustOpaque_stdsyncRwLockSchema(dynamic raw);

  @protected
  Series dco_decode_RustOpaque_stdsyncRwLockSeries(dynamic raw);

  @protected
  VecSeries dco_decode_RustOpaque_stdsyncRwLockVecSeries(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Duration dco_decode_box_autoadd_Chrono_Duration(dynamic raw);

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Local(dynamic raw);

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Naive(dynamic raw);

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw);

  @protected
  DataType dco_decode_box_autoadd_data_type(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw);

  @protected
  int dco_decode_box_autoadd_i_64(dynamic raw);

  @protected
  DataType dco_decode_box_data_type(dynamic raw);

  @protected
  dynamic dco_decode_dartabi(dynamic raw);

  @protected
  DataType dco_decode_data_type(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  Field dco_decode_field(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<dynamic> dco_decode_list_dartabi(dynamic raw);

  @protected
  List<DataType> dco_decode_list_data_type(dynamic raw);

  @protected
  List<Field> dco_decode_list_field(dynamic raw);

  @protected
  List<String?> dco_decode_list_opt_String(dynamic raw);

  @protected
  List<Duration?> dco_decode_list_opt_box_autoadd_Chrono_Duration(dynamic raw);

  @protected
  List<DateTime?> dco_decode_list_opt_box_autoadd_Chrono_Local(dynamic raw);

  @protected
  List<DateTime?> dco_decode_list_opt_box_autoadd_Chrono_Naive(dynamic raw);

  @protected
  List<DateTime?> dco_decode_list_opt_box_autoadd_Chrono_Utc(dynamic raw);

  @protected
  List<double?> dco_decode_list_opt_box_autoadd_f_64(dynamic raw);

  @protected
  List<int?> dco_decode_list_opt_box_autoadd_i_64(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw);

  @protected
  LiteralValue dco_decode_literal_value(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  Duration? dco_decode_opt_box_autoadd_Chrono_Duration(dynamic raw);

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Local(dynamic raw);

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Naive(dynamic raw);

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_i_64(dynamic raw);

  @protected
  (int, int) dco_decode_record_usize_usize(dynamic raw);

  @protected
  TimeUnit dco_decode_time_unit(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  DataFrame sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame(
      SseDeserializer deserializer);

  @protected
  Expr sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(
      SseDeserializer deserializer);

  @protected
  LazyFrame sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(
      SseDeserializer deserializer);

  @protected
  LazyGroupBy sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(
      SseDeserializer deserializer);

  @protected
  Schema sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockSchema(
      SseDeserializer deserializer);

  @protected
  Series sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(
      SseDeserializer deserializer);

  @protected
  VecSeries sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockVecSeries(
      SseDeserializer deserializer);

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer);

  @protected
  SpecialEqPSeries sse_decode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      SseDeserializer deserializer);

  @protected
  DataFrame sse_decode_RustOpaque_stdsyncRwLockDataFrame(
      SseDeserializer deserializer);

  @protected
  Expr sse_decode_RustOpaque_stdsyncRwLockExpr(SseDeserializer deserializer);

  @protected
  LazyFrame sse_decode_RustOpaque_stdsyncRwLockLazyFrame(
      SseDeserializer deserializer);

  @protected
  LazyGroupBy sse_decode_RustOpaque_stdsyncRwLockLazyGroupBy(
      SseDeserializer deserializer);

  @protected
  Schema sse_decode_RustOpaque_stdsyncRwLockSchema(
      SseDeserializer deserializer);

  @protected
  Series sse_decode_RustOpaque_stdsyncRwLockSeries(
      SseDeserializer deserializer);

  @protected
  VecSeries sse_decode_RustOpaque_stdsyncRwLockVecSeries(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Duration sse_decode_box_autoadd_Chrono_Duration(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Local(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Naive(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer);

  @protected
  DataType sse_decode_box_autoadd_data_type(SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  DataType sse_decode_box_data_type(SseDeserializer deserializer);

  @protected
  dynamic sse_decode_dartabi(SseDeserializer deserializer);

  @protected
  DataType sse_decode_data_type(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  Field sse_decode_field(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<dynamic> sse_decode_list_dartabi(SseDeserializer deserializer);

  @protected
  List<DataType> sse_decode_list_data_type(SseDeserializer deserializer);

  @protected
  List<Field> sse_decode_list_field(SseDeserializer deserializer);

  @protected
  List<String?> sse_decode_list_opt_String(SseDeserializer deserializer);

  @protected
  List<Duration?> sse_decode_list_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer);

  @protected
  List<DateTime?> sse_decode_list_opt_box_autoadd_Chrono_Local(
      SseDeserializer deserializer);

  @protected
  List<DateTime?> sse_decode_list_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer);

  @protected
  List<DateTime?> sse_decode_list_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer);

  @protected
  List<double?> sse_decode_list_opt_box_autoadd_f_64(
      SseDeserializer deserializer);

  @protected
  List<int?> sse_decode_list_opt_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer);

  @protected
  LiteralValue sse_decode_literal_value(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  Duration? sse_decode_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer);

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Local(
      SseDeserializer deserializer);

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer);

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  (int, int) sse_decode_record_usize_usize(SseDeserializer deserializer);

  @protected
  TimeUnit sse_decode_time_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  int cst_encode_Chrono_Duration(Duration raw) {
    return cst_encode_i_64(raw.inMicroseconds);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_String(String raw) {
    return cst_encode_list_prim_u_8(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_box_autoadd_Chrono_Duration(Duration raw) {
    return wire
        .cst_new_box_autoadd_Chrono_Duration(cst_encode_Chrono_Duration(raw));
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_box_autoadd_bool(bool raw) {
    return wire.cst_new_box_autoadd_bool(cst_encode_bool(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_closed_window(
      ClosedWindow raw) {
    return wire
        .cst_new_box_autoadd_closed_window(cst_encode_closed_window(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_csv_encoding(CsvEncoding raw) {
    return wire.cst_new_box_autoadd_csv_encoding(cst_encode_csv_encoding(raw));
  }

  @protected
  ffi.Pointer<wire_cst_data_type> cst_encode_box_autoadd_data_type(
      DataType raw) {
    final ptr = wire.cst_new_box_autoadd_data_type();
    cst_api_fill_to_wire_data_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Double> cst_encode_box_autoadd_f_64(double raw) {
    return wire.cst_new_box_autoadd_f_64(cst_encode_f_64(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_i_32(int raw) {
    return wire.cst_new_box_autoadd_i_32(cst_encode_i_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_box_autoadd_i_64(int raw) {
    return wire.cst_new_box_autoadd_i_64(cst_encode_i_64(raw));
  }

  @protected
  ffi.Pointer<wire_cst_literal_value> cst_encode_box_autoadd_literal_value(
      LiteralValue raw) {
    final ptr = wire.cst_new_box_autoadd_literal_value();
    cst_api_fill_to_wire_literal_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_null_values> cst_encode_box_autoadd_null_values(
      NullValues raw) {
    final ptr = wire.cst_new_box_autoadd_null_values();
    cst_api_fill_to_wire_null_values(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_quantile_interpol_options(
      QuantileInterpolOptions raw) {
    return wire.cst_new_box_autoadd_quantile_interpol_options(
        cst_encode_quantile_interpol_options(raw));
  }

  @protected
  ffi.Pointer<wire_cst_row_count> cst_encode_box_autoadd_row_count(
      RowCount raw) {
    final ptr = wire.cst_new_box_autoadd_row_count();
    cst_api_fill_to_wire_row_count(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_time_unit(TimeUnit raw) {
    return wire.cst_new_box_autoadd_time_unit(cst_encode_time_unit(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_box_autoadd_u_32(int raw) {
    return wire.cst_new_box_autoadd_u_32(cst_encode_u_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(int raw) {
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  ffi.Pointer<ffi.UintPtr> cst_encode_box_autoadd_usize(int raw) {
    return wire.cst_new_box_autoadd_usize(cst_encode_usize(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_window_mapping(
      WindowMapping raw) {
    return wire
        .cst_new_box_autoadd_window_mapping(cst_encode_window_mapping(raw));
  }

  @protected
  ffi.Pointer<wire_cst_data_type> cst_encode_box_data_type(DataType raw) {
    final ptr = wire.cst_new_box_data_type();
    cst_api_fill_to_wire_data_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  int cst_encode_i_64(int raw) {
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_list_String(List<String> raw) {
    final ans = wire.cst_new_list_String(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_bool> cst_encode_list_bool(List<bool> raw) {
    final ans = wire.cst_new_list_bool(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_bool(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_data_type> cst_encode_list_data_type(
      List<DataType> raw) {
    final ans = wire.cst_new_list_data_type(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_data_type(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_field> cst_encode_list_field(List<Field> raw) {
    final ans = wire.cst_new_list_field(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_field(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_String> cst_encode_list_opt_String(
      List<String?> raw) {
    final ans = wire.cst_new_list_opt_String(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>
      cst_encode_list_opt_box_autoadd_Chrono_Duration(List<Duration?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_Chrono_Duration(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_Chrono_Duration(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_bool>
      cst_encode_list_opt_box_autoadd_bool(List<bool?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_bool(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_bool(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>
      cst_encode_list_opt_box_autoadd_f_64(List<double?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_f_64(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_f_64(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>
      cst_encode_list_opt_box_autoadd_i_32(List<int?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_i_32(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_i_32(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>
      cst_encode_list_opt_box_autoadd_i_64(List<int?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_i_64(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_i_64(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_f_64> cst_encode_list_prim_f_64(
      Float64List raw) {
    final ans = wire.cst_new_list_prim_f_64(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_i_64> cst_encode_list_prim_i_64(
      Int64List raw) {
    final ans = wire.cst_new_list_prim_i_64(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw.inner);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_32> cst_encode_list_prim_u_32(
      Uint32List raw) {
    final ans = wire.cst_new_list_prim_u_32(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_list_prim_u_8(Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_record_string_string>
      cst_encode_list_record_string_string(List<(String, String)> raw) {
    final ans = wire.cst_new_list_record_string_string(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_record_string_string(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_opt_box_autoadd_Chrono_Duration(
      Duration? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_closed_window(
      ClosedWindow? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_closed_window(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_csv_encoding(
      CsvEncoding? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_csv_encoding(raw);
  }

  @protected
  ffi.Pointer<ffi.Double> cst_encode_opt_box_autoadd_f_64(double? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_f_64(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_i_32(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_i_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_opt_box_autoadd_i_64(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_i_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_null_values> cst_encode_opt_box_autoadd_null_values(
      NullValues? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_null_values(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_quantile_interpol_options(
      QuantileInterpolOptions? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_quantile_interpol_options(raw);
  }

  @protected
  ffi.Pointer<wire_cst_row_count> cst_encode_opt_box_autoadd_row_count(
      RowCount? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_row_count(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_time_unit(TimeUnit? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_time_unit(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_opt_box_autoadd_u_32(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  ffi.Pointer<ffi.UintPtr> cst_encode_opt_box_autoadd_usize(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_usize(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_window_mapping(
      WindowMapping? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_window_mapping(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_opt_list_String(
      List<String>? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_data_type> cst_encode_opt_list_data_type(
      List<DataType>? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_data_type(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_String> cst_encode_opt_list_opt_String(
      List<String?>? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_opt_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>
      cst_encode_opt_list_opt_box_autoadd_Chrono_Duration(
          List<Duration?>? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_list_opt_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_bool>
      cst_encode_opt_list_opt_box_autoadd_bool(List<bool?>? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_list_opt_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>
      cst_encode_opt_list_opt_box_autoadd_f_64(List<double?>? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_list_opt_box_autoadd_f_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>
      cst_encode_opt_list_opt_box_autoadd_i_32(List<int?>? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_list_opt_box_autoadd_i_32(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>
      cst_encode_opt_list_opt_box_autoadd_i_64(List<int?>? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_list_opt_box_autoadd_i_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_f_64> cst_encode_opt_list_prim_f_64(
      Float64List? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_prim_f_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_i_64> cst_encode_opt_list_prim_i_64(
      Int64List? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_prim_i_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_32> cst_encode_opt_list_prim_u_32(
      Uint32List? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_prim_u_32(raw);
  }

  @protected
  int cst_encode_u_64(int raw) {
    return raw.toInt();
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_data_type(
      DataType apiObj, ffi.Pointer<wire_cst_data_type> wireObj) {
    cst_api_fill_to_wire_data_type(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_literal_value(
      LiteralValue apiObj, ffi.Pointer<wire_cst_literal_value> wireObj) {
    cst_api_fill_to_wire_literal_value(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_null_values(
      NullValues apiObj, ffi.Pointer<wire_cst_null_values> wireObj) {
    cst_api_fill_to_wire_null_values(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_row_count(
      RowCount apiObj, ffi.Pointer<wire_cst_row_count> wireObj) {
    cst_api_fill_to_wire_row_count(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_data_type(
      DataType apiObj, ffi.Pointer<wire_cst_data_type> wireObj) {
    cst_api_fill_to_wire_data_type(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_data_type(
      DataType apiObj, wire_cst_data_type wireObj) {
    if (apiObj is DataType_Boolean) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DataType_UInt8) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DataType_UInt16) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is DataType_UInt32) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is DataType_UInt64) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is DataType_Int8) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is DataType_Int16) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is DataType_Int32) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is DataType_Int64) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is DataType_Float32) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is DataType_Float64) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is DataType_Utf8) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is DataType_Binary) {
      wireObj.tag = 12;
      return;
    }
    if (apiObj is DataType_Date) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is DataType_Datetime) {
      var pre_field0 = cst_encode_time_unit(apiObj.field0);
      var pre_field1 = cst_encode_opt_String(apiObj.field1);
      wireObj.tag = 14;
      wireObj.kind.Datetime.field0 = pre_field0;
      wireObj.kind.Datetime.field1 = pre_field1;
      return;
    }
    if (apiObj is DataType_Duration) {
      var pre_field0 = cst_encode_time_unit(apiObj.field0);
      wireObj.tag = 15;
      wireObj.kind.Duration.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Time) {
      wireObj.tag = 16;
      return;
    }
    if (apiObj is DataType_List) {
      var pre_field0 = cst_encode_box_data_type(apiObj.field0);
      wireObj.tag = 17;
      wireObj.kind.List.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Struct) {
      var pre_field0 = cst_encode_list_field(apiObj.field0);
      wireObj.tag = 18;
      wireObj.kind.Struct.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Null) {
      wireObj.tag = 19;
      return;
    }
    if (apiObj is DataType_Unknown) {
      wireObj.tag = 20;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_field(Field apiObj, wire_cst_field wireObj) {
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.dtype = cst_encode_box_data_type(apiObj.dtype);
  }

  @protected
  void cst_api_fill_to_wire_literal_value(
      LiteralValue apiObj, wire_cst_literal_value wireObj) {
    if (apiObj is LiteralValue_Null) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is LiteralValue_Boolean) {
      var pre_field0 = cst_encode_bool(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Boolean.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Utf8) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.Utf8.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Binary) {
      var pre_field0 = cst_encode_list_prim_u_8(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind.Binary.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Uint32) {
      var pre_field0 = cst_encode_u_32(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.Uint32.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Uint64) {
      var pre_field0 = cst_encode_u_64(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.Uint64.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int32) {
      var pre_field0 = cst_encode_i_32(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind.Int32.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int64) {
      var pre_field0 = cst_encode_i_64(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind.Int64.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Float32) {
      var pre_field0 = cst_encode_f_32(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind.Float32.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Float64) {
      var pre_field0 = cst_encode_f_64(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind.Float64.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Range) {
      var pre_low = cst_encode_i_64(apiObj.low);
      var pre_high = cst_encode_i_64(apiObj.high);
      var pre_data_type = cst_encode_box_autoadd_data_type(apiObj.dataType);
      wireObj.tag = 10;
      wireObj.kind.Range.low = pre_low;
      wireObj.kind.Range.high = pre_high;
      wireObj.kind.Range.data_type = pre_data_type;
      return;
    }
    if (apiObj is LiteralValue_DateTime) {
      var pre_field0 = cst_encode_i_64(apiObj.field0);
      var pre_field1 = cst_encode_time_unit(apiObj.field1);
      var pre_field2 = cst_encode_opt_String(apiObj.field2);
      wireObj.tag = 11;
      wireObj.kind.DateTime.field0 = pre_field0;
      wireObj.kind.DateTime.field1 = pre_field1;
      wireObj.kind.DateTime.field2 = pre_field2;
      return;
    }
    if (apiObj is LiteralValue_Duration) {
      var pre_field0 = cst_encode_i_64(apiObj.field0);
      var pre_field1 = cst_encode_time_unit(apiObj.field1);
      wireObj.tag = 12;
      wireObj.kind.Duration.field0 = pre_field0;
      wireObj.kind.Duration.field1 = pre_field1;
      return;
    }
    if (apiObj is LiteralValue_Series) {
      var pre_field0 =
          cst_encode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(apiObj.field0);
      wireObj.tag = 13;
      wireObj.kind.Series.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Date) {
      var pre_field0 = cst_encode_i_32(apiObj.field0);
      wireObj.tag = 14;
      wireObj.kind.Date.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Time) {
      var pre_field0 = cst_encode_i_64(apiObj.field0);
      wireObj.tag = 15;
      wireObj.kind.Time.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_null_values(
      NullValues apiObj, wire_cst_null_values wireObj) {
    if (apiObj is NullValues_AllColumnsSingle) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.AllColumnsSingle.field0 = pre_field0;
      return;
    }
    if (apiObj is NullValues_AllColumns) {
      var pre_field0 = cst_encode_list_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.AllColumns.field0 = pre_field0;
      return;
    }
    if (apiObj is NullValues_Named) {
      var pre_field0 = cst_encode_list_record_string_string(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.Named.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_record_string_string(
      (String, String) apiObj, wire_cst_record_string_string wireObj) {
    wireObj.field0 = cst_encode_String(apiObj.$1);
    wireObj.field1 = cst_encode_String(apiObj.$2);
  }

  @protected
  void cst_api_fill_to_wire_row_count(
      RowCount apiObj, wire_cst_row_count wireObj) {
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.offset = cst_encode_u_32(apiObj.offset);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(Expr raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(
      LazyFrame raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(
      LazyGroupBy raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionSchema(
      OptionSchema raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecExpr(
      OptionVecExpr raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecSeries(
      OptionVecSeries raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(
      Series raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(
      VecExpr raw);

  @protected
  PlatformPointer cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame raw);

  @protected
  PlatformPointer cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockSeries(
      Series raw);

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame raw);

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockExpr(Expr raw);

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(
      Series raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      SpecialEqPSeries raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockDataFrame(DataFrame raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockExpr(Expr raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockLazyFrame(LazyFrame raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockLazyGroupBy(
      LazyGroupBy raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockOptionSchema(
      OptionSchema raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockOptionVecExpr(
      OptionVecExpr raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockOptionVecSeries(
      OptionVecSeries raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockSeries(Series raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockVecExpr(VecExpr raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_closed_window(ClosedWindow raw);

  @protected
  int cst_encode_csv_encoding(CsvEncoding raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_is_sorted(IsSorted raw);

  @protected
  int cst_encode_join_type(JoinType raw);

  @protected
  int cst_encode_operator(Operator raw);

  @protected
  int cst_encode_quantile_interpol_options(QuantileInterpolOptions raw);

  @protected
  int cst_encode_time_unit(TimeUnit raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  int cst_encode_unique_keep_strategy(UniqueKeepStrategy raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  int cst_encode_window_mapping(WindowMapping raw);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(
      Expr self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(
      LazyFrame self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(
      LazyGroupBy self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionSchema(
      OptionSchema self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecExpr(
      OptionVecExpr self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecSeries(
      OptionVecSeries self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(
      VecExpr self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockExpr(
      Expr self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      SpecialEqPSeries self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockExpr(
      Expr self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockLazyFrame(
      LazyFrame self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockLazyGroupBy(
      LazyGroupBy self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockOptionSchema(
      OptionSchema self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockOptionVecExpr(
      OptionVecExpr self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockOptionVecSeries(
      OptionVecSeries self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockVecExpr(
      VecExpr self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_Chrono_Duration(
      Duration self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_closed_window(
      ClosedWindow self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_csv_encoding(
      CsvEncoding self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_data_type(
      DataType self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_literal_value(
      LiteralValue self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_null_values(
      NullValues self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_quantile_interpol_options(
      QuantileInterpolOptions self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_row_count(
      RowCount self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_time_unit(
      TimeUnit self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_window_mapping(
      WindowMapping self, SseSerializer serializer);

  @protected
  void sse_encode_box_data_type(DataType self, SseSerializer serializer);

  @protected
  void sse_encode_closed_window(ClosedWindow self, SseSerializer serializer);

  @protected
  void sse_encode_csv_encoding(CsvEncoding self, SseSerializer serializer);

  @protected
  void sse_encode_data_type(DataType self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_field(Field self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_is_sorted(IsSorted self, SseSerializer serializer);

  @protected
  void sse_encode_join_type(JoinType self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_bool(List<bool> self, SseSerializer serializer);

  @protected
  void sse_encode_list_data_type(List<DataType> self, SseSerializer serializer);

  @protected
  void sse_encode_list_field(List<Field> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_String(List<String?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_Chrono_Duration(
      List<Duration?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_bool(
      List<bool?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_f_64(
      List<double?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_i_32(
      List<int?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_i_64(
      List<int?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_f_64(Float64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_i_64(Int64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_32(Uint32List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer);

  @protected
  void sse_encode_literal_value(LiteralValue self, SseSerializer serializer);

  @protected
  void sse_encode_null_values(NullValues self, SseSerializer serializer);

  @protected
  void sse_encode_operator(Operator self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Duration(
      Duration? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_closed_window(
      ClosedWindow? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_csv_encoding(
      CsvEncoding? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_64(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_null_values(
      NullValues? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_quantile_interpol_options(
      QuantileInterpolOptions? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_row_count(
      RowCount? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_time_unit(
      TimeUnit? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_usize(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_window_mapping(
      WindowMapping? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_String(List<String>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_data_type(
      List<DataType>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_String(
      List<String?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_box_autoadd_Chrono_Duration(
      List<Duration?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_box_autoadd_bool(
      List<bool?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_box_autoadd_f_64(
      List<double?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_box_autoadd_i_32(
      List<int?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_box_autoadd_i_64(
      List<int?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_f_64(
      Float64List? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_i_64(Int64List? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_u_32(
      Uint32List? self, SseSerializer serializer);

  @protected
  void sse_encode_quantile_interpol_options(
      QuantileInterpolOptions self, SseSerializer serializer);

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer);

  @protected
  void sse_encode_row_count(RowCount self, SseSerializer serializer);

  @protected
  void sse_encode_time_unit(TimeUnit self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unique_keep_strategy(
      UniqueKeepStrategy self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_window_mapping(WindowMapping self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32,
              ffi.Int32)>>('dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  WireSyncRust2DartDco wire_DataFrame_column(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> column,
  ) {
    return _wire_DataFrame_column(
      that,
      column,
    );
  }

  late final _wire_DataFrame_columnPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_DataFrame_column');
  late final _wire_DataFrame_column = _wire_DataFrame_columnPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_DataFrame_column_at(
    ffi.Pointer<ffi.Void> that,
    int index,
  ) {
    return _wire_DataFrame_column_at(
      that,
      index,
    );
  }

  late final _wire_DataFrame_column_atPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.UintPtr)>>('wire_DataFrame_column_at');
  late final _wire_DataFrame_column_at = _wire_DataFrame_column_atPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_DataFrame_columns(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> columns,
  ) {
    return _wire_DataFrame_columns(
      that,
      columns,
    );
  }

  late final _wire_DataFrame_columnsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>)>>('wire_DataFrame_columns');
  late final _wire_DataFrame_columns = _wire_DataFrame_columnsPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_String>)>();

  void wire_DataFrame_describe(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_f_64> percentiles,
  ) {
    return _wire_DataFrame_describe(
      port_,
      that,
      percentiles,
    );
  }

  late final _wire_DataFrame_describePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<wire_cst_list_prim_f_64>)>>(
      'wire_DataFrame_describe');
  late final _wire_DataFrame_describe = _wire_DataFrame_describePtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_f_64>)>();

  WireSyncRust2DartDco wire_DataFrame_drop(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> column,
  ) {
    return _wire_DataFrame_drop(
      that,
      column,
    );
  }

  late final _wire_DataFrame_dropPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_DataFrame_drop');
  late final _wire_DataFrame_drop = _wire_DataFrame_dropPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_DataFrame_drop_in_place(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> column,
  ) {
    return _wire_DataFrame_drop_in_place(
      that,
      column,
    );
  }

  late final _wire_DataFrame_drop_in_placePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>>(
      'wire_DataFrame_drop_in_place');
  late final _wire_DataFrame_drop_in_place =
      _wire_DataFrame_drop_in_placePtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_DataFrame_dtypes(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_dtypes(
      that,
    );
  }

  late final _wire_DataFrame_dtypesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_dtypes');
  late final _wire_DataFrame_dtypes = _wire_DataFrame_dtypesPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_dump(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_dump(
      that,
    );
  }

  late final _wire_DataFrame_dumpPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_dump');
  late final _wire_DataFrame_dump = _wire_DataFrame_dumpPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_estimated_size(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_estimated_size(
      that,
    );
  }

  late final _wire_DataFrame_estimated_sizePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_estimated_size');
  late final _wire_DataFrame_estimated_size = _wire_DataFrame_estimated_sizePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_get_column_names(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_get_column_names(
      that,
    );
  }

  late final _wire_DataFrame_get_column_namesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_get_column_names');
  late final _wire_DataFrame_get_column_names =
      _wire_DataFrame_get_column_namesPtr
          .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_get_columns(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_get_columns(
      that,
    );
  }

  late final _wire_DataFrame_get_columnsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_get_columns');
  late final _wire_DataFrame_get_columns = _wire_DataFrame_get_columnsPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_get_row(
    ffi.Pointer<ffi.Void> that,
    int index,
  ) {
    return _wire_DataFrame_get_row(
      that,
      index,
    );
  }

  late final _wire_DataFrame_get_rowPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.UintPtr)>>('wire_DataFrame_get_row');
  late final _wire_DataFrame_get_row = _wire_DataFrame_get_rowPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_DataFrame_head(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_DataFrame_head(
      that,
      length,
    );
  }

  late final _wire_DataFrame_headPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_DataFrame_head');
  late final _wire_DataFrame_head = _wire_DataFrame_headPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_DataFrame_height(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_height(
      that,
    );
  }

  late final _wire_DataFrame_heightPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_height');
  late final _wire_DataFrame_height = _wire_DataFrame_heightPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_is_empty(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_is_empty(
      that,
    );
  }

  late final _wire_DataFrame_is_emptyPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_is_empty');
  late final _wire_DataFrame_is_empty = _wire_DataFrame_is_emptyPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_DataFrame_iter(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_iter(
      port_,
      that,
    );
  }

  late final _wire_DataFrame_iterPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_DataFrame_iter');
  late final _wire_DataFrame_iter = _wire_DataFrame_iterPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_lazy(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Bool> projection_pushdown,
    ffi.Pointer<ffi.Bool> predicate_pushdown,
    ffi.Pointer<ffi.Bool> type_coercion,
    ffi.Pointer<ffi.Bool> simplify_expressions,
    ffi.Pointer<ffi.Bool> slice_pushdown,
    ffi.Pointer<ffi.Bool> streaming,
  ) {
    return _wire_DataFrame_lazy(
      that,
      projection_pushdown,
      predicate_pushdown,
      type_coercion,
      simplify_expressions,
      slice_pushdown,
      streaming,
    );
  }

  late final _wire_DataFrame_lazyPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>>('wire_DataFrame_lazy');
  late final _wire_DataFrame_lazy = _wire_DataFrame_lazyPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>)>();

  void wire_DataFrame_max(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_max(
      port_,
      that,
    );
  }

  late final _wire_DataFrame_maxPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_DataFrame_max');
  late final _wire_DataFrame_max = _wire_DataFrame_maxPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_of(
    ffi.Pointer<ffi.Void> series,
  ) {
    return _wire_DataFrame_of(
      series,
    );
  }

  late final _wire_DataFrame_ofPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_of');
  late final _wire_DataFrame_of = _wire_DataFrame_ofPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_reverse(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_reverse(
      that,
    );
  }

  late final _wire_DataFrame_reversePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_reverse');
  late final _wire_DataFrame_reverse = _wire_DataFrame_reversePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_DataFrame_sample(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> n,
    bool with_replacement,
    bool shuffle,
    ffi.Pointer<ffi.Uint64> seed,
  ) {
    return _wire_DataFrame_sample(
      port_,
      that,
      n,
      with_replacement,
      shuffle,
      seed,
    );
  }

  late final _wire_DataFrame_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.Uint64>)>>('wire_DataFrame_sample');
  late final _wire_DataFrame_sample = _wire_DataFrame_samplePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, bool,
          bool, ffi.Pointer<ffi.Uint64>)>();

  WireSyncRust2DartDco wire_DataFrame_schema(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_schema(
      that,
    );
  }

  late final _wire_DataFrame_schemaPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_schema');
  late final _wire_DataFrame_schema = _wire_DataFrame_schemaPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_select(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> columns,
  ) {
    return _wire_DataFrame_select(
      that,
      columns,
    );
  }

  late final _wire_DataFrame_selectPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>)>>('wire_DataFrame_select');
  late final _wire_DataFrame_select = _wire_DataFrame_selectPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_String>)>();

  WireSyncRust2DartDco wire_DataFrame_shape(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_shape(
      that,
    );
  }

  late final _wire_DataFrame_shapePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_shape');
  late final _wire_DataFrame_shape = _wire_DataFrame_shapePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_sort_in_place(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> by_column,
    ffi.Pointer<wire_cst_list_bool> descending,
    bool maintain_order,
  ) {
    return _wire_DataFrame_sort_in_place(
      that,
      by_column,
      descending,
      maintain_order,
    );
  }

  late final _wire_DataFrame_sort_in_placePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_bool>,
              ffi.Bool)>>('wire_DataFrame_sort_in_place');
  late final _wire_DataFrame_sort_in_place =
      _wire_DataFrame_sort_in_placePtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_bool>,
              bool)>();

  WireSyncRust2DartDco wire_DataFrame_tail(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_DataFrame_tail(
      that,
      length,
    );
  }

  late final _wire_DataFrame_tailPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_DataFrame_tail');
  late final _wire_DataFrame_tail = _wire_DataFrame_tailPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_DataFrame_width(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_width(
      that,
    );
  }

  late final _wire_DataFrame_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_width');
  late final _wire_DataFrame_width = _wire_DataFrame_widthPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_with_row_count(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _wire_DataFrame_with_row_count(
      that,
      name,
      offset,
    );
  }

  late final _wire_DataFrame_with_row_countPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Uint32>)>>('wire_DataFrame_with_row_count');
  late final _wire_DataFrame_with_row_count =
      _wire_DataFrame_with_row_countPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>, ffi.Pointer<ffi.Uint32>)>();

  WireSyncRust2DartDco wire_LazyFrame_cache(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_cache(
      that,
    );
  }

  late final _wire_LazyFrame_cachePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_cache');
  late final _wire_LazyFrame_cache = _wire_LazyFrame_cachePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_LazyFrame_collect(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_collect(
      port_,
      that,
    );
  }

  late final _wire_LazyFrame_collectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_LazyFrame_collect');
  late final _wire_LazyFrame_collect = _wire_LazyFrame_collectPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_cross_join(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_LazyFrame_cross_join(
      that,
      other,
    );
  }

  late final _wire_LazyFrame_cross_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_cross_join');
  late final _wire_LazyFrame_cross_join =
      _wire_LazyFrame_cross_joinPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_drop_nulls(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> subset,
  ) {
    return _wire_LazyFrame_drop_nulls(
      that,
      subset,
    );
  }

  late final _wire_LazyFrame_drop_nullsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_drop_nulls');
  late final _wire_LazyFrame_drop_nulls =
      _wire_LazyFrame_drop_nullsPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_explode(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> columns,
  ) {
    return _wire_LazyFrame_explode(
      that,
      columns,
    );
  }

  late final _wire_LazyFrame_explodePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_explode');
  late final _wire_LazyFrame_explode = _wire_LazyFrame_explodePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void wire_LazyFrame_fetch(
    int port_,
    ffi.Pointer<ffi.Void> that,
    int n_rows,
  ) {
    return _wire_LazyFrame_fetch(
      port_,
      that,
      n_rows,
    );
  }

  late final _wire_LazyFrame_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('wire_LazyFrame_fetch');
  late final _wire_LazyFrame_fetch = _wire_LazyFrame_fetchPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_filter(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> pred,
  ) {
    return _wire_LazyFrame_filter(
      that,
      pred,
    );
  }

  late final _wire_LazyFrame_filterPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_filter');
  late final _wire_LazyFrame_filter = _wire_LazyFrame_filterPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_first(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_first(
      that,
    );
  }

  late final _wire_LazyFrame_firstPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_first');
  late final _wire_LazyFrame_first = _wire_LazyFrame_firstPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_group_by(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> exprs,
    bool maintain_order,
  ) {
    return _wire_LazyFrame_group_by(
      that,
      exprs,
      maintain_order,
    );
  }

  late final _wire_LazyFrame_group_byPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_LazyFrame_group_by');
  late final _wire_LazyFrame_group_by = _wire_LazyFrame_group_byPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_LazyFrame_inner_join(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    ffi.Pointer<ffi.Void> left_on,
    ffi.Pointer<ffi.Void> right_on,
  ) {
    return _wire_LazyFrame_inner_join(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_LazyFrame_inner_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_inner_join');
  late final _wire_LazyFrame_inner_join =
      _wire_LazyFrame_inner_joinPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_join(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    ffi.Pointer<ffi.Void> on1,
    ffi.Pointer<ffi.Void> left_on,
    ffi.Pointer<ffi.Void> right_on,
    ffi.Pointer<wire_cst_list_prim_u_8> suffix,
    int how,
    bool allow_parallel,
    bool force_parallel,
  ) {
    return _wire_LazyFrame_join(
      that,
      other,
      on1,
      left_on,
      right_on,
      suffix,
      how,
      allow_parallel,
      force_parallel,
    );
  }

  late final _wire_LazyFrame_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool)>>('wire_LazyFrame_join');
  late final _wire_LazyFrame_join = _wire_LazyFrame_joinPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          int,
          bool,
          bool)>();

  WireSyncRust2DartDco wire_LazyFrame_last(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_last(
      that,
    );
  }

  late final _wire_LazyFrame_lastPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_last');
  late final _wire_LazyFrame_last = _wire_LazyFrame_lastPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_left_join(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    ffi.Pointer<ffi.Void> left_on,
    ffi.Pointer<ffi.Void> right_on,
  ) {
    return _wire_LazyFrame_left_join(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_LazyFrame_left_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_left_join');
  late final _wire_LazyFrame_left_join =
      _wire_LazyFrame_left_joinPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_limit(
    ffi.Pointer<ffi.Void> that,
    int n,
  ) {
    return _wire_LazyFrame_limit(
      that,
      n,
    );
  }

  late final _wire_LazyFrame_limitPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint32)>>('wire_LazyFrame_limit');
  late final _wire_LazyFrame_limit = _wire_LazyFrame_limitPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_max(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_max(
      that,
    );
  }

  late final _wire_LazyFrame_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_max');
  late final _wire_LazyFrame_max = _wire_LazyFrame_maxPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_mean(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_mean(
      that,
    );
  }

  late final _wire_LazyFrame_meanPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_mean');
  late final _wire_LazyFrame_mean = _wire_LazyFrame_meanPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_median(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_median(
      that,
    );
  }

  late final _wire_LazyFrame_medianPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_median');
  late final _wire_LazyFrame_median = _wire_LazyFrame_medianPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_melt(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> id_vars,
    ffi.Pointer<wire_cst_list_String> value_vars,
    ffi.Pointer<wire_cst_list_prim_u_8> variable_name,
    ffi.Pointer<wire_cst_list_prim_u_8> value_name,
    bool streamable,
  ) {
    return _wire_LazyFrame_melt(
      that,
      id_vars,
      value_vars,
      variable_name,
      value_name,
      streamable,
    );
  }

  late final _wire_LazyFrame_meltPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Bool)>>('wire_LazyFrame_melt');
  late final _wire_LazyFrame_melt = _wire_LazyFrame_meltPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<wire_cst_list_String>,
          ffi.Pointer<wire_cst_list_String>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          bool)>();

  WireSyncRust2DartDco wire_LazyFrame_min(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_min(
      that,
    );
  }

  late final _wire_LazyFrame_minPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_min');
  late final _wire_LazyFrame_min = _wire_LazyFrame_minPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_outer_join(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    ffi.Pointer<ffi.Void> left_on,
    ffi.Pointer<ffi.Void> right_on,
  ) {
    return _wire_LazyFrame_outer_join(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_LazyFrame_outer_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_outer_join');
  late final _wire_LazyFrame_outer_join =
      _wire_LazyFrame_outer_joinPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_quantile(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> quantile,
    int interpol,
  ) {
    return _wire_LazyFrame_quantile(
      that,
      quantile,
      interpol,
    );
  }

  late final _wire_LazyFrame_quantilePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('wire_LazyFrame_quantile');
  late final _wire_LazyFrame_quantile = _wire_LazyFrame_quantilePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_reverse(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_reverse(
      that,
    );
  }

  late final _wire_LazyFrame_reversePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_reverse');
  late final _wire_LazyFrame_reverse = _wire_LazyFrame_reversePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_select(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> exprs,
  ) {
    return _wire_LazyFrame_select(
      that,
      exprs,
    );
  }

  late final _wire_LazyFrame_selectPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_select');
  late final _wire_LazyFrame_select = _wire_LazyFrame_selectPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_slice(
    ffi.Pointer<ffi.Void> that,
    int offset,
    int len,
  ) {
    return _wire_LazyFrame_slice(
      that,
      offset,
      len,
    );
  }

  late final _wire_LazyFrame_slicePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, ffi.Int64,
              ffi.Uint32)>>('wire_LazyFrame_slice');
  late final _wire_LazyFrame_slice = _wire_LazyFrame_slicePtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int, int)>();

  WireSyncRust2DartDco wire_LazyFrame_std(
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_LazyFrame_std(
      that,
      ddof,
    );
  }

  late final _wire_LazyFrame_stdPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint8)>>('wire_LazyFrame_std');
  late final _wire_LazyFrame_std = _wire_LazyFrame_stdPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_sum(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_sum(
      that,
    );
  }

  late final _wire_LazyFrame_sumPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_sum');
  late final _wire_LazyFrame_sum = _wire_LazyFrame_sumPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_tail(
    ffi.Pointer<ffi.Void> that,
    int n,
  ) {
    return _wire_LazyFrame_tail(
      that,
      n,
    );
  }

  late final _wire_LazyFrame_tailPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint32)>>('wire_LazyFrame_tail');
  late final _wire_LazyFrame_tail = _wire_LazyFrame_tailPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_unique(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> subset,
    int keep_strategy,
  ) {
    return _wire_LazyFrame_unique(
      that,
      subset,
      keep_strategy,
    );
  }

  late final _wire_LazyFrame_uniquePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Int32)>>('wire_LazyFrame_unique');
  late final _wire_LazyFrame_unique = _wire_LazyFrame_uniquePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_String>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_variance(
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_LazyFrame_variance(
      that,
      ddof,
    );
  }

  late final _wire_LazyFrame_variancePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint8)>>('wire_LazyFrame_variance');
  late final _wire_LazyFrame_variance = _wire_LazyFrame_variancePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_with_column(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> expr,
  ) {
    return _wire_LazyFrame_with_column(
      that,
      expr,
    );
  }

  late final _wire_LazyFrame_with_columnPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_with_column');
  late final _wire_LazyFrame_with_column =
      _wire_LazyFrame_with_columnPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_with_columns(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> exprs,
  ) {
    return _wire_LazyFrame_with_columns(
      that,
      exprs,
    );
  }

  late final _wire_LazyFrame_with_columnsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_with_columns');
  late final _wire_LazyFrame_with_columns =
      _wire_LazyFrame_with_columnsPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_with_row_count(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _wire_LazyFrame_with_row_count(
      that,
      name,
      offset,
    );
  }

  late final _wire_LazyFrame_with_row_countPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Uint32>)>>('wire_LazyFrame_with_row_count');
  late final _wire_LazyFrame_with_row_count =
      _wire_LazyFrame_with_row_countPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>, ffi.Pointer<ffi.Uint32>)>();

  void wire_read_csv(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8> path,
    ffi.Pointer<wire_cst_list_data_type> dtypes_slice,
    ffi.Pointer<ffi.Bool> has_header,
    ffi.Pointer<wire_cst_list_String> columns,
    ffi.Pointer<wire_cst_list_prim_u_8> comment_char,
    ffi.Pointer<wire_cst_list_prim_u_8> eol_char,
    ffi.Pointer<ffi.UintPtr> chunk_size,
    ffi.Pointer<ffi.UintPtr> sample_size,
    ffi.Pointer<wire_cst_row_count> row_count,
    ffi.Pointer<ffi.Int32> encoding,
    ffi.Pointer<ffi.UintPtr> n_rows,
    ffi.Pointer<ffi.UintPtr> n_threads,
    ffi.Pointer<wire_cst_null_values> null_values,
    ffi.Pointer<wire_cst_list_prim_u_32> projection,
    ffi.Pointer<wire_cst_list_prim_u_8> quote_char,
    int skip_rows,
    int skip_rows_after_header,
    bool ignore_errors,
    bool rechunk,
    bool try_parse_dates,
    bool low_memory,
  ) {
    return _wire_read_csv(
      port_,
      path,
      dtypes_slice,
      has_header,
      columns,
      comment_char,
      eol_char,
      chunk_size,
      sample_size,
      row_count,
      encoding,
      n_rows,
      n_threads,
      null_values,
      projection,
      quote_char,
      skip_rows,
      skip_rows_after_header,
      ignore_errors,
      rechunk,
      try_parse_dates,
      low_memory,
    );
  }

  late final _wire_read_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_data_type>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_cst_row_count>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_cst_null_values>,
              ffi.Pointer<wire_cst_list_prim_u_32>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.UintPtr,
              ffi.UintPtr,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool)>>('wire_read_csv');
  late final _wire_read_csv = _wire_read_csvPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_data_type>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<wire_cst_list_String>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_cst_row_count>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_cst_null_values>,
          ffi.Pointer<wire_cst_list_prim_u_32>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          int,
          int,
          bool,
          bool,
          bool,
          bool)>();

  void wire_read_json(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8> path,
    ffi.Pointer<ffi.UintPtr> batch_size,
    ffi.Pointer<wire_cst_list_String> projection,
  ) {
    return _wire_read_json(
      port_,
      path,
      batch_size,
      projection,
    );
  }

  late final _wire_read_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_cst_list_String>)>>('wire_read_json');
  late final _wire_read_json = _wire_read_jsonPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.UintPtr>, ffi.Pointer<wire_cst_list_String>)>();

  void wire_scan_csv(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8> path,
    ffi.Pointer<ffi.Void> dtype_overwrite,
    ffi.Pointer<ffi.Bool> has_header,
    ffi.Pointer<wire_cst_list_prim_u_8> comment_char,
    ffi.Pointer<wire_cst_list_prim_u_8> eol_char,
    ffi.Pointer<wire_cst_list_prim_u_8> quote_char,
    int skip_rows,
    int skip_rows_after_header,
    ffi.Pointer<wire_cst_row_count> row_count,
    ffi.Pointer<ffi.Int32> encoding,
    ffi.Pointer<ffi.UintPtr> n_rows,
    ffi.Pointer<wire_cst_null_values> null_values,
    bool ignore_errors,
    bool rechunk,
    bool try_parse_dates,
    ffi.Pointer<ffi.UintPtr> infer_schema_length,
    bool cache,
  ) {
    return _wire_scan_csv(
      port_,
      path,
      dtype_overwrite,
      has_header,
      comment_char,
      eol_char,
      quote_char,
      skip_rows,
      skip_rows_after_header,
      row_count,
      encoding,
      n_rows,
      null_values,
      ignore_errors,
      rechunk,
      try_parse_dates,
      infer_schema_length,
      cache,
    );
  }

  late final _wire_scan_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.UintPtr,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_row_count>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_cst_null_values>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Bool)>>('wire_scan_csv');
  late final _wire_scan_csv = _wire_scan_csvPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          int,
          int,
          ffi.Pointer<wire_cst_row_count>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_cst_null_values>,
          bool,
          bool,
          bool,
          ffi.Pointer<ffi.UintPtr>,
          bool)>();

  WireSyncRust2DartDco wire_Expr_abs(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_abs(
      that,
    );
  }

  late final _wire_Expr_absPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_abs');
  late final _wire_Expr_abs = _wire_Expr_absPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_add(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_add(
      that,
      other,
    );
  }

  late final _wire_Expr_addPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_add');
  late final _wire_Expr_add = _wire_Expr_addPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_agg_groups(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_agg_groups(
      that,
    );
  }

  late final _wire_Expr_agg_groupsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_agg_groups');
  late final _wire_Expr_agg_groups = _wire_Expr_agg_groupsPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_alias(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> name,
  ) {
    return _wire_Expr_alias(
      that,
      name,
    );
  }

  late final _wire_Expr_aliasPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_Expr_alias');
  late final _wire_Expr_alias = _wire_Expr_aliasPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Expr_all(
    ffi.Pointer<ffi.Void> that,
    bool ignore_nulls,
  ) {
    return _wire_Expr_all(
      that,
      ignore_nulls,
    );
  }

  late final _wire_Expr_allPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Expr_all');
  late final _wire_Expr_all = _wire_Expr_allPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Expr_and(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> expr,
  ) {
    return _wire_Expr_and(
      that,
      expr,
    );
  }

  late final _wire_Expr_andPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_and');
  late final _wire_Expr_and = _wire_Expr_andPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_any(
    ffi.Pointer<ffi.Void> that,
    bool ignore_nulls,
  ) {
    return _wire_Expr_any(
      that,
      ignore_nulls,
    );
  }

  late final _wire_Expr_anyPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Expr_any');
  late final _wire_Expr_any = _wire_Expr_anyPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Expr_append(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    bool upcast,
  ) {
    return _wire_Expr_append(
      that,
      other,
      upcast,
    );
  }

  late final _wire_Expr_appendPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Expr_append');
  late final _wire_Expr_append = _wire_Expr_appendPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Expr_arccos(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_arccos(
      that,
    );
  }

  late final _wire_Expr_arccosPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arccos');
  late final _wire_Expr_arccos = _wire_Expr_arccosPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_arccosh(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_arccosh(
      that,
    );
  }

  late final _wire_Expr_arccoshPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arccosh');
  late final _wire_Expr_arccosh = _wire_Expr_arccoshPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_arcsin(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_arcsin(
      that,
    );
  }

  late final _wire_Expr_arcsinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arcsin');
  late final _wire_Expr_arcsin = _wire_Expr_arcsinPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_arcsinh(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_arcsinh(
      that,
    );
  }

  late final _wire_Expr_arcsinhPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arcsinh');
  late final _wire_Expr_arcsinh = _wire_Expr_arcsinhPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_arctan(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_arctan(
      that,
    );
  }

  late final _wire_Expr_arctanPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arctan');
  late final _wire_Expr_arctan = _wire_Expr_arctanPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_arctan2(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> x,
  ) {
    return _wire_Expr_arctan2(
      that,
      x,
    );
  }

  late final _wire_Expr_arctan2Ptr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arctan2');
  late final _wire_Expr_arctan2 = _wire_Expr_arctan2Ptr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_arctanh(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_arctanh(
      that,
    );
  }

  late final _wire_Expr_arctanhPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arctanh');
  late final _wire_Expr_arctanh = _wire_Expr_arctanhPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_arg_max(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_arg_max(
      that,
    );
  }

  late final _wire_Expr_arg_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arg_max');
  late final _wire_Expr_arg_max = _wire_Expr_arg_maxPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_arg_min(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_arg_min(
      that,
    );
  }

  late final _wire_Expr_arg_minPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arg_min');
  late final _wire_Expr_arg_min = _wire_Expr_arg_minPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_arg_sort(
    ffi.Pointer<ffi.Void> that,
    bool descending,
    bool nulls_last,
    bool multithreaded,
    bool maintain_order,
  ) {
    return _wire_Expr_arg_sort(
      that,
      descending,
      nulls_last,
      multithreaded,
      maintain_order,
    );
  }

  late final _wire_Expr_arg_sortPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, ffi.Bool,
              ffi.Bool, ffi.Bool, ffi.Bool)>>('wire_Expr_arg_sort');
  late final _wire_Expr_arg_sort = _wire_Expr_arg_sortPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, bool, bool, bool, bool)>();

  WireSyncRust2DartDco wire_Expr_arg_unique(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_arg_unique(
      that,
    );
  }

  late final _wire_Expr_arg_uniquePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_arg_unique');
  late final _wire_Expr_arg_unique = _wire_Expr_arg_uniquePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_backward_fill(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Uint32> limit,
  ) {
    return _wire_Expr_backward_fill(
      that,
      limit,
    );
  }

  late final _wire_Expr_backward_fillPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint32>)>>('wire_Expr_backward_fill');
  late final _wire_Expr_backward_fill = _wire_Expr_backward_fillPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint32>)>();

  WireSyncRust2DartDco wire_Expr_cast(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_data_type> data_type,
  ) {
    return _wire_Expr_cast(
      that,
      data_type,
    );
  }

  late final _wire_Expr_castPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_data_type>)>>('wire_Expr_cast');
  late final _wire_Expr_cast = _wire_Expr_castPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_data_type>)>();

  WireSyncRust2DartDco wire_Expr_cbrt(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_cbrt(
      that,
    );
  }

  late final _wire_Expr_cbrtPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_cbrt');
  late final _wire_Expr_cbrt = _wire_Expr_cbrtPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_ceil(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_ceil(
      that,
    );
  }

  late final _wire_Expr_ceilPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_ceil');
  late final _wire_Expr_ceil = _wire_Expr_ceilPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_clip(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> min,
    ffi.Pointer<ffi.Void> max,
  ) {
    return _wire_Expr_clip(
      that,
      min,
      max,
    );
  }

  late final _wire_Expr_clipPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_clip');
  late final _wire_Expr_clip = _wire_Expr_clipPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_clip_max(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> max,
  ) {
    return _wire_Expr_clip_max(
      that,
      max,
    );
  }

  late final _wire_Expr_clip_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_clip_max');
  late final _wire_Expr_clip_max = _wire_Expr_clip_maxPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_clip_min(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> min,
  ) {
    return _wire_Expr_clip_min(
      that,
      min,
    );
  }

  late final _wire_Expr_clip_minPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_clip_min');
  late final _wire_Expr_clip_min = _wire_Expr_clip_minPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_cos(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_cos(
      that,
    );
  }

  late final _wire_Expr_cosPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_cos');
  late final _wire_Expr_cos = _wire_Expr_cosPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_cosh(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_cosh(
      that,
    );
  }

  late final _wire_Expr_coshPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_cosh');
  late final _wire_Expr_cosh = _wire_Expr_coshPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_cot(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_cot(
      that,
    );
  }

  late final _wire_Expr_cotPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_cot');
  late final _wire_Expr_cot = _wire_Expr_cotPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_count(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_count(
      that,
    );
  }

  late final _wire_Expr_countPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_count');
  late final _wire_Expr_count = _wire_Expr_countPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_cum_count(
    ffi.Pointer<ffi.Void> that,
    bool reverse,
  ) {
    return _wire_Expr_cum_count(
      that,
      reverse,
    );
  }

  late final _wire_Expr_cum_countPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Expr_cum_count');
  late final _wire_Expr_cum_count = _wire_Expr_cum_countPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Expr_cum_max(
    ffi.Pointer<ffi.Void> that,
    bool reverse,
  ) {
    return _wire_Expr_cum_max(
      that,
      reverse,
    );
  }

  late final _wire_Expr_cum_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Expr_cum_max');
  late final _wire_Expr_cum_max = _wire_Expr_cum_maxPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Expr_cum_min(
    ffi.Pointer<ffi.Void> that,
    bool reverse,
  ) {
    return _wire_Expr_cum_min(
      that,
      reverse,
    );
  }

  late final _wire_Expr_cum_minPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Expr_cum_min');
  late final _wire_Expr_cum_min = _wire_Expr_cum_minPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Expr_cum_prod(
    ffi.Pointer<ffi.Void> that,
    bool reverse,
  ) {
    return _wire_Expr_cum_prod(
      that,
      reverse,
    );
  }

  late final _wire_Expr_cum_prodPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Expr_cum_prod');
  late final _wire_Expr_cum_prod = _wire_Expr_cum_prodPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Expr_cum_sum(
    ffi.Pointer<ffi.Void> that,
    bool reverse,
  ) {
    return _wire_Expr_cum_sum(
      that,
      reverse,
    );
  }

  late final _wire_Expr_cum_sumPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Expr_cum_sum');
  late final _wire_Expr_cum_sum = _wire_Expr_cum_sumPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Expr_degrees(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_degrees(
      that,
    );
  }

  late final _wire_Expr_degreesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_degrees');
  late final _wire_Expr_degrees = _wire_Expr_degreesPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_div(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_div(
      that,
      other,
    );
  }

  late final _wire_Expr_divPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_div');
  late final _wire_Expr_div = _wire_Expr_divPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_dot(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_dot(
      that,
      other,
    );
  }

  late final _wire_Expr_dotPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_dot');
  late final _wire_Expr_dot = _wire_Expr_dotPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_drop_nans(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_drop_nans(
      that,
    );
  }

  late final _wire_Expr_drop_nansPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_drop_nans');
  late final _wire_Expr_drop_nans = _wire_Expr_drop_nansPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_drop_nulls(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_drop_nulls(
      that,
    );
  }

  late final _wire_Expr_drop_nullsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_drop_nulls');
  late final _wire_Expr_drop_nulls = _wire_Expr_drop_nullsPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_entropy(
    ffi.Pointer<ffi.Void> that,
    double base,
    bool normalize,
  ) {
    return _wire_Expr_entropy(
      that,
      base,
      normalize,
    );
  }

  late final _wire_Expr_entropyPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Bool)>>('wire_Expr_entropy');
  late final _wire_Expr_entropy = _wire_Expr_entropyPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, double, bool)>();

  WireSyncRust2DartDco wire_Expr_eq(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_eq(
      that,
      other,
    );
  }

  late final _wire_Expr_eqPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_eq');
  late final _wire_Expr_eq = _wire_Expr_eqPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_eq_missing(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_eq_missing(
      that,
      other,
    );
  }

  late final _wire_Expr_eq_missingPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_eq_missing');
  late final _wire_Expr_eq_missing = _wire_Expr_eq_missingPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_exclude(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> columns,
  ) {
    return _wire_Expr_exclude(
      that,
      columns,
    );
  }

  late final _wire_Expr_excludePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>)>>('wire_Expr_exclude');
  late final _wire_Expr_exclude = _wire_Expr_excludePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_String>)>();

  WireSyncRust2DartDco wire_Expr_exp(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_exp(
      that,
    );
  }

  late final _wire_Expr_expPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_exp');
  late final _wire_Expr_exp = _wire_Expr_expPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_explode(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_explode(
      that,
    );
  }

  late final _wire_Expr_explodePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_explode');
  late final _wire_Expr_explode = _wire_Expr_explodePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_fill_nan(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _wire_Expr_fill_nan(
      that,
      value,
    );
  }

  late final _wire_Expr_fill_nanPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_fill_nan');
  late final _wire_Expr_fill_nan = _wire_Expr_fill_nanPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_fill_null(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _wire_Expr_fill_null(
      that,
      value,
    );
  }

  late final _wire_Expr_fill_nullPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_fill_null');
  late final _wire_Expr_fill_null = _wire_Expr_fill_nullPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_filter(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> cond,
  ) {
    return _wire_Expr_filter(
      that,
      cond,
    );
  }

  late final _wire_Expr_filterPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_filter');
  late final _wire_Expr_filter = _wire_Expr_filterPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_first(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_first(
      that,
    );
  }

  late final _wire_Expr_firstPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_first');
  late final _wire_Expr_first = _wire_Expr_firstPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_flatten(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_flatten(
      that,
    );
  }

  late final _wire_Expr_flattenPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_flatten');
  late final _wire_Expr_flatten = _wire_Expr_flattenPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_floor(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_floor(
      that,
    );
  }

  late final _wire_Expr_floorPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_floor');
  late final _wire_Expr_floor = _wire_Expr_floorPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_floor_div(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> rhs,
  ) {
    return _wire_Expr_floor_div(
      that,
      rhs,
    );
  }

  late final _wire_Expr_floor_divPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_floor_div');
  late final _wire_Expr_floor_div = _wire_Expr_floor_divPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_forward_fill(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Uint32> limit,
  ) {
    return _wire_Expr_forward_fill(
      that,
      limit,
    );
  }

  late final _wire_Expr_forward_fillPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint32>)>>('wire_Expr_forward_fill');
  late final _wire_Expr_forward_fill = _wire_Expr_forward_fillPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint32>)>();

  WireSyncRust2DartDco wire_Expr_gather(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> idx,
  ) {
    return _wire_Expr_gather(
      that,
      idx,
    );
  }

  late final _wire_Expr_gatherPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_gather');
  late final _wire_Expr_gather = _wire_Expr_gatherPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_get(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> idx,
  ) {
    return _wire_Expr_get(
      that,
      idx,
    );
  }

  late final _wire_Expr_getPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_get');
  late final _wire_Expr_get = _wire_Expr_getPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_gt(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_gt(
      that,
      other,
    );
  }

  late final _wire_Expr_gtPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_gt');
  late final _wire_Expr_gt = _wire_Expr_gtPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_gt_eq(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_gt_eq(
      that,
      other,
    );
  }

  late final _wire_Expr_gt_eqPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_gt_eq');
  late final _wire_Expr_gt_eq = _wire_Expr_gt_eqPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_head(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_Expr_head(
      that,
      length,
    );
  }

  late final _wire_Expr_headPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_Expr_head');
  late final _wire_Expr_head = _wire_Expr_headPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_Expr_implode(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_implode(
      that,
    );
  }

  late final _wire_Expr_implodePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_implode');
  late final _wire_Expr_implode = _wire_Expr_implodePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_is_finite(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_is_finite(
      that,
    );
  }

  late final _wire_Expr_is_finitePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_is_finite');
  late final _wire_Expr_is_finite = _wire_Expr_is_finitePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_is_in(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_is_in(
      that,
      other,
    );
  }

  late final _wire_Expr_is_inPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_is_in');
  late final _wire_Expr_is_in = _wire_Expr_is_inPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_is_nan(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_is_nan(
      that,
    );
  }

  late final _wire_Expr_is_nanPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_is_nan');
  late final _wire_Expr_is_nan = _wire_Expr_is_nanPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_is_not_nan(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_is_not_nan(
      that,
    );
  }

  late final _wire_Expr_is_not_nanPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_is_not_nan');
  late final _wire_Expr_is_not_nan = _wire_Expr_is_not_nanPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_is_not_null(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_is_not_null(
      that,
    );
  }

  late final _wire_Expr_is_not_nullPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_is_not_null');
  late final _wire_Expr_is_not_null = _wire_Expr_is_not_nullPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_is_null(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_is_null(
      that,
    );
  }

  late final _wire_Expr_is_nullPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_is_null');
  late final _wire_Expr_is_null = _wire_Expr_is_nullPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_last(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_last(
      that,
    );
  }

  late final _wire_Expr_lastPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_last');
  late final _wire_Expr_last = _wire_Expr_lastPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_literal(
    ffi.Pointer<wire_cst_literal_value> value,
  ) {
    return _wire_Expr_literal(
      value,
    );
  }

  late final _wire_Expr_literalPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_literal_value>)>>('wire_Expr_literal');
  late final _wire_Expr_literal = _wire_Expr_literalPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_literal_value>)>();

  WireSyncRust2DartDco wire_Expr_log(
    ffi.Pointer<ffi.Void> that,
    double base,
  ) {
    return _wire_Expr_log(
      that,
      base,
    );
  }

  late final _wire_Expr_logPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Double)>>('wire_Expr_log');
  late final _wire_Expr_log = _wire_Expr_logPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, double)>();

  WireSyncRust2DartDco wire_Expr_log1p(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_log1p(
      that,
    );
  }

  late final _wire_Expr_log1pPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_log1p');
  late final _wire_Expr_log1p = _wire_Expr_log1pPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_lower_bound(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_lower_bound(
      that,
    );
  }

  late final _wire_Expr_lower_boundPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_lower_bound');
  late final _wire_Expr_lower_bound = _wire_Expr_lower_boundPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_lt(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_lt(
      that,
      other,
    );
  }

  late final _wire_Expr_ltPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_lt');
  late final _wire_Expr_lt = _wire_Expr_ltPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_lt_eq(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_lt_eq(
      that,
      other,
    );
  }

  late final _wire_Expr_lt_eqPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_lt_eq');
  late final _wire_Expr_lt_eq = _wire_Expr_lt_eqPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_mul(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_mul(
      that,
      other,
    );
  }

  late final _wire_Expr_mulPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_mul');
  late final _wire_Expr_mul = _wire_Expr_mulPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_n_unique(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_n_unique(
      that,
    );
  }

  late final _wire_Expr_n_uniquePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_n_unique');
  late final _wire_Expr_n_unique = _wire_Expr_n_uniquePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_nan_max(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_nan_max(
      that,
    );
  }

  late final _wire_Expr_nan_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_nan_max');
  late final _wire_Expr_nan_max = _wire_Expr_nan_maxPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_nan_min(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_nan_min(
      that,
    );
  }

  late final _wire_Expr_nan_minPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_nan_min');
  late final _wire_Expr_nan_min = _wire_Expr_nan_minPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_neq(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_neq(
      that,
      other,
    );
  }

  late final _wire_Expr_neqPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_neq');
  late final _wire_Expr_neq = _wire_Expr_neqPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_neq_missing(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_neq_missing(
      that,
      other,
    );
  }

  late final _wire_Expr_neq_missingPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_neq_missing');
  late final _wire_Expr_neq_missing = _wire_Expr_neq_missingPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_not(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_not(
      that,
    );
  }

  late final _wire_Expr_notPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_not');
  late final _wire_Expr_not = _wire_Expr_notPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_null_count(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_null_count(
      that,
    );
  }

  late final _wire_Expr_null_countPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_null_count');
  late final _wire_Expr_null_count = _wire_Expr_null_countPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_or(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> expr,
  ) {
    return _wire_Expr_or(
      that,
      expr,
    );
  }

  late final _wire_Expr_orPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_or');
  late final _wire_Expr_or = _wire_Expr_orPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_over(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> partiion_by,
    ffi.Pointer<ffi.Int32> kind,
  ) {
    return _wire_Expr_over(
      that,
      partiion_by,
      kind,
    );
  }

  late final _wire_Expr_overPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_over');
  late final _wire_Expr_over = _wire_Expr_overPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_pow(
    ffi.Pointer<ffi.Void> that,
    double exponent,
  ) {
    return _wire_Expr_pow(
      that,
      exponent,
    );
  }

  late final _wire_Expr_powPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Double)>>('wire_Expr_pow');
  late final _wire_Expr_pow = _wire_Expr_powPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, double)>();

  WireSyncRust2DartDco wire_Expr_product(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_product(
      that,
    );
  }

  late final _wire_Expr_productPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_product');
  late final _wire_Expr_product = _wire_Expr_productPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_quantile(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> quantile,
    ffi.Pointer<ffi.Int32> interpol,
  ) {
    return _wire_Expr_quantile(
      that,
      quantile,
      interpol,
    );
  }

  late final _wire_Expr_quantilePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_quantile');
  late final _wire_Expr_quantile = _wire_Expr_quantilePtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_radians(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_radians(
      that,
    );
  }

  late final _wire_Expr_radiansPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_radians');
  late final _wire_Expr_radians = _wire_Expr_radiansPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_rem(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_rem(
      that,
      other,
    );
  }

  late final _wire_Expr_remPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_rem');
  late final _wire_Expr_rem = _wire_Expr_remPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_reshape(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_i_64> dims,
  ) {
    return _wire_Expr_reshape(
      that,
      dims,
    );
  }

  late final _wire_Expr_reshapePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_i_64>)>>('wire_Expr_reshape');
  late final _wire_Expr_reshape = _wire_Expr_reshapePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_i_64>)>();

  WireSyncRust2DartDco wire_Expr_reverse(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_reverse(
      that,
    );
  }

  late final _wire_Expr_reversePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_reverse');
  late final _wire_Expr_reverse = _wire_Expr_reversePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_rolling_max(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_u_8> by,
    ffi.Pointer<ffi.Int32> closed_window,
  ) {
    return _wire_Expr_rolling_max(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
    );
  }

  late final _wire_Expr_rolling_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_rolling_max');
  late final _wire_Expr_rolling_max = _wire_Expr_rolling_maxPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_rolling_mean(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_u_8> by,
    ffi.Pointer<ffi.Int32> closed_window,
  ) {
    return _wire_Expr_rolling_mean(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
    );
  }

  late final _wire_Expr_rolling_meanPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_rolling_mean');
  late final _wire_Expr_rolling_mean = _wire_Expr_rolling_meanPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_rolling_median(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_u_8> by,
    ffi.Pointer<ffi.Int32> closed_window,
  ) {
    return _wire_Expr_rolling_median(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
    );
  }

  late final _wire_Expr_rolling_medianPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_rolling_median');
  late final _wire_Expr_rolling_median =
      _wire_Expr_rolling_medianPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              int,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_rolling_min(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_u_8> by,
    ffi.Pointer<ffi.Int32> closed_window,
  ) {
    return _wire_Expr_rolling_min(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
    );
  }

  late final _wire_Expr_rolling_minPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_rolling_min');
  late final _wire_Expr_rolling_min = _wire_Expr_rolling_minPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_rolling_quantile(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_u_8> by,
    ffi.Pointer<ffi.Int32> closed_window,
  ) {
    return _wire_Expr_rolling_quantile(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
    );
  }

  late final _wire_Expr_rolling_quantilePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_rolling_quantile');
  late final _wire_Expr_rolling_quantile =
      _wire_Expr_rolling_quantilePtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              int,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_rolling_std(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_u_8> by,
    ffi.Pointer<ffi.Int32> closed_window,
  ) {
    return _wire_Expr_rolling_std(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
    );
  }

  late final _wire_Expr_rolling_stdPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_rolling_std');
  late final _wire_Expr_rolling_std = _wire_Expr_rolling_stdPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_rolling_sum(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_u_8> by,
    ffi.Pointer<ffi.Int32> closed_window,
  ) {
    return _wire_Expr_rolling_sum(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
    );
  }

  late final _wire_Expr_rolling_sumPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_rolling_sum');
  late final _wire_Expr_rolling_sum = _wire_Expr_rolling_sumPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_rolling_var(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_u_8> by,
    ffi.Pointer<ffi.Int32> closed_window,
  ) {
    return _wire_Expr_rolling_var(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
    );
  }

  late final _wire_Expr_rolling_varPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Int32>)>>('wire_Expr_rolling_var');
  late final _wire_Expr_rolling_var = _wire_Expr_rolling_varPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.Int32>)>();

  WireSyncRust2DartDco wire_Expr_round(
    ffi.Pointer<ffi.Void> that,
    int decimals,
  ) {
    return _wire_Expr_round(
      that,
      decimals,
    );
  }

  late final _wire_Expr_roundPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint32)>>('wire_Expr_round');
  late final _wire_Expr_round = _wire_Expr_roundPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Expr_round_sig_figs(
    ffi.Pointer<ffi.Void> that,
    int digits,
  ) {
    return _wire_Expr_round_sig_figs(
      that,
      digits,
    );
  }

  late final _wire_Expr_round_sig_figsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('wire_Expr_round_sig_figs');
  late final _wire_Expr_round_sig_figs = _wire_Expr_round_sig_figsPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Expr_set_sorted_flag(
    ffi.Pointer<ffi.Void> that,
    int sorted,
  ) {
    return _wire_Expr_set_sorted_flag(
      that,
      sorted,
    );
  }

  late final _wire_Expr_set_sorted_flagPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('wire_Expr_set_sorted_flag');
  late final _wire_Expr_set_sorted_flag = _wire_Expr_set_sorted_flagPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Expr_shift(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> n,
  ) {
    return _wire_Expr_shift(
      that,
      n,
    );
  }

  late final _wire_Expr_shiftPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_shift');
  late final _wire_Expr_shift = _wire_Expr_shiftPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_shift_and_fill(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> n,
    ffi.Pointer<ffi.Void> fill_value,
  ) {
    return _wire_Expr_shift_and_fill(
      that,
      n,
      fill_value,
    );
  }

  late final _wire_Expr_shift_and_fillPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_shift_and_fill');
  late final _wire_Expr_shift_and_fill =
      _wire_Expr_shift_and_fillPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_shrink_dtype(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_shrink_dtype(
      that,
    );
  }

  late final _wire_Expr_shrink_dtypePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_shrink_dtype');
  late final _wire_Expr_shrink_dtype = _wire_Expr_shrink_dtypePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_sin(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_sin(
      that,
    );
  }

  late final _wire_Expr_sinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_sin');
  late final _wire_Expr_sin = _wire_Expr_sinPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_sinh(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_sinh(
      that,
    );
  }

  late final _wire_Expr_sinhPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_sinh');
  late final _wire_Expr_sinh = _wire_Expr_sinhPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_slice(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> offset,
    ffi.Pointer<ffi.Void> length,
  ) {
    return _wire_Expr_slice(
      that,
      offset,
      length,
    );
  }

  late final _wire_Expr_slicePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Expr_slice');
  late final _wire_Expr_slice = _wire_Expr_slicePtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_sort(
    ffi.Pointer<ffi.Void> that,
    bool descending,
    bool nulls_last,
    bool multithreaded,
    bool maintain_order,
  ) {
    return _wire_Expr_sort(
      that,
      descending,
      nulls_last,
      multithreaded,
      maintain_order,
    );
  }

  late final _wire_Expr_sortPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, ffi.Bool,
              ffi.Bool, ffi.Bool, ffi.Bool)>>('wire_Expr_sort');
  late final _wire_Expr_sort = _wire_Expr_sortPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, bool, bool, bool, bool)>();

  WireSyncRust2DartDco wire_Expr_sqrt(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_sqrt(
      that,
    );
  }

  late final _wire_Expr_sqrtPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_sqrt');
  late final _wire_Expr_sqrt = _wire_Expr_sqrtPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_std(
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_Expr_std(
      that,
      ddof,
    );
  }

  late final _wire_Expr_stdPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint8)>>('wire_Expr_std');
  late final _wire_Expr_std = _wire_Expr_stdPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Expr_strict_cast(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_data_type> data_type,
  ) {
    return _wire_Expr_strict_cast(
      that,
      data_type,
    );
  }

  late final _wire_Expr_strict_castPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_data_type>)>>('wire_Expr_strict_cast');
  late final _wire_Expr_strict_cast = _wire_Expr_strict_castPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_data_type>)>();

  WireSyncRust2DartDco wire_Expr_sub(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Expr_sub(
      that,
      other,
    );
  }

  late final _wire_Expr_subPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_sub');
  late final _wire_Expr_sub = _wire_Expr_subPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_sum(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_sum(
      that,
    );
  }

  late final _wire_Expr_sumPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_sum');
  late final _wire_Expr_sum = _wire_Expr_sumPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_tail(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_Expr_tail(
      that,
      length,
    );
  }

  late final _wire_Expr_tailPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_Expr_tail');
  late final _wire_Expr_tail = _wire_Expr_tailPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_Expr_tan(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_tan(
      that,
    );
  }

  late final _wire_Expr_tanPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_tan');
  late final _wire_Expr_tan = _wire_Expr_tanPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_tanh(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_tanh(
      that,
    );
  }

  late final _wire_Expr_tanhPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_tanh');
  late final _wire_Expr_tanh = _wire_Expr_tanhPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_then(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Void> otherwise,
  ) {
    return _wire_Expr_then(
      that,
      value,
      otherwise,
    );
  }

  late final _wire_Expr_thenPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_then');
  late final _wire_Expr_then = _wire_Expr_thenPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_to_dot(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_to_dot(
      that,
    );
  }

  late final _wire_Expr_to_dotPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_to_dot');
  late final _wire_Expr_to_dot = _wire_Expr_to_dotPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_to_physical(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_to_physical(
      that,
    );
  }

  late final _wire_Expr_to_physicalPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_to_physical');
  late final _wire_Expr_to_physical = _wire_Expr_to_physicalPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_unique(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_unique(
      that,
    );
  }

  late final _wire_Expr_uniquePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_unique');
  late final _wire_Expr_unique = _wire_Expr_uniquePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_unique_stable(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_unique_stable(
      that,
    );
  }

  late final _wire_Expr_unique_stablePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_unique_stable');
  late final _wire_Expr_unique_stable = _wire_Expr_unique_stablePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_upper_bound(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Expr_upper_bound(
      that,
    );
  }

  late final _wire_Expr_upper_boundPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Expr_upper_bound');
  late final _wire_Expr_upper_bound = _wire_Expr_upper_boundPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Expr_value_counts(
    ffi.Pointer<ffi.Void> that,
    bool sort,
    bool parallel,
  ) {
    return _wire_Expr_value_counts(
      that,
      sort,
      parallel,
    );
  }

  late final _wire_Expr_value_countsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, ffi.Bool,
              ffi.Bool)>>('wire_Expr_value_counts');
  late final _wire_Expr_value_counts = _wire_Expr_value_countsPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool, bool)>();

  WireSyncRust2DartDco wire_Expr_variance(
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_Expr_variance(
      that,
      ddof,
    );
  }

  late final _wire_Expr_variancePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint8)>>('wire_Expr_variance');
  late final _wire_Expr_variance = _wire_Expr_variancePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Expr_xor(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> expr,
  ) {
    return _wire_Expr_xor(
      that,
      expr,
    );
  }

  late final _wire_Expr_xorPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('wire_Expr_xor');
  late final _wire_Expr_xor = _wire_Expr_xorPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_col(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
  ) {
    return _wire_col(
      name,
    );
  }

  late final _wire_colPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_col');
  late final _wire_col = _wire_colPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_cols(
    ffi.Pointer<wire_cst_list_String> names,
  ) {
    return _wire_cols(
      names,
    );
  }

  late final _wire_colsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_String>)>>('wire_cols');
  late final _wire_cols = _wire_colsPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_String>)>();

  WireSyncRust2DartDco wire_count() {
    return _wire_count();
  }

  late final _wire_countPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function()>>(
          'wire_count');
  late final _wire_count =
      _wire_countPtr.asFunction<WireSyncRust2DartDco Function()>();

  WireSyncRust2DartDco wire_dtypes(
    ffi.Pointer<wire_cst_list_data_type> types,
  ) {
    return _wire_dtypes(
      types,
    );
  }

  late final _wire_dtypesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_data_type>)>>('wire_dtypes');
  late final _wire_dtypes = _wire_dtypesPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_data_type>)>();

  WireSyncRust2DartDco wire_nth(
    int idx,
  ) {
    return _wire_nth(
      idx,
    );
  }

  late final _wire_nthPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function(ffi.Int64)>>(
          'wire_nth');
  late final _wire_nth =
      _wire_nthPtr.asFunction<WireSyncRust2DartDco Function(int)>();

  WireSyncRust2DartDco wire_LazyGroupBy_agg(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> exprs,
  ) {
    return _wire_LazyGroupBy_agg(
      that,
      exprs,
    );
  }

  late final _wire_LazyGroupBy_aggPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyGroupBy_agg');
  late final _wire_LazyGroupBy_agg = _wire_LazyGroupBy_aggPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyGroupBy_head(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> n,
  ) {
    return _wire_LazyGroupBy_head(
      that,
      n,
    );
  }

  late final _wire_LazyGroupBy_headPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_LazyGroupBy_head');
  late final _wire_LazyGroupBy_head = _wire_LazyGroupBy_headPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_LazyGroupBy_tail(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> n,
  ) {
    return _wire_LazyGroupBy_tail(
      that,
      n,
    );
  }

  late final _wire_LazyGroupBy_tailPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_LazyGroupBy_tail');
  late final _wire_LazyGroupBy_tail = _wire_LazyGroupBy_tailPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_Schema_of(
    ffi.Pointer<wire_cst_list_field> fields,
  ) {
    return _wire_Schema_of(
      fields,
    );
  }

  late final _wire_Schema_ofPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_field>)>>('wire_Schema_of');
  late final _wire_Schema_of = _wire_Schema_ofPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_field>)>();

  WireSyncRust2DartDco wire_Series_add_to(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_add_to(
      that,
      other,
    );
  }

  late final _wire_Series_add_toPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_add_to');
  late final _wire_Series_add_to = _wire_Series_add_toPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_append(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_append(
      that,
      other,
    );
  }

  late final _wire_Series_appendPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_append');
  late final _wire_Series_append = _wire_Series_appendPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_apply_scalar(
    ffi.Pointer<ffi.Void> that,
    int op,
    double value,
  ) {
    return _wire_Series_apply_scalar(
      that,
      op,
      value,
    );
  }

  late final _wire_Series_apply_scalarPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Double)>>('wire_Series_apply_scalar');
  late final _wire_Series_apply_scalar =
      _wire_Series_apply_scalarPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int, double)>();

  void wire_Series_as_doubles(
    int port_,
    ffi.Pointer<ffi.Void> that,
    bool strict,
  ) {
    return _wire_Series_as_doubles(
      port_,
      that,
      strict,
    );
  }

  late final _wire_Series_as_doublesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Bool)>>('wire_Series_as_doubles');
  late final _wire_Series_as_doubles = _wire_Series_as_doublesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Series_as_durations(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_durations(
      that,
    );
  }

  late final _wire_Series_as_durationsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_as_durations');
  late final _wire_Series_as_durations = _wire_Series_as_durationsPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_as_ints(
    ffi.Pointer<ffi.Void> that,
    bool strict,
  ) {
    return _wire_Series_as_ints(
      that,
      strict,
    );
  }

  late final _wire_Series_as_intsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Series_as_ints');
  late final _wire_Series_as_ints = _wire_Series_as_intsPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Series_as_local_datetime(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_local_datetime(
      that,
    );
  }

  late final _wire_Series_as_local_datetimePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_as_local_datetime');
  late final _wire_Series_as_local_datetime = _wire_Series_as_local_datetimePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_as_naive_datetime(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_naive_datetime(
      that,
    );
  }

  late final _wire_Series_as_naive_datetimePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_as_naive_datetime');
  late final _wire_Series_as_naive_datetime = _wire_Series_as_naive_datetimePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_as_strings(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_strings(
      that,
    );
  }

  late final _wire_Series_as_stringsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_as_strings');
  late final _wire_Series_as_strings = _wire_Series_as_stringsPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_as_utc_datetime(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_utc_datetime(
      that,
    );
  }

  late final _wire_Series_as_utc_datetimePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_as_utc_datetime');
  late final _wire_Series_as_utc_datetime = _wire_Series_as_utc_datetimePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_cast(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_data_type> dtype,
    bool strict,
  ) {
    return _wire_Series_cast(
      that,
      dtype,
      strict,
    );
  }

  late final _wire_Series_castPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_data_type>, ffi.Bool)>>('wire_Series_cast');
  late final _wire_Series_cast = _wire_Series_castPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_data_type>, bool)>();

  WireSyncRust2DartDco wire_Series_divide(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_divide(
      that,
      other,
    );
  }

  late final _wire_Series_dividePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_divide');
  late final _wire_Series_divide = _wire_Series_dividePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_dump(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_dump(
      that,
    );
  }

  late final _wire_Series_dumpPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_dump');
  late final _wire_Series_dump = _wire_Series_dumpPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_equal(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    bool ignore_null,
  ) {
    return _wire_Series_equal(
      that,
      other,
      ignore_null,
    );
  }

  late final _wire_Series_equalPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Series_equal');
  late final _wire_Series_equal = _wire_Series_equalPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Series_estimated_size(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_estimated_size(
      that,
    );
  }

  late final _wire_Series_estimated_sizePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_estimated_size');
  late final _wire_Series_estimated_size = _wire_Series_estimated_sizePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_explode(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_explode(
      that,
    );
  }

  late final _wire_Series_explodePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_explode');
  late final _wire_Series_explode = _wire_Series_explodePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_explode_by_offsets(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_i_64> offsets,
  ) {
    return _wire_Series_explode_by_offsets(
      that,
      offsets,
    );
  }

  late final _wire_Series_explode_by_offsetsPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<wire_cst_list_prim_i_64>)>>(
      'wire_Series_explode_by_offsets');
  late final _wire_Series_explode_by_offsets =
      _wire_Series_explode_by_offsetsPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_i_64>)>();

  WireSyncRust2DartDco wire_Series_get(
    ffi.Pointer<ffi.Void> that,
    int index,
  ) {
    return _wire_Series_get(
      that,
      index,
    );
  }

  late final _wire_Series_getPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.UintPtr)>>('wire_Series_get');
  late final _wire_Series_get = _wire_Series_getPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Series_get_string(
    ffi.Pointer<ffi.Void> that,
    int index,
  ) {
    return _wire_Series_get_string(
      that,
      index,
    );
  }

  late final _wire_Series_get_stringPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.UintPtr)>>('wire_Series_get_string');
  late final _wire_Series_get_string = _wire_Series_get_stringPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Series_head(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_Series_head(
      that,
      length,
    );
  }

  late final _wire_Series_headPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_Series_head');
  late final _wire_Series_head = _wire_Series_headPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_Series_into_frame(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_into_frame(
      that,
    );
  }

  late final _wire_Series_into_framePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_into_frame');
  late final _wire_Series_into_frame = _wire_Series_into_framePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_into_literal(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_into_literal(
      that,
    );
  }

  late final _wire_Series_into_literalPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_into_literal');
  late final _wire_Series_into_literal = _wire_Series_into_literalPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_is_bool(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_is_bool(
      that,
    );
  }

  late final _wire_Series_is_boolPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_is_bool');
  late final _wire_Series_is_bool = _wire_Series_is_boolPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_is_numeric(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_is_numeric(
      that,
    );
  }

  late final _wire_Series_is_numericPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_is_numeric');
  late final _wire_Series_is_numeric = _wire_Series_is_numericPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_is_temporal(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_is_temporal(
      that,
    );
  }

  late final _wire_Series_is_temporalPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_is_temporal');
  late final _wire_Series_is_temporal = _wire_Series_is_temporalPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_is_utf8(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_is_utf8(
      that,
    );
  }

  late final _wire_Series_is_utf8Ptr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_is_utf8');
  late final _wire_Series_is_utf8 = _wire_Series_is_utf8Ptr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_Series_iter(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_iter(
      port_,
      that,
    );
  }

  late final _wire_Series_iterPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_iter');
  late final _wire_Series_iter = _wire_Series_iterPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_max(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_max(
      that,
    );
  }

  late final _wire_Series_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_max');
  late final _wire_Series_max = _wire_Series_maxPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_mean(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_mean(
      that,
    );
  }

  late final _wire_Series_meanPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_mean');
  late final _wire_Series_mean = _wire_Series_meanPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_mean_as_series(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_mean_as_series(
      that,
    );
  }

  late final _wire_Series_mean_as_seriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_mean_as_series');
  late final _wire_Series_mean_as_series = _wire_Series_mean_as_seriesPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_median(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_median(
      that,
    );
  }

  late final _wire_Series_medianPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_median');
  late final _wire_Series_median = _wire_Series_medianPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_median_as_series(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_median_as_series(
      that,
    );
  }

  late final _wire_Series_median_as_seriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_median_as_series');
  late final _wire_Series_median_as_series = _wire_Series_median_as_seriesPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_min(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_min(
      that,
    );
  }

  late final _wire_Series_minPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_min');
  late final _wire_Series_min = _wire_Series_minPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_multiply(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_multiply(
      that,
      other,
    );
  }

  late final _wire_Series_multiplyPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_multiply');
  late final _wire_Series_multiply = _wire_Series_multiplyPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_of_bools(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_box_autoadd_bool> values,
  ) {
    return _wire_Series_of_bools(
      name,
      values,
    );
  }

  late final _wire_Series_of_boolsPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
                  ffi.Pointer<wire_cst_list_opt_box_autoadd_bool>)>>(
      'wire_Series_of_bools');
  late final _wire_Series_of_bools = _wire_Series_of_boolsPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_opt_box_autoadd_bool>)>();

  WireSyncRust2DartDco wire_Series_of_doubles(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64> values,
  ) {
    return _wire_Series_of_doubles(
      name,
      values,
    );
  }

  late final _wire_Series_of_doublesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
                  ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>)>>(
      'wire_Series_of_doubles');
  late final _wire_Series_of_doubles = _wire_Series_of_doublesPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>)>();

  WireSyncRust2DartDco wire_Series_of_durations(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration> values,
    int unit,
  ) {
    return _wire_Series_of_durations(
      name,
      values,
      unit,
    );
  }

  late final _wire_Series_of_durationsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>,
              ffi.Int32)>>('wire_Series_of_durations');
  late final _wire_Series_of_durations =
      _wire_Series_of_durationsPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>,
              int)>();

  WireSyncRust2DartDco wire_Series_of_i32(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32> values,
  ) {
    return _wire_Series_of_i32(
      name,
      values,
    );
  }

  late final _wire_Series_of_i32Ptr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
                  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>)>>(
      'wire_Series_of_i32');
  late final _wire_Series_of_i32 = _wire_Series_of_i32Ptr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>)>();

  WireSyncRust2DartDco wire_Series_of_ints(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64> values,
  ) {
    return _wire_Series_of_ints(
      name,
      values,
    );
  }

  late final _wire_Series_of_intsPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
                  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>)>>(
      'wire_Series_of_ints');
  late final _wire_Series_of_ints = _wire_Series_of_intsPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>)>();

  WireSyncRust2DartDco wire_Series_of_strings(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_String> values,
  ) {
    return _wire_Series_of_strings(
      name,
      values,
    );
  }

  late final _wire_Series_of_stringsPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
                  ffi.Pointer<wire_cst_list_opt_String>)>>(
      'wire_Series_of_strings');
  late final _wire_Series_of_strings = _wire_Series_of_stringsPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_opt_String>)>();

  WireSyncRust2DartDco wire_Series_product(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_product(
      that,
    );
  }

  late final _wire_Series_productPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_product');
  late final _wire_Series_product = _wire_Series_productPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_remainder(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_remainder(
      that,
      other,
    );
  }

  late final _wire_Series_remainderPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_remainder');
  late final _wire_Series_remainder = _wire_Series_remainderPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_rename(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> name,
  ) {
    return _wire_Series_rename(
      that,
      name,
    );
  }

  late final _wire_Series_renamePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_Series_rename');
  late final _wire_Series_rename = _wire_Series_renamePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Series_reshape(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_i_64> dims,
  ) {
    return _wire_Series_reshape(
      that,
      dims,
    );
  }

  late final _wire_Series_reshapePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_i_64>)>>('wire_Series_reshape');
  late final _wire_Series_reshape = _wire_Series_reshapePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_i_64>)>();

  WireSyncRust2DartDco wire_Series_rolling_max(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_i_64> by,
    ffi.Pointer<ffi.Int32> closed_window,
    ffi.Pointer<ffi.Int32> time_unit,
    ffi.Pointer<wire_cst_list_prim_u_8> timezone,
  ) {
    return _wire_Series_rolling_max(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
      time_unit,
      timezone,
    );
  }

  late final _wire_Series_rolling_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_i_64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_Series_rolling_max');
  late final _wire_Series_rolling_max = _wire_Series_rolling_maxPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_i_64>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Series_rolling_mean(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_i_64> by,
    ffi.Pointer<ffi.Int32> closed_window,
    ffi.Pointer<ffi.Int32> time_unit,
    ffi.Pointer<wire_cst_list_prim_u_8> timezone,
  ) {
    return _wire_Series_rolling_mean(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
      time_unit,
      timezone,
    );
  }

  late final _wire_Series_rolling_meanPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Int64>,
                  ffi.UintPtr,
                  ffi.Pointer<wire_cst_list_prim_f_64>,
                  ffi.Bool,
                  ffi.Pointer<wire_cst_list_prim_i_64>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<wire_cst_list_prim_u_8>)>>(
      'wire_Series_rolling_mean');
  late final _wire_Series_rolling_mean =
      _wire_Series_rolling_meanPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              int,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              bool,
              ffi.Pointer<wire_cst_list_prim_i_64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Series_rolling_median(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_i_64> by,
    ffi.Pointer<ffi.Int32> closed_window,
    ffi.Pointer<ffi.Int32> time_unit,
    ffi.Pointer<wire_cst_list_prim_u_8> timezone,
  ) {
    return _wire_Series_rolling_median(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
      time_unit,
      timezone,
    );
  }

  late final _wire_Series_rolling_medianPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Int64>,
                  ffi.UintPtr,
                  ffi.Pointer<wire_cst_list_prim_f_64>,
                  ffi.Bool,
                  ffi.Pointer<wire_cst_list_prim_i_64>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<wire_cst_list_prim_u_8>)>>(
      'wire_Series_rolling_median');
  late final _wire_Series_rolling_median =
      _wire_Series_rolling_medianPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              int,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              bool,
              ffi.Pointer<wire_cst_list_prim_i_64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Series_rolling_min(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_i_64> by,
    ffi.Pointer<ffi.Int32> closed_window,
    ffi.Pointer<ffi.Int32> time_unit,
    ffi.Pointer<wire_cst_list_prim_u_8> timezone,
  ) {
    return _wire_Series_rolling_min(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
      time_unit,
      timezone,
    );
  }

  late final _wire_Series_rolling_minPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_i_64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_Series_rolling_min');
  late final _wire_Series_rolling_min = _wire_Series_rolling_minPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_i_64>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Series_rolling_quantile(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_i_64> by,
    ffi.Pointer<ffi.Int32> closed_window,
    ffi.Pointer<ffi.Int32> time_unit,
    ffi.Pointer<wire_cst_list_prim_u_8> timezone,
  ) {
    return _wire_Series_rolling_quantile(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
      time_unit,
      timezone,
    );
  }

  late final _wire_Series_rolling_quantilePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Int64>,
                  ffi.UintPtr,
                  ffi.Pointer<wire_cst_list_prim_f_64>,
                  ffi.Bool,
                  ffi.Pointer<wire_cst_list_prim_i_64>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<wire_cst_list_prim_u_8>)>>(
      'wire_Series_rolling_quantile');
  late final _wire_Series_rolling_quantile =
      _wire_Series_rolling_quantilePtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              int,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              bool,
              ffi.Pointer<wire_cst_list_prim_i_64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Series_rolling_std(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_i_64> by,
    ffi.Pointer<ffi.Int32> closed_window,
    ffi.Pointer<ffi.Int32> time_unit,
    ffi.Pointer<wire_cst_list_prim_u_8> timezone,
  ) {
    return _wire_Series_rolling_std(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
      time_unit,
      timezone,
    );
  }

  late final _wire_Series_rolling_stdPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_i_64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_Series_rolling_std');
  late final _wire_Series_rolling_std = _wire_Series_rolling_stdPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_i_64>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Series_rolling_sum(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_i_64> by,
    ffi.Pointer<ffi.Int32> closed_window,
    ffi.Pointer<ffi.Int32> time_unit,
    ffi.Pointer<wire_cst_list_prim_u_8> timezone,
  ) {
    return _wire_Series_rolling_sum(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
      time_unit,
      timezone,
    );
  }

  late final _wire_Series_rolling_sumPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_i_64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_Series_rolling_sum');
  late final _wire_Series_rolling_sum = _wire_Series_rolling_sumPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_i_64>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Series_rolling_var(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Int64> window_size,
    int min_periods,
    ffi.Pointer<wire_cst_list_prim_f_64> weights,
    bool center,
    ffi.Pointer<wire_cst_list_prim_i_64> by,
    ffi.Pointer<ffi.Int32> closed_window,
    ffi.Pointer<ffi.Int32> time_unit,
    ffi.Pointer<wire_cst_list_prim_u_8> timezone,
  ) {
    return _wire_Series_rolling_var(
      that,
      window_size,
      min_periods,
      weights,
      center,
      by,
      closed_window,
      time_unit,
      timezone,
    );
  }

  late final _wire_Series_rolling_varPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int64>,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_list_prim_f_64>,
              ffi.Bool,
              ffi.Pointer<wire_cst_list_prim_i_64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_Series_rolling_var');
  late final _wire_Series_rolling_var = _wire_Series_rolling_varPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int64>,
          int,
          ffi.Pointer<wire_cst_list_prim_f_64>,
          bool,
          ffi.Pointer<wire_cst_list_prim_i_64>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_Series_shuffle(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Uint64> seed,
  ) {
    return _wire_Series_shuffle(
      that,
      seed,
    );
  }

  late final _wire_Series_shufflePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint64>)>>('wire_Series_shuffle');
  late final _wire_Series_shuffle = _wire_Series_shufflePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint64>)>();

  WireSyncRust2DartDco wire_Series_sort(
    ffi.Pointer<ffi.Void> that,
    bool reverse,
  ) {
    return _wire_Series_sort(
      that,
      reverse,
    );
  }

  late final _wire_Series_sortPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Series_sort');
  late final _wire_Series_sort = _wire_Series_sortPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Series_std_as_series(
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_Series_std_as_series(
      that,
      ddof,
    );
  }

  late final _wire_Series_std_as_seriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint8)>>('wire_Series_std_as_series');
  late final _wire_Series_std_as_series = _wire_Series_std_as_seriesPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Series_subtract(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_subtract(
      that,
      other,
    );
  }

  late final _wire_Series_subtractPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_subtract');
  late final _wire_Series_subtract = _wire_Series_subtractPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_sum(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_sum(
      that,
    );
  }

  late final _wire_Series_sumPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_sum');
  late final _wire_Series_sum = _wire_Series_sumPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_sum_as_series(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_sum_as_series(
      that,
    );
  }

  late final _wire_Series_sum_as_seriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_sum_as_series');
  late final _wire_Series_sum_as_series = _wire_Series_sum_as_seriesPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_tail(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_Series_tail(
      that,
      length,
    );
  }

  late final _wire_Series_tailPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_Series_tail');
  late final _wire_Series_tail = _wire_Series_tailPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_Series_to_list(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_to_list(
      that,
    );
  }

  late final _wire_Series_to_listPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_to_list');
  late final _wire_Series_to_list = _wire_Series_to_listPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_unique(
    ffi.Pointer<ffi.Void> that,
    bool maintain_order,
  ) {
    return _wire_Series_unique(
      that,
      maintain_order,
    );
  }

  late final _wire_Series_uniquePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Series_unique');
  late final _wire_Series_unique = _wire_Series_uniquePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Series_var_as_series(
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_Series_var_as_series(
      that,
      ddof,
    );
  }

  late final _wire_Series_var_as_seriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint8)>>('wire_Series_var_as_series');
  late final _wire_Series_var_as_series = _wire_Series_var_as_seriesPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  void
      rust_arc_increment_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries');
  late final _rust_arc_increment_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries =
      _rust_arc_increment_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries');
  late final _rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries =
      _rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockDataFrame(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockDataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockDataFrame');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockDataFrame =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockDataFramePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFrame(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFrame');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFrame =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFramePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockExpr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockExpr(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockExprPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockExpr');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockExpr =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockExprPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockExpr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockExpr(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockExprPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockExpr');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockExpr =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockExprPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyFrame(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyFrame');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyFrame =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyFramePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFrame(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFrame');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFrame =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFramePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyGroupByPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyGroupByPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupByPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupByPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionSchema(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionSchemaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionSchema');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionSchema =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionSchemaPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchema(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchemaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchema');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchema =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchemaPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecExprPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecExprPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecExprPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecExprPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSchema(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSchemaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSchema');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSchema =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSchemaPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchema(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchemaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchema');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchema =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchemaPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSeries(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSeries');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSeries =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeries(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeries');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeries =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecExpr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecExpr(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecExprPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecExpr');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecExpr =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecExprPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecExpr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecExpr(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecExprPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecExpr');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecExpr =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecExprPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecSeries(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecSeries');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecSeries =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeries(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeries');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeries =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int64> cst_new_box_autoadd_Chrono_Duration(
    int value,
  ) {
    return _cst_new_box_autoadd_Chrono_Duration(
      value,
    );
  }

  late final _cst_new_box_autoadd_Chrono_DurationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'cst_new_box_autoadd_Chrono_Duration');
  late final _cst_new_box_autoadd_Chrono_Duration =
      _cst_new_box_autoadd_Chrono_DurationPtr
          .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<ffi.Bool> cst_new_box_autoadd_bool(
    bool value,
  ) {
    return _cst_new_box_autoadd_bool(
      value,
    );
  }

  late final _cst_new_box_autoadd_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
          'cst_new_box_autoadd_bool');
  late final _cst_new_box_autoadd_bool = _cst_new_box_autoadd_boolPtr
      .asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_closed_window(
    int value,
  ) {
    return _cst_new_box_autoadd_closed_window(
      value,
    );
  }

  late final _cst_new_box_autoadd_closed_windowPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'cst_new_box_autoadd_closed_window');
  late final _cst_new_box_autoadd_closed_window =
      _cst_new_box_autoadd_closed_windowPtr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_csv_encoding(
    int value,
  ) {
    return _cst_new_box_autoadd_csv_encoding(
      value,
    );
  }

  late final _cst_new_box_autoadd_csv_encodingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'cst_new_box_autoadd_csv_encoding');
  late final _cst_new_box_autoadd_csv_encoding =
      _cst_new_box_autoadd_csv_encodingPtr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_cst_data_type> cst_new_box_autoadd_data_type() {
    return _cst_new_box_autoadd_data_type();
  }

  late final _cst_new_box_autoadd_data_typePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_data_type> Function()>>(
          'cst_new_box_autoadd_data_type');
  late final _cst_new_box_autoadd_data_type = _cst_new_box_autoadd_data_typePtr
      .asFunction<ffi.Pointer<wire_cst_data_type> Function()>();

  ffi.Pointer<ffi.Double> cst_new_box_autoadd_f_64(
    double value,
  ) {
    return _cst_new_box_autoadd_f_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_f_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>(
          'cst_new_box_autoadd_f_64');
  late final _cst_new_box_autoadd_f_64 = _cst_new_box_autoadd_f_64Ptr
      .asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_i_32(
    int value,
  ) {
    return _cst_new_box_autoadd_i_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_i_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'cst_new_box_autoadd_i_32');
  late final _cst_new_box_autoadd_i_32 = _cst_new_box_autoadd_i_32Ptr
      .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int64> cst_new_box_autoadd_i_64(
    int value,
  ) {
    return _cst_new_box_autoadd_i_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_i_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'cst_new_box_autoadd_i_64');
  late final _cst_new_box_autoadd_i_64 = _cst_new_box_autoadd_i_64Ptr
      .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_cst_literal_value> cst_new_box_autoadd_literal_value() {
    return _cst_new_box_autoadd_literal_value();
  }

  late final _cst_new_box_autoadd_literal_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_literal_value> Function()>>(
      'cst_new_box_autoadd_literal_value');
  late final _cst_new_box_autoadd_literal_value =
      _cst_new_box_autoadd_literal_valuePtr
          .asFunction<ffi.Pointer<wire_cst_literal_value> Function()>();

  ffi.Pointer<wire_cst_null_values> cst_new_box_autoadd_null_values() {
    return _cst_new_box_autoadd_null_values();
  }

  late final _cst_new_box_autoadd_null_valuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_null_values> Function()>>(
          'cst_new_box_autoadd_null_values');
  late final _cst_new_box_autoadd_null_values =
      _cst_new_box_autoadd_null_valuesPtr
          .asFunction<ffi.Pointer<wire_cst_null_values> Function()>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_quantile_interpol_options(
    int value,
  ) {
    return _cst_new_box_autoadd_quantile_interpol_options(
      value,
    );
  }

  late final _cst_new_box_autoadd_quantile_interpol_optionsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'cst_new_box_autoadd_quantile_interpol_options');
  late final _cst_new_box_autoadd_quantile_interpol_options =
      _cst_new_box_autoadd_quantile_interpol_optionsPtr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_cst_row_count> cst_new_box_autoadd_row_count() {
    return _cst_new_box_autoadd_row_count();
  }

  late final _cst_new_box_autoadd_row_countPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_row_count> Function()>>(
          'cst_new_box_autoadd_row_count');
  late final _cst_new_box_autoadd_row_count = _cst_new_box_autoadd_row_countPtr
      .asFunction<ffi.Pointer<wire_cst_row_count> Function()>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_time_unit(
    int value,
  ) {
    return _cst_new_box_autoadd_time_unit(
      value,
    );
  }

  late final _cst_new_box_autoadd_time_unitPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'cst_new_box_autoadd_time_unit');
  late final _cst_new_box_autoadd_time_unit = _cst_new_box_autoadd_time_unitPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Uint32> cst_new_box_autoadd_u_32(
    int value,
  ) {
    return _cst_new_box_autoadd_u_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'cst_new_box_autoadd_u_32');
  late final _cst_new_box_autoadd_u_32 = _cst_new_box_autoadd_u_32Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(
    int value,
  ) {
    return _cst_new_box_autoadd_u_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'cst_new_box_autoadd_u_64');
  late final _cst_new_box_autoadd_u_64 = _cst_new_box_autoadd_u_64Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.UintPtr> cst_new_box_autoadd_usize(
    int value,
  ) {
    return _cst_new_box_autoadd_usize(
      value,
    );
  }

  late final _cst_new_box_autoadd_usizePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>>(
      'cst_new_box_autoadd_usize');
  late final _cst_new_box_autoadd_usize = _cst_new_box_autoadd_usizePtr
      .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_window_mapping(
    int value,
  ) {
    return _cst_new_box_autoadd_window_mapping(
      value,
    );
  }

  late final _cst_new_box_autoadd_window_mappingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'cst_new_box_autoadd_window_mapping');
  late final _cst_new_box_autoadd_window_mapping =
      _cst_new_box_autoadd_window_mappingPtr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_cst_data_type> cst_new_box_data_type() {
    return _cst_new_box_data_type();
  }

  late final _cst_new_box_data_typePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_data_type> Function()>>(
          'cst_new_box_data_type');
  late final _cst_new_box_data_type = _cst_new_box_data_typePtr
      .asFunction<ffi.Pointer<wire_cst_data_type> Function()>();

  ffi.Pointer<wire_cst_list_String> cst_new_list_String(
    int len,
  ) {
    return _cst_new_list_String(
      len,
    );
  }

  late final _cst_new_list_StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_String> Function(
              ffi.Int32)>>('cst_new_list_String');
  late final _cst_new_list_String = _cst_new_list_StringPtr
      .asFunction<ffi.Pointer<wire_cst_list_String> Function(int)>();

  ffi.Pointer<wire_cst_list_bool> cst_new_list_bool(
    int len,
  ) {
    return _cst_new_list_bool(
      len,
    );
  }

  late final _cst_new_list_boolPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_list_bool> Function(ffi.Int32)>>(
      'cst_new_list_bool');
  late final _cst_new_list_bool = _cst_new_list_boolPtr
      .asFunction<ffi.Pointer<wire_cst_list_bool> Function(int)>();

  ffi.Pointer<wire_cst_list_data_type> cst_new_list_data_type(
    int len,
  ) {
    return _cst_new_list_data_type(
      len,
    );
  }

  late final _cst_new_list_data_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_data_type> Function(
              ffi.Int32)>>('cst_new_list_data_type');
  late final _cst_new_list_data_type = _cst_new_list_data_typePtr
      .asFunction<ffi.Pointer<wire_cst_list_data_type> Function(int)>();

  ffi.Pointer<wire_cst_list_field> cst_new_list_field(
    int len,
  ) {
    return _cst_new_list_field(
      len,
    );
  }

  late final _cst_new_list_fieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_field> Function(
              ffi.Int32)>>('cst_new_list_field');
  late final _cst_new_list_field = _cst_new_list_fieldPtr
      .asFunction<ffi.Pointer<wire_cst_list_field> Function(int)>();

  ffi.Pointer<wire_cst_list_opt_String> cst_new_list_opt_String(
    int len,
  ) {
    return _cst_new_list_opt_String(
      len,
    );
  }

  late final _cst_new_list_opt_StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_String> Function(
              ffi.Int32)>>('cst_new_list_opt_String');
  late final _cst_new_list_opt_String = _cst_new_list_opt_StringPtr
      .asFunction<ffi.Pointer<wire_cst_list_opt_String> Function(int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>
      cst_new_list_opt_box_autoadd_Chrono_Duration(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_Chrono_Duration(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_Chrono_DurationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_Chrono_Duration');
  late final _cst_new_list_opt_box_autoadd_Chrono_Duration =
      _cst_new_list_opt_box_autoadd_Chrono_DurationPtr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration> Function(
              int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_bool>
      cst_new_list_opt_box_autoadd_bool(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_bool(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_bool> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_bool');
  late final _cst_new_list_opt_box_autoadd_bool =
      _cst_new_list_opt_box_autoadd_boolPtr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_bool> Function(int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>
      cst_new_list_opt_box_autoadd_f_64(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_f_64(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_f_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_f_64');
  late final _cst_new_list_opt_box_autoadd_f_64 =
      _cst_new_list_opt_box_autoadd_f_64Ptr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64> Function(int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>
      cst_new_list_opt_box_autoadd_i_32(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_i_32(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_i_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_i_32');
  late final _cst_new_list_opt_box_autoadd_i_32 =
      _cst_new_list_opt_box_autoadd_i_32Ptr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32> Function(int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>
      cst_new_list_opt_box_autoadd_i_64(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_i_64(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_i_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_i_64');
  late final _cst_new_list_opt_box_autoadd_i_64 =
      _cst_new_list_opt_box_autoadd_i_64Ptr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_f_64> cst_new_list_prim_f_64(
    int len,
  ) {
    return _cst_new_list_prim_f_64(
      len,
    );
  }

  late final _cst_new_list_prim_f_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_f_64> Function(
              ffi.Int32)>>('cst_new_list_prim_f_64');
  late final _cst_new_list_prim_f_64 = _cst_new_list_prim_f_64Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_f_64> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_i_64> cst_new_list_prim_i_64(
    int len,
  ) {
    return _cst_new_list_prim_i_64(
      len,
    );
  }

  late final _cst_new_list_prim_i_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_i_64> Function(
              ffi.Int32)>>('cst_new_list_prim_i_64');
  late final _cst_new_list_prim_i_64 = _cst_new_list_prim_i_64Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_i_64> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_32> cst_new_list_prim_u_32(
    int len,
  ) {
    return _cst_new_list_prim_u_32(
      len,
    );
  }

  late final _cst_new_list_prim_u_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_32> Function(
              ffi.Int32)>>('cst_new_list_prim_u_32');
  late final _cst_new_list_prim_u_32 = _cst_new_list_prim_u_32Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_32> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8> cst_new_list_prim_u_8(
    int len,
  ) {
    return _cst_new_list_prim_u_8(
      len,
    );
  }

  late final _cst_new_list_prim_u_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8> Function(
              ffi.Int32)>>('cst_new_list_prim_u_8');
  late final _cst_new_list_prim_u_8 = _cst_new_list_prim_u_8Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8> Function(int)>();

  ffi.Pointer<wire_cst_list_record_string_string>
      cst_new_list_record_string_string(
    int len,
  ) {
    return _cst_new_list_record_string_string(
      len,
    );
  }

  late final _cst_new_list_record_string_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_record_string_string> Function(
              ffi.Int32)>>('cst_new_list_record_string_string');
  late final _cst_new_list_record_string_string =
      _cst_new_list_record_string_stringPtr.asFunction<
          ffi.Pointer<wire_cst_list_record_string_string> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_prim_f_64 extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_bool extends ffi.Struct {
  external ffi.Pointer<ffi.Bool> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_DataType_Datetime extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  external ffi.Pointer<wire_cst_list_prim_u_8> field1;
}

final class wire_cst_DataType_Duration extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_DataType_List extends ffi.Struct {
  external ffi.Pointer<wire_cst_data_type> field0;
}

final class wire_cst_data_type extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external DataTypeKind kind;
}

final class DataTypeKind extends ffi.Union {
  external wire_cst_DataType_Datetime Datetime;

  external wire_cst_DataType_Duration Duration;

  external wire_cst_DataType_List List;

  external wire_cst_DataType_Struct Struct;
}

final class wire_cst_DataType_Struct extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_field> field0;
}

final class wire_cst_list_field extends ffi.Struct {
  external ffi.Pointer<wire_cst_field> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_field extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> name;

  external ffi.Pointer<wire_cst_data_type> dtype;
}

final class wire_cst_list_data_type extends ffi.Struct {
  external ffi.Pointer<wire_cst_data_type> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_row_count extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> name;

  @ffi.Uint32()
  external int offset;
}

final class wire_cst_NullValues_AllColumnsSingle extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;
}

final class wire_cst_NullValues_AllColumns extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_String> field0;
}

final class wire_cst_record_string_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;

  external ffi.Pointer<wire_cst_list_prim_u_8> field1;
}

final class wire_cst_list_record_string_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_record_string_string> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_NullValues_Named extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_record_string_string> field0;
}

final class NullValuesKind extends ffi.Union {
  external wire_cst_NullValues_AllColumnsSingle AllColumnsSingle;

  external wire_cst_NullValues_AllColumns AllColumns;

  external wire_cst_NullValues_Named Named;
}

final class wire_cst_null_values extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external NullValuesKind kind;
}

final class wire_cst_list_prim_u_32 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_LiteralValue_Boolean extends ffi.Struct {
  @ffi.Bool()
  external bool field0;
}

final class wire_cst_LiteralValue_Utf8 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;
}

final class wire_cst_LiteralValue_Binary extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;
}

final class wire_cst_LiteralValue_Uint32 extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class wire_cst_LiteralValue_Uint64 extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

final class wire_cst_LiteralValue_Int32 extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_LiteralValue_Int64 extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class wire_cst_LiteralValue_Float32 extends ffi.Struct {
  @ffi.Float()
  external double field0;
}

final class wire_cst_LiteralValue_Float64 extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

final class wire_cst_LiteralValue_Range extends ffi.Struct {
  @ffi.Int64()
  external int low;

  @ffi.Int64()
  external int high;

  external ffi.Pointer<wire_cst_data_type> data_type;
}

final class wire_cst_LiteralValue_DateTime extends ffi.Struct {
  @ffi.Int64()
  external int field0;

  @ffi.Int32()
  external int field1;

  external ffi.Pointer<wire_cst_list_prim_u_8> field2;
}

final class wire_cst_LiteralValue_Duration extends ffi.Struct {
  @ffi.Int64()
  external int field0;

  @ffi.Int32()
  external int field1;
}

final class wire_cst_LiteralValue_Series extends ffi.Struct {
  external ffi.Pointer<ffi.Void> field0;
}

final class wire_cst_LiteralValue_Date extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_LiteralValue_Time extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class LiteralValueKind extends ffi.Union {
  external wire_cst_LiteralValue_Boolean Boolean;

  external wire_cst_LiteralValue_Utf8 Utf8;

  external wire_cst_LiteralValue_Binary Binary;

  external wire_cst_LiteralValue_Uint32 Uint32;

  external wire_cst_LiteralValue_Uint64 Uint64;

  external wire_cst_LiteralValue_Int32 Int32;

  external wire_cst_LiteralValue_Int64 Int64;

  external wire_cst_LiteralValue_Float32 Float32;

  external wire_cst_LiteralValue_Float64 Float64;

  external wire_cst_LiteralValue_Range Range;

  external wire_cst_LiteralValue_DateTime DateTime;

  external wire_cst_LiteralValue_Duration Duration;

  external wire_cst_LiteralValue_Series Series;

  external wire_cst_LiteralValue_Date Date;

  external wire_cst_LiteralValue_Time Time;
}

final class wire_cst_literal_value extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external LiteralValueKind kind;
}

final class wire_cst_list_prim_i_64 extends ffi.Struct {
  external ffi.Pointer<ffi.Int64> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_bool extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Bool>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_f_64 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Double>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_Chrono_Duration extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int64>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_i_32 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int32>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_i_64 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int64>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8>> ptr;

  @ffi.Int32()
  external int len;
}
