// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.6.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'wrapper/df.dart';
import 'wrapper/entry.dart';
import 'wrapper/expr.dart';
import 'wrapper/series.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'polars-wrapper',
    ioDirectory: '../../polars-wrapper/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Series dataFrameColumn(
      {required DataFrame that, required String column, dynamic hint});

  Series dataFrameColumnAt(
      {required DataFrame that, required int index, dynamic hint});

  VecSeries dataFrameColumns(
      {required DataFrame that, required List<String> columns, dynamic hint});

  Future<DataFrame> dataFrameDescribe(
      {required DataFrame that, Float64List? percentiles, dynamic hint});

  DataFrame dataFrameDrop(
      {required DataFrame that, required String column, dynamic hint});

  Series dataFrameDropInPlace(
      {required DataFrame that, required String column, dynamic hint});

  List<DataType> dataFrameDtypes({required DataFrame that, dynamic hint});

  String dataFrameDump({required DataFrame that, dynamic hint});

  int dataFrameEstimatedSize({required DataFrame that, dynamic hint});

  List<String> dataFrameGetColumnNames({required DataFrame that, dynamic hint});

  VecSeries dataFrameGetColumns({required DataFrame that, dynamic hint});

  List<dynamic> dataFrameGetRow(
      {required DataFrame that, required int index, dynamic hint});

  DataFrame dataFrameHead({required DataFrame that, int? length, dynamic hint});

  int dataFrameHeight({required DataFrame that, dynamic hint});

  bool dataFrameIsEmpty({required DataFrame that, dynamic hint});

  Stream<List<dynamic>> dataFrameIter({required DataFrame that, dynamic hint});

  LazyFrame dataFrameLazy(
      {required DataFrame that,
      bool? projectionPushdown,
      bool? predicatePushdown,
      bool? typeCoercion,
      bool? simplifyExpressions,
      bool? slicePushdown,
      bool? streaming,
      dynamic hint});

  Future<DataFrame> dataFrameMax({required DataFrame that, dynamic hint});

  DataFrame dataFrameOf({required OptionVecSeries series, dynamic hint});

  DataFrame dataFrameReverse({required DataFrame that, dynamic hint});

  Future<DataFrame> dataFrameSample(
      {required DataFrame that,
      required Series n,
      bool withReplacement = false,
      bool shuffle = false,
      int? seed,
      dynamic hint});

  Schema dataFrameSchema({required DataFrame that, dynamic hint});

  DataFrame dataFrameSelect(
      {required DataFrame that, required List<String> columns, dynamic hint});

  (int, int) dataFrameShape({required DataFrame that, dynamic hint});

  void dataFrameSortInPlace(
      {required DataFrame that,
      List<String> byColumn = const [],
      List<bool> descending = const [],
      bool maintainOrder = false,
      dynamic hint});

  DataFrame dataFrameTail({required DataFrame that, int? length, dynamic hint});

  int dataFrameWidth({required DataFrame that, dynamic hint});

  DataFrame dataFrameWithRowCount(
      {required DataFrame that,
      required String name,
      int? offset,
      dynamic hint});

  LazyFrame lazyFrameCache({required LazyFrame that, dynamic hint});

  Future<DataFrame> lazyFrameCollect({required LazyFrame that, dynamic hint});

  LazyFrame lazyFrameCrossJoin(
      {required LazyFrame that, required LazyFrame other, dynamic hint});

  LazyFrame lazyFrameDropNulls(
      {required LazyFrame that, required OptionVecExpr subset, dynamic hint});

  LazyFrame lazyFrameExplode(
      {required LazyFrame that, required VecExpr columns, dynamic hint});

  Future<DataFrame> lazyFrameFetch(
      {required LazyFrame that, required int nRows, dynamic hint});

  LazyFrame lazyFrameFilter(
      {required LazyFrame that, required Expr pred, dynamic hint});

  LazyFrame lazyFrameFirst({required LazyFrame that, dynamic hint});

  LazyGroupBy lazyFrameGroupBy(
      {required LazyFrame that,
      required VecExpr exprs,
      bool maintainOrder = false,
      dynamic hint});

  LazyFrame lazyFrameInnerJoin(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint});

  LazyFrame lazyFrameJoin(
      {required LazyFrame that,
      required LazyFrame other,
      required OptionVecExpr on,
      required OptionVecExpr leftOn,
      required OptionVecExpr rightOn,
      String suffix = r"_right",
      JoinType how = JoinType.left,
      bool allowParallel = true,
      bool forceParallel = false,
      dynamic hint});

  LazyFrame lazyFrameLast({required LazyFrame that, dynamic hint});

  LazyFrame lazyFrameLeftJoin(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint});

  LazyFrame lazyFrameLimit(
      {required LazyFrame that, required int n, dynamic hint});

  LazyFrame lazyFrameMax({required LazyFrame that, dynamic hint});

  LazyFrame lazyFrameMean({required LazyFrame that, dynamic hint});

  LazyFrame lazyFrameMedian({required LazyFrame that, dynamic hint});

  LazyFrame lazyFrameMelt(
      {required LazyFrame that,
      required List<String> idVars,
      required List<String> valueVars,
      String? variableName,
      String? valueName,
      bool streamable = true,
      dynamic hint});

  LazyFrame lazyFrameMin({required LazyFrame that, dynamic hint});

  LazyFrame lazyFrameOuterJoin(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint});

  LazyFrame lazyFrameQuantile(
      {required LazyFrame that,
      required Expr quantile,
      required QuantileInterpolOptions interpol,
      dynamic hint});

  LazyFrame lazyFrameReverse({required LazyFrame that, dynamic hint});

  LazyFrame lazyFrameSelect(
      {required LazyFrame that, required VecExpr exprs, dynamic hint});

  LazyFrame lazyFrameSlice(
      {required LazyFrame that,
      required int offset,
      required int len,
      dynamic hint});

  LazyFrame lazyFrameStd(
      {required LazyFrame that, required int ddof, dynamic hint});

  LazyFrame lazyFrameSum({required LazyFrame that, dynamic hint});

  LazyFrame lazyFrameTail(
      {required LazyFrame that, required int n, dynamic hint});

  LazyFrame lazyFrameUnique(
      {required LazyFrame that,
      List<String>? subset,
      required UniqueKeepStrategy keepStrategy,
      dynamic hint});

  LazyFrame lazyFrameVariance(
      {required LazyFrame that, required int ddof, dynamic hint});

  LazyFrame lazyFrameWithColumn(
      {required LazyFrame that, required Expr expr, dynamic hint});

  LazyFrame lazyFrameWithColumns(
      {required LazyFrame that, required VecExpr exprs, dynamic hint});

  LazyFrame lazyFrameWithRowCount(
      {required LazyFrame that,
      required String name,
      int? offset,
      dynamic hint});

  Future<DataFrame> readCsv(
      {required String path,
      List<DataType>? dtypesSlice,
      bool? hasHeader,
      List<String>? columns,
      String? commentChar,
      String? eolChar,
      int? chunkSize,
      int? sampleSize,
      RowCount? rowCount,
      CsvEncoding? encoding,
      int? nRows,
      int? nThreads,
      NullValues? nullValues,
      Uint32List? projection,
      String? quoteChar = '"',
      int skipRows = 0,
      int skipRowsAfterHeader = 0,
      bool ignoreErrors = false,
      bool rechunk = false,
      bool tryParseDates = true,
      bool lowMemory = false,
      dynamic hint});

  Future<DataFrame> readJson(
      {required String path,
      int? batchSize,
      List<String>? projection,
      dynamic hint});

  Future<LazyFrame> scanCsv(
      {required String path,
      required OptionSchema dtypeOverwrite,
      bool? hasHeader,
      String? commentChar,
      String? eolChar,
      String? quoteChar = '"',
      int skipRows = 0,
      int skipRowsAfterHeader = 0,
      RowCount? rowCount,
      CsvEncoding? encoding,
      int? nRows,
      NullValues? nullValues,
      bool ignoreErrors = false,
      bool rechunk = false,
      bool tryParseDates = true,
      int? inferSchemaLength = 100,
      bool cache = false,
      dynamic hint});

  Expr exprAbs({required Expr that, dynamic hint});

  Expr exprAdd({required Expr that, required Expr other, dynamic hint});

  Expr exprAggGroups({required Expr that, dynamic hint});

  Expr exprAlias({required Expr that, required String name, dynamic hint});

  Expr exprAll({required Expr that, bool ignoreNulls = false, dynamic hint});

  Expr exprAnd({required Expr that, required Expr expr, dynamic hint});

  Expr exprAny({required Expr that, bool ignoreNulls = false, dynamic hint});

  Expr exprAppend(
      {required Expr that,
      required Expr other,
      bool upcast = true,
      dynamic hint});

  Expr exprArccos({required Expr that, dynamic hint});

  Expr exprArccosh({required Expr that, dynamic hint});

  Expr exprArcsin({required Expr that, dynamic hint});

  Expr exprArcsinh({required Expr that, dynamic hint});

  Expr exprArctan({required Expr that, dynamic hint});

  Expr exprArctan2({required Expr that, required Expr x, dynamic hint});

  Expr exprArctanh({required Expr that, dynamic hint});

  Expr exprArgMax({required Expr that, dynamic hint});

  Expr exprArgMin({required Expr that, dynamic hint});

  Expr exprArgSort(
      {required Expr that,
      bool descending = false,
      bool nullsLast = false,
      bool multithreaded = true,
      bool maintainOrder = false,
      dynamic hint});

  Expr exprArgUnique({required Expr that, dynamic hint});

  Expr exprBackwardFill({required Expr that, int? limit, dynamic hint});

  Expr exprCast({required Expr that, required DataType dataType, dynamic hint});

  Expr exprCbrt({required Expr that, dynamic hint});

  Expr exprCeil({required Expr that, dynamic hint});

  Expr exprClip(
      {required Expr that, required Expr min, required Expr max, dynamic hint});

  Expr exprClipMax({required Expr that, required Expr max, dynamic hint});

  Expr exprClipMin({required Expr that, required Expr min, dynamic hint});

  Expr exprCos({required Expr that, dynamic hint});

  Expr exprCosh({required Expr that, dynamic hint});

  Expr exprCot({required Expr that, dynamic hint});

  Expr exprCount({required Expr that, dynamic hint});

  Expr exprCumCount({required Expr that, bool reverse = false, dynamic hint});

  Expr exprCumMax({required Expr that, bool reverse = false, dynamic hint});

  Expr exprCumMin({required Expr that, bool reverse = false, dynamic hint});

  Expr exprCumProd({required Expr that, bool reverse = false, dynamic hint});

  Expr exprCumSum({required Expr that, bool reverse = false, dynamic hint});

  Expr exprDegrees({required Expr that, dynamic hint});

  Expr exprDiv({required Expr that, required Expr other, dynamic hint});

  Expr exprDot({required Expr that, required Expr other, dynamic hint});

  Expr exprDropNans({required Expr that, dynamic hint});

  Expr exprDropNulls({required Expr that, dynamic hint});

  Expr exprEntropy(
      {required Expr that,
      required double base,
      bool normalize = false,
      dynamic hint});

  Expr exprEq({required Expr that, required Expr other, dynamic hint});

  Expr exprEqMissing({required Expr that, required Expr other, dynamic hint});

  Expr exprExclude(
      {required Expr that, required List<String> columns, dynamic hint});

  Expr exprExp({required Expr that, dynamic hint});

  Expr exprExplode({required Expr that, dynamic hint});

  Expr exprFillNan({required Expr that, required Expr value, dynamic hint});

  Expr exprFillNull({required Expr that, required Expr value, dynamic hint});

  Expr exprFilter({required Expr that, required Expr cond, dynamic hint});

  Expr exprFirst({required Expr that, dynamic hint});

  Expr exprFlatten({required Expr that, dynamic hint});

  Expr exprFloor({required Expr that, dynamic hint});

  Expr exprFloorDiv({required Expr that, required Expr rhs, dynamic hint});

  Expr exprForwardFill({required Expr that, int? limit, dynamic hint});

  Expr exprGather({required Expr that, required Expr idx, dynamic hint});

  Expr exprGet({required Expr that, required Expr idx, dynamic hint});

  Expr exprGt({required Expr that, required Expr other, dynamic hint});

  Expr exprGtEq({required Expr that, required Expr other, dynamic hint});

  Expr exprHead({required Expr that, int? length, dynamic hint});

  Expr exprImplode({required Expr that, dynamic hint});

  Expr exprIsFinite({required Expr that, dynamic hint});

  Expr exprIsIn({required Expr that, required Expr other, dynamic hint});

  Expr exprIsNan({required Expr that, dynamic hint});

  Expr exprIsNotNan({required Expr that, dynamic hint});

  Expr exprIsNotNull({required Expr that, dynamic hint});

  Expr exprIsNull({required Expr that, dynamic hint});

  Expr exprLast({required Expr that, dynamic hint});

  Expr exprLiteral({required LiteralValue value, dynamic hint});

  Expr exprLog({required Expr that, required double base, dynamic hint});

  Expr exprLog1P({required Expr that, dynamic hint});

  Expr exprLowerBound({required Expr that, dynamic hint});

  Expr exprLt({required Expr that, required Expr other, dynamic hint});

  Expr exprLtEq({required Expr that, required Expr other, dynamic hint});

  Expr exprMul({required Expr that, required Expr other, dynamic hint});

  Expr exprNUnique({required Expr that, dynamic hint});

  Expr exprNanMax({required Expr that, dynamic hint});

  Expr exprNanMin({required Expr that, dynamic hint});

  Expr exprNeq({required Expr that, required Expr other, dynamic hint});

  Expr exprNeqMissing({required Expr that, required Expr other, dynamic hint});

  Expr exprNot({required Expr that, dynamic hint});

  Expr exprNullCount({required Expr that, dynamic hint});

  Expr exprOr({required Expr that, required Expr expr, dynamic hint});

  Expr exprOver(
      {required Expr that,
      required VecExpr partiionBy,
      WindowMapping? kind,
      dynamic hint});

  Expr exprPow({required Expr that, required double exponent, dynamic hint});

  Expr exprProduct({required Expr that, dynamic hint});

  Expr exprQuantile(
      {required Expr that,
      required Expr quantile,
      QuantileInterpolOptions? interpol,
      dynamic hint});

  Expr exprRadians({required Expr that, dynamic hint});

  Expr exprRem({required Expr that, required Expr other, dynamic hint});

  Expr exprReshape({required Expr that, required Int64List dims, dynamic hint});

  Expr exprReverse({required Expr that, dynamic hint});

  Expr exprRollingMax(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint});

  Expr exprRollingMean(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint});

  Expr exprRollingMedian(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint});

  Expr exprRollingMin(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint});

  Expr exprRollingQuantile(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint});

  Expr exprRollingStd(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint});

  Expr exprRollingSum(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint});

  Expr exprRollingVar(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint});

  Expr exprRound({required Expr that, required int decimals, dynamic hint});

  Expr exprRoundSigFigs(
      {required Expr that, required int digits, dynamic hint});

  Expr exprSetSortedFlag(
      {required Expr that, required IsSorted sorted, dynamic hint});

  Expr exprShift({required Expr that, required Expr n, dynamic hint});

  Expr exprShiftAndFill(
      {required Expr that,
      required Expr n,
      required Expr fillValue,
      dynamic hint});

  Expr exprShrinkDtype({required Expr that, dynamic hint});

  Expr exprSin({required Expr that, dynamic hint});

  Expr exprSinh({required Expr that, dynamic hint});

  Expr exprSlice(
      {required Expr that,
      required Expr offset,
      required Expr length,
      dynamic hint});

  Expr exprSort(
      {required Expr that,
      bool descending = false,
      bool nullsLast = false,
      bool multithreaded = true,
      bool maintainOrder = false,
      dynamic hint});

  Expr exprSqrt({required Expr that, dynamic hint});

  Expr exprStd({required Expr that, required int ddof, dynamic hint});

  Expr exprStrictCast(
      {required Expr that, required DataType dataType, dynamic hint});

  Expr exprSub({required Expr that, required Expr other, dynamic hint});

  Expr exprSum({required Expr that, dynamic hint});

  Expr exprTail({required Expr that, int? length, dynamic hint});

  Expr exprTan({required Expr that, dynamic hint});

  Expr exprTanh({required Expr that, dynamic hint});

  Expr exprThen(
      {required Expr that,
      required Expr value,
      required Expr otherwise,
      dynamic hint});

  String exprToDot({required Expr that, dynamic hint});

  Expr exprToPhysical({required Expr that, dynamic hint});

  Expr exprUnique({required Expr that, dynamic hint});

  Expr exprUniqueStable({required Expr that, dynamic hint});

  Expr exprUpperBound({required Expr that, dynamic hint});

  Expr exprValueCounts(
      {required Expr that,
      bool sort = false,
      bool parallel = true,
      dynamic hint});

  Expr exprVariance({required Expr that, required int ddof, dynamic hint});

  Expr exprXor({required Expr that, required Expr expr, dynamic hint});

  Expr col({required String name, dynamic hint});

  Expr cols({required List<String> names, dynamic hint});

  Expr count({dynamic hint});

  Expr dtypes({required List<DataType> types, dynamic hint});

  Expr nth({required int idx, dynamic hint});

  LazyFrame lazyGroupByAgg(
      {required LazyGroupBy that, required VecExpr exprs, dynamic hint});

  LazyFrame lazyGroupByHead({required LazyGroupBy that, int? n, dynamic hint});

  LazyFrame lazyGroupByTail({required LazyGroupBy that, int? n, dynamic hint});

  Schema schemaOf({required List<Field> fields, dynamic hint});

  Series seriesAddTo(
      {required Series that, required Series other, dynamic hint});

  void seriesAppend(
      {required Series that, required Series other, dynamic hint});

  Series seriesApplyScalar(
      {required Series that,
      required Operator op,
      required double value,
      dynamic hint});

  Future<List<double?>> seriesAsDoubles(
      {required Series that, bool strict = true, dynamic hint});

  List<Duration?> seriesAsDurations({required Series that, dynamic hint});

  List<int?> seriesAsInts(
      {required Series that, bool strict = true, dynamic hint});

  List<DateTime?> seriesAsLocalDatetime({required Series that, dynamic hint});

  List<DateTime?> seriesAsNaiveDatetime({required Series that, dynamic hint});

  List<String?> seriesAsStrings({required Series that, dynamic hint});

  List<DateTime?> seriesAsUtcDatetime({required Series that, dynamic hint});

  Series seriesCast(
      {required Series that,
      required DataType dtype,
      bool strict = true,
      dynamic hint});

  Series seriesDivide(
      {required Series that, required Series other, dynamic hint});

  String seriesDump({required Series that, dynamic hint});

  bool seriesEqual(
      {required Series that,
      required Series other,
      bool ignoreNull = false,
      dynamic hint});

  int seriesEstimatedSize({required Series that, dynamic hint});

  Series seriesExplode({required Series that, dynamic hint});

  Series seriesExplodeByOffsets(
      {required Series that, required Int64List offsets, dynamic hint});

  double? seriesGet({required Series that, required int index, dynamic hint});

  String? seriesGetString(
      {required Series that, required int index, dynamic hint});

  Series seriesHead({required Series that, int? length, dynamic hint});

  DataFrame seriesIntoFrame({required Series that, dynamic hint});

  LiteralValue seriesIntoLiteral({required Series that, dynamic hint});

  bool seriesIsBool({required Series that, dynamic hint});

  bool seriesIsNumeric({required Series that, dynamic hint});

  bool seriesIsTemporal({required Series that, dynamic hint});

  bool seriesIsUtf8({required Series that, dynamic hint});

  Stream<dynamic> seriesIter({required Series that, dynamic hint});

  double? seriesMax({required Series that, dynamic hint});

  double? seriesMean({required Series that, dynamic hint});

  Series seriesMeanAsSeries({required Series that, dynamic hint});

  double? seriesMedian({required Series that, dynamic hint});

  Series seriesMedianAsSeries({required Series that, dynamic hint});

  double? seriesMin({required Series that, dynamic hint});

  Series seriesMultiply(
      {required Series that, required Series other, dynamic hint});

  Series seriesOfBools({String name = r"", List<bool?>? values, dynamic hint});

  Series seriesOfDoubles(
      {String name = r"", List<double?>? values, dynamic hint});

  Series seriesOfDurations(
      {String name = r"",
      List<Duration?>? values,
      TimeUnit unit = TimeUnit.milliseconds,
      dynamic hint});

  Series seriesOfI32({String name = r"", List<int?>? values, dynamic hint});

  Series seriesOfInts({String name = r"", List<int?>? values, dynamic hint});

  Series seriesOfStrings(
      {String name = r"", List<String?>? values, dynamic hint});

  Series seriesProduct({required Series that, dynamic hint});

  Series seriesRemainder(
      {required Series that, required Series other, dynamic hint});

  void seriesRename({required Series that, required String name, dynamic hint});

  Series seriesReshape(
      {required Series that, required Int64List dims, dynamic hint});

  Series seriesRollingMax(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint});

  Series seriesRollingMean(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint});

  Series seriesRollingMedian(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint});

  Series seriesRollingMin(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint});

  Series seriesRollingQuantile(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint});

  Series seriesRollingStd(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint});

  Series seriesRollingSum(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint});

  Series seriesRollingVar(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint});

  Series seriesShuffle({required Series that, int? seed, dynamic hint});

  Series seriesSort({required Series that, bool reverse = false, dynamic hint});

  Series seriesStdAsSeries(
      {required Series that, required int ddof, dynamic hint});

  Series seriesSubtract(
      {required Series that, required Series other, dynamic hint});

  double? seriesSum({required Series that, dynamic hint});

  Series seriesSumAsSeries({required Series that, dynamic hint});

  Series seriesTail({required Series that, int? length, dynamic hint});

  List<dynamic> seriesToList({required Series that, dynamic hint});

  Series seriesUnique(
      {required Series that, bool maintainOrder = false, dynamic hint});

  Series seriesVarAsSeries(
      {required Series that, required int ddof, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SpecialEqPSeries;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SpecialEqPSeries;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SpecialEqPSeriesPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataFrame;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataFrame;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DataFramePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Expr;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Expr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ExprPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LazyFrame;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LazyFrame;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LazyFramePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LazyGroupBy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LazyGroupBy;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LazyGroupByPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OptionSchema;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OptionSchema;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OptionSchemaPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OptionVecExpr;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OptionVecExpr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OptionVecExprPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OptionVecSeries;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OptionVecSeries;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OptionVecSeriesPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Schema;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Schema;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SchemaPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Series;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Series;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SeriesPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_VecExpr;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_VecExpr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VecExprPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VecSeries;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VecSeries;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VecSeriesPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Series dataFrameColumn(
      {required DataFrame that, required String column, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_String(column);
        return wire.wire_DataFrame_column(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameColumnConstMeta,
      argValues: [that, column],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameColumnConstMeta => const TaskConstMeta(
        debugName: "DataFrame_column",
        argNames: ["that", "column"],
      );

  @override
  Series dataFrameColumnAt(
      {required DataFrame that, required int index, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_usize(index);
        return wire.wire_DataFrame_column_at(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameColumnAtConstMeta,
      argValues: [that, index],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameColumnAtConstMeta => const TaskConstMeta(
        debugName: "DataFrame_column_at",
        argNames: ["that", "index"],
      );

  @override
  VecSeries dataFrameColumns(
      {required DataFrame that, required List<String> columns, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_list_String(columns);
        return wire.wire_DataFrame_columns(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockVecSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameColumnsConstMeta,
      argValues: [that, columns],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameColumnsConstMeta => const TaskConstMeta(
        debugName: "DataFrame_columns",
        argNames: ["that", "columns"],
      );

  @override
  Future<DataFrame> dataFrameDescribe(
      {required DataFrame that, Float64List? percentiles, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_opt_list_prim_f_64(percentiles);
        return wire.wire_DataFrame_describe(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameDescribeConstMeta,
      argValues: [that, percentiles],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameDescribeConstMeta => const TaskConstMeta(
        debugName: "DataFrame_describe",
        argNames: ["that", "percentiles"],
      );

  @override
  DataFrame dataFrameDrop(
      {required DataFrame that, required String column, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_String(column);
        return wire.wire_DataFrame_drop(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameDropConstMeta,
      argValues: [that, column],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameDropConstMeta => const TaskConstMeta(
        debugName: "DataFrame_drop",
        argNames: ["that", "column"],
      );

  @override
  Series dataFrameDropInPlace(
      {required DataFrame that, required String column, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_String(column);
        return wire.wire_DataFrame_drop_in_place(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameDropInPlaceConstMeta,
      argValues: [that, column],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameDropInPlaceConstMeta => const TaskConstMeta(
        debugName: "DataFrame_drop_in_place",
        argNames: ["that", "column"],
      );

  @override
  List<DataType> dataFrameDtypes({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_dtypes(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_data_type,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameDtypesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameDtypesConstMeta => const TaskConstMeta(
        debugName: "DataFrame_dtypes",
        argNames: ["that"],
      );

  @override
  String dataFrameDump({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_dump(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameDumpConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameDumpConstMeta => const TaskConstMeta(
        debugName: "DataFrame_dump",
        argNames: ["that"],
      );

  @override
  int dataFrameEstimatedSize({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_estimated_size(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameEstimatedSizeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameEstimatedSizeConstMeta => const TaskConstMeta(
        debugName: "DataFrame_estimated_size",
        argNames: ["that"],
      );

  @override
  List<String> dataFrameGetColumnNames(
      {required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_get_column_names(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameGetColumnNamesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameGetColumnNamesConstMeta => const TaskConstMeta(
        debugName: "DataFrame_get_column_names",
        argNames: ["that"],
      );

  @override
  VecSeries dataFrameGetColumns({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_get_columns(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockVecSeries,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameGetColumnsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameGetColumnsConstMeta => const TaskConstMeta(
        debugName: "DataFrame_get_columns",
        argNames: ["that"],
      );

  @override
  List<dynamic> dataFrameGetRow(
      {required DataFrame that, required int index, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_usize(index);
        return wire.wire_DataFrame_get_row(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_dartabi,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameGetRowConstMeta,
      argValues: [that, index],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameGetRowConstMeta => const TaskConstMeta(
        debugName: "DataFrame_get_row",
        argNames: ["that", "index"],
      );

  @override
  DataFrame dataFrameHead(
      {required DataFrame that, int? length, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_opt_box_autoadd_usize(length);
        return wire.wire_DataFrame_head(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameHeadConstMeta,
      argValues: [that, length],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameHeadConstMeta => const TaskConstMeta(
        debugName: "DataFrame_head",
        argNames: ["that", "length"],
      );

  @override
  int dataFrameHeight({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_height(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameHeightConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameHeightConstMeta => const TaskConstMeta(
        debugName: "DataFrame_height",
        argNames: ["that"],
      );

  @override
  bool dataFrameIsEmpty({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_is_empty(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameIsEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameIsEmptyConstMeta => const TaskConstMeta(
        debugName: "DataFrame_is_empty",
        argNames: ["that"],
      );

  @override
  Stream<List<dynamic>> dataFrameIter({required DataFrame that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_iter(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_dartabi,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameIterConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameIterConstMeta => const TaskConstMeta(
        debugName: "DataFrame_iter",
        argNames: ["that"],
      );

  @override
  LazyFrame dataFrameLazy(
      {required DataFrame that,
      bool? projectionPushdown,
      bool? predicatePushdown,
      bool? typeCoercion,
      bool? simplifyExpressions,
      bool? slicePushdown,
      bool? streaming,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_opt_box_autoadd_bool(projectionPushdown);
        var arg2 = cst_encode_opt_box_autoadd_bool(predicatePushdown);
        var arg3 = cst_encode_opt_box_autoadd_bool(typeCoercion);
        var arg4 = cst_encode_opt_box_autoadd_bool(simplifyExpressions);
        var arg5 = cst_encode_opt_box_autoadd_bool(slicePushdown);
        var arg6 = cst_encode_opt_box_autoadd_bool(streaming);
        return wire.wire_DataFrame_lazy(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameLazyConstMeta,
      argValues: [
        that,
        projectionPushdown,
        predicatePushdown,
        typeCoercion,
        simplifyExpressions,
        slicePushdown,
        streaming
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameLazyConstMeta => const TaskConstMeta(
        debugName: "DataFrame_lazy",
        argNames: [
          "that",
          "projectionPushdown",
          "predicatePushdown",
          "typeCoercion",
          "simplifyExpressions",
          "slicePushdown",
          "streaming"
        ],
      );

  @override
  Future<DataFrame> dataFrameMax({required DataFrame that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_max(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameMaxConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameMaxConstMeta => const TaskConstMeta(
        debugName: "DataFrame_max",
        argNames: ["that"],
      );

  @override
  DataFrame dataFrameOf({required OptionVecSeries series, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecSeries(
                series);
        return wire.wire_DataFrame_of(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameOfConstMeta,
      argValues: [series],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameOfConstMeta => const TaskConstMeta(
        debugName: "DataFrame_of",
        argNames: ["series"],
      );

  @override
  DataFrame dataFrameReverse({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_reverse(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameReverseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameReverseConstMeta => const TaskConstMeta(
        debugName: "DataFrame_reverse",
        argNames: ["that"],
      );

  @override
  Future<DataFrame> dataFrameSample(
      {required DataFrame that,
      required Series n,
      bool withReplacement = false,
      bool shuffle = false,
      int? seed,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(n);
        var arg2 = cst_encode_bool(withReplacement);
        var arg3 = cst_encode_bool(shuffle);
        var arg4 = cst_encode_opt_box_autoadd_u_64(seed);
        return wire.wire_DataFrame_sample(port_, arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameSampleConstMeta,
      argValues: [that, n, withReplacement, shuffle, seed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameSampleConstMeta => const TaskConstMeta(
        debugName: "DataFrame_sample",
        argNames: ["that", "n", "withReplacement", "shuffle", "seed"],
      );

  @override
  Schema dataFrameSchema({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_schema(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSchema,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameSchemaConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameSchemaConstMeta => const TaskConstMeta(
        debugName: "DataFrame_schema",
        argNames: ["that"],
      );

  @override
  DataFrame dataFrameSelect(
      {required DataFrame that, required List<String> columns, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_list_String(columns);
        return wire.wire_DataFrame_select(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameSelectConstMeta,
      argValues: [that, columns],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameSelectConstMeta => const TaskConstMeta(
        debugName: "DataFrame_select",
        argNames: ["that", "columns"],
      );

  @override
  (int, int) dataFrameShape({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_shape(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_usize_usize,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameShapeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameShapeConstMeta => const TaskConstMeta(
        debugName: "DataFrame_shape",
        argNames: ["that"],
      );

  @override
  void dataFrameSortInPlace(
      {required DataFrame that,
      List<String> byColumn = const [],
      List<bool> descending = const [],
      bool maintainOrder = false,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_list_String(byColumn);
        var arg2 = cst_encode_list_bool(descending);
        var arg3 = cst_encode_bool(maintainOrder);
        return wire.wire_DataFrame_sort_in_place(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameSortInPlaceConstMeta,
      argValues: [that, byColumn, descending, maintainOrder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameSortInPlaceConstMeta => const TaskConstMeta(
        debugName: "DataFrame_sort_in_place",
        argNames: ["that", "byColumn", "descending", "maintainOrder"],
      );

  @override
  DataFrame dataFrameTail(
      {required DataFrame that, int? length, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_opt_box_autoadd_usize(length);
        return wire.wire_DataFrame_tail(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameTailConstMeta,
      argValues: [that, length],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameTailConstMeta => const TaskConstMeta(
        debugName: "DataFrame_tail",
        argNames: ["that", "length"],
      );

  @override
  int dataFrameWidth({required DataFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        return wire.wire_DataFrame_width(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kDataFrameWidthConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameWidthConstMeta => const TaskConstMeta(
        debugName: "DataFrame_width",
        argNames: ["that"],
      );

  @override
  DataFrame dataFrameWithRowCount(
      {required DataFrame that,
      required String name,
      int? offset,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(that);
        var arg1 = cst_encode_String(name);
        var arg2 = cst_encode_opt_box_autoadd_u_32(offset);
        return wire.wire_DataFrame_with_row_count(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kDataFrameWithRowCountConstMeta,
      argValues: [that, name, offset],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDataFrameWithRowCountConstMeta => const TaskConstMeta(
        debugName: "DataFrame_with_row_count",
        argNames: ["that", "name", "offset"],
      );

  @override
  LazyFrame lazyFrameCache({required LazyFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_cache(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameCacheConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameCacheConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_cache",
        argNames: ["that"],
      );

  @override
  Future<DataFrame> lazyFrameCollect({required LazyFrame that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_collect(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kLazyFrameCollectConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameCollectConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_collect",
        argNames: ["that"],
      );

  @override
  LazyFrame lazyFrameCrossJoin(
      {required LazyFrame that, required LazyFrame other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(other);
        return wire.wire_LazyFrame_cross_join(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameCrossJoinConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameCrossJoinConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_cross_join",
        argNames: ["that", "other"],
      );

  @override
  LazyFrame lazyFrameDropNulls(
      {required LazyFrame that, required OptionVecExpr subset, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecExpr(subset);
        return wire.wire_LazyFrame_drop_nulls(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameDropNullsConstMeta,
      argValues: [that, subset],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameDropNullsConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_drop_nulls",
        argNames: ["that", "subset"],
      );

  @override
  LazyFrame lazyFrameExplode(
      {required LazyFrame that, required VecExpr columns, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(columns);
        return wire.wire_LazyFrame_explode(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameExplodeConstMeta,
      argValues: [that, columns],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameExplodeConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_explode",
        argNames: ["that", "columns"],
      );

  @override
  Future<DataFrame> lazyFrameFetch(
      {required LazyFrame that, required int nRows, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_usize(nRows);
        return wire.wire_LazyFrame_fetch(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kLazyFrameFetchConstMeta,
      argValues: [that, nRows],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameFetchConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_fetch",
        argNames: ["that", "nRows"],
      );

  @override
  LazyFrame lazyFrameFilter(
      {required LazyFrame that, required Expr pred, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(pred);
        return wire.wire_LazyFrame_filter(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kLazyFrameFilterConstMeta,
      argValues: [that, pred],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameFilterConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_filter",
        argNames: ["that", "pred"],
      );

  @override
  LazyFrame lazyFrameFirst({required LazyFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_first(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameFirstConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameFirstConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_first",
        argNames: ["that"],
      );

  @override
  LazyGroupBy lazyFrameGroupBy(
      {required LazyFrame that,
      required VecExpr exprs,
      bool maintainOrder = false,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(exprs);
        var arg2 = cst_encode_bool(maintainOrder);
        return wire.wire_LazyFrame_group_by(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameGroupByConstMeta,
      argValues: [that, exprs, maintainOrder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameGroupByConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_group_by",
        argNames: ["that", "exprs", "maintainOrder"],
      );

  @override
  LazyFrame lazyFrameInnerJoin(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(other);
        var arg2 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(leftOn);
        var arg3 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(rightOn);
        return wire.wire_LazyFrame_inner_join(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameInnerJoinConstMeta,
      argValues: [that, other, leftOn, rightOn],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameInnerJoinConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_inner_join",
        argNames: ["that", "other", "leftOn", "rightOn"],
      );

  @override
  LazyFrame lazyFrameJoin(
      {required LazyFrame that,
      required LazyFrame other,
      required OptionVecExpr on,
      required OptionVecExpr leftOn,
      required OptionVecExpr rightOn,
      String suffix = r"_right",
      JoinType how = JoinType.left,
      bool allowParallel = true,
      bool forceParallel = false,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(other);
        var arg2 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecExpr(on);
        var arg3 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecExpr(leftOn);
        var arg4 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecExpr(
            rightOn);
        var arg5 = cst_encode_String(suffix);
        var arg6 = cst_encode_join_type(how);
        var arg7 = cst_encode_bool(allowParallel);
        var arg8 = cst_encode_bool(forceParallel);
        return wire.wire_LazyFrame_join(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameJoinConstMeta,
      argValues: [
        that,
        other,
        on,
        leftOn,
        rightOn,
        suffix,
        how,
        allowParallel,
        forceParallel
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameJoinConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_join",
        argNames: [
          "that",
          "other",
          "on",
          "leftOn",
          "rightOn",
          "suffix",
          "how",
          "allowParallel",
          "forceParallel"
        ],
      );

  @override
  LazyFrame lazyFrameLast({required LazyFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_last(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameLastConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameLastConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_last",
        argNames: ["that"],
      );

  @override
  LazyFrame lazyFrameLeftJoin(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(other);
        var arg2 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(leftOn);
        var arg3 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(rightOn);
        return wire.wire_LazyFrame_left_join(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameLeftJoinConstMeta,
      argValues: [that, other, leftOn, rightOn],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameLeftJoinConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_left_join",
        argNames: ["that", "other", "leftOn", "rightOn"],
      );

  @override
  LazyFrame lazyFrameLimit(
      {required LazyFrame that, required int n, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_u_32(n);
        return wire.wire_LazyFrame_limit(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameLimitConstMeta,
      argValues: [that, n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameLimitConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_limit",
        argNames: ["that", "n"],
      );

  @override
  LazyFrame lazyFrameMax({required LazyFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_max(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameMaxConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameMaxConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_max",
        argNames: ["that"],
      );

  @override
  LazyFrame lazyFrameMean({required LazyFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_mean(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameMeanConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameMeanConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_mean",
        argNames: ["that"],
      );

  @override
  LazyFrame lazyFrameMedian({required LazyFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_median(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameMedianConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameMedianConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_median",
        argNames: ["that"],
      );

  @override
  LazyFrame lazyFrameMelt(
      {required LazyFrame that,
      required List<String> idVars,
      required List<String> valueVars,
      String? variableName,
      String? valueName,
      bool streamable = true,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_list_String(idVars);
        var arg2 = cst_encode_list_String(valueVars);
        var arg3 = cst_encode_opt_String(variableName);
        var arg4 = cst_encode_opt_String(valueName);
        var arg5 = cst_encode_bool(streamable);
        return wire.wire_LazyFrame_melt(arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameMeltConstMeta,
      argValues: [that, idVars, valueVars, variableName, valueName, streamable],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameMeltConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_melt",
        argNames: [
          "that",
          "idVars",
          "valueVars",
          "variableName",
          "valueName",
          "streamable"
        ],
      );

  @override
  LazyFrame lazyFrameMin({required LazyFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_min(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameMinConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameMinConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_min",
        argNames: ["that"],
      );

  @override
  LazyFrame lazyFrameOuterJoin(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(other);
        var arg2 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(leftOn);
        var arg3 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(rightOn);
        return wire.wire_LazyFrame_outer_join(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameOuterJoinConstMeta,
      argValues: [that, other, leftOn, rightOn],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameOuterJoinConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_outer_join",
        argNames: ["that", "other", "leftOn", "rightOn"],
      );

  @override
  LazyFrame lazyFrameQuantile(
      {required LazyFrame that,
      required Expr quantile,
      required QuantileInterpolOptions interpol,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(quantile);
        var arg2 = cst_encode_quantile_interpol_options(interpol);
        return wire.wire_LazyFrame_quantile(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameQuantileConstMeta,
      argValues: [that, quantile, interpol],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameQuantileConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_quantile",
        argNames: ["that", "quantile", "interpol"],
      );

  @override
  LazyFrame lazyFrameReverse({required LazyFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_reverse(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameReverseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameReverseConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_reverse",
        argNames: ["that"],
      );

  @override
  LazyFrame lazyFrameSelect(
      {required LazyFrame that, required VecExpr exprs, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(exprs);
        return wire.wire_LazyFrame_select(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kLazyFrameSelectConstMeta,
      argValues: [that, exprs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameSelectConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_select",
        argNames: ["that", "exprs"],
      );

  @override
  LazyFrame lazyFrameSlice(
      {required LazyFrame that,
      required int offset,
      required int len,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_i_64(offset);
        var arg2 = cst_encode_u_32(len);
        return wire.wire_LazyFrame_slice(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameSliceConstMeta,
      argValues: [that, offset, len],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameSliceConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_slice",
        argNames: ["that", "offset", "len"],
      );

  @override
  LazyFrame lazyFrameStd(
      {required LazyFrame that, required int ddof, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_u_8(ddof);
        return wire.wire_LazyFrame_std(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameStdConstMeta,
      argValues: [that, ddof],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameStdConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_std",
        argNames: ["that", "ddof"],
      );

  @override
  LazyFrame lazyFrameSum({required LazyFrame that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        return wire.wire_LazyFrame_sum(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameSumConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameSumConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_sum",
        argNames: ["that"],
      );

  @override
  LazyFrame lazyFrameTail(
      {required LazyFrame that, required int n, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_u_32(n);
        return wire.wire_LazyFrame_tail(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameTailConstMeta,
      argValues: [that, n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameTailConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_tail",
        argNames: ["that", "n"],
      );

  @override
  LazyFrame lazyFrameUnique(
      {required LazyFrame that,
      List<String>? subset,
      required UniqueKeepStrategy keepStrategy,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_opt_list_String(subset);
        var arg2 = cst_encode_unique_keep_strategy(keepStrategy);
        return wire.wire_LazyFrame_unique(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameUniqueConstMeta,
      argValues: [that, subset, keepStrategy],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameUniqueConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_unique",
        argNames: ["that", "subset", "keepStrategy"],
      );

  @override
  LazyFrame lazyFrameVariance(
      {required LazyFrame that, required int ddof, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_u_8(ddof);
        return wire.wire_LazyFrame_variance(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameVarianceConstMeta,
      argValues: [that, ddof],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameVarianceConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_variance",
        argNames: ["that", "ddof"],
      );

  @override
  LazyFrame lazyFrameWithColumn(
      {required LazyFrame that, required Expr expr, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(expr);
        return wire.wire_LazyFrame_with_column(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameWithColumnConstMeta,
      argValues: [that, expr],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameWithColumnConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_with_column",
        argNames: ["that", "expr"],
      );

  @override
  LazyFrame lazyFrameWithColumns(
      {required LazyFrame that, required VecExpr exprs, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(exprs);
        return wire.wire_LazyFrame_with_columns(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameWithColumnsConstMeta,
      argValues: [that, exprs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameWithColumnsConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_with_columns",
        argNames: ["that", "exprs"],
      );

  @override
  LazyFrame lazyFrameWithRowCount(
      {required LazyFrame that,
      required String name,
      int? offset,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(that);
        var arg1 = cst_encode_String(name);
        var arg2 = cst_encode_opt_box_autoadd_u_32(offset);
        return wire.wire_LazyFrame_with_row_count(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyFrameWithRowCountConstMeta,
      argValues: [that, name, offset],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyFrameWithRowCountConstMeta => const TaskConstMeta(
        debugName: "LazyFrame_with_row_count",
        argNames: ["that", "name", "offset"],
      );

  @override
  Future<DataFrame> readCsv(
      {required String path,
      List<DataType>? dtypesSlice,
      bool? hasHeader,
      List<String>? columns,
      String? commentChar,
      String? eolChar,
      int? chunkSize,
      int? sampleSize,
      RowCount? rowCount,
      CsvEncoding? encoding,
      int? nRows,
      int? nThreads,
      NullValues? nullValues,
      Uint32List? projection,
      String? quoteChar = '"',
      int skipRows = 0,
      int skipRowsAfterHeader = 0,
      bool ignoreErrors = false,
      bool rechunk = false,
      bool tryParseDates = true,
      bool lowMemory = false,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(path);
        var arg1 = cst_encode_opt_list_data_type(dtypesSlice);
        var arg2 = cst_encode_opt_box_autoadd_bool(hasHeader);
        var arg3 = cst_encode_opt_list_String(columns);
        var arg4 = cst_encode_opt_String(commentChar);
        var arg5 = cst_encode_opt_String(eolChar);
        var arg6 = cst_encode_opt_box_autoadd_usize(chunkSize);
        var arg7 = cst_encode_opt_box_autoadd_usize(sampleSize);
        var arg8 = cst_encode_opt_box_autoadd_row_count(rowCount);
        var arg9 = cst_encode_opt_box_autoadd_csv_encoding(encoding);
        var arg10 = cst_encode_opt_box_autoadd_usize(nRows);
        var arg11 = cst_encode_opt_box_autoadd_usize(nThreads);
        var arg12 = cst_encode_opt_box_autoadd_null_values(nullValues);
        var arg13 = cst_encode_opt_list_prim_u_32(projection);
        var arg14 = cst_encode_opt_String(quoteChar);
        var arg15 = cst_encode_usize(skipRows);
        var arg16 = cst_encode_usize(skipRowsAfterHeader);
        var arg17 = cst_encode_bool(ignoreErrors);
        var arg18 = cst_encode_bool(rechunk);
        var arg19 = cst_encode_bool(tryParseDates);
        var arg20 = cst_encode_bool(lowMemory);
        return wire.wire_read_csv(
            port_,
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
            arg6,
            arg7,
            arg8,
            arg9,
            arg10,
            arg11,
            arg12,
            arg13,
            arg14,
            arg15,
            arg16,
            arg17,
            arg18,
            arg19,
            arg20);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kReadCsvConstMeta,
      argValues: [
        path,
        dtypesSlice,
        hasHeader,
        columns,
        commentChar,
        eolChar,
        chunkSize,
        sampleSize,
        rowCount,
        encoding,
        nRows,
        nThreads,
        nullValues,
        projection,
        quoteChar,
        skipRows,
        skipRowsAfterHeader,
        ignoreErrors,
        rechunk,
        tryParseDates,
        lowMemory
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReadCsvConstMeta => const TaskConstMeta(
        debugName: "read_csv",
        argNames: [
          "path",
          "dtypesSlice",
          "hasHeader",
          "columns",
          "commentChar",
          "eolChar",
          "chunkSize",
          "sampleSize",
          "rowCount",
          "encoding",
          "nRows",
          "nThreads",
          "nullValues",
          "projection",
          "quoteChar",
          "skipRows",
          "skipRowsAfterHeader",
          "ignoreErrors",
          "rechunk",
          "tryParseDates",
          "lowMemory"
        ],
      );

  @override
  Future<DataFrame> readJson(
      {required String path,
      int? batchSize,
      List<String>? projection,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(path);
        var arg1 = cst_encode_opt_box_autoadd_usize(batchSize);
        var arg2 = cst_encode_opt_list_String(projection);
        return wire.wire_read_json(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kReadJsonConstMeta,
      argValues: [path, batchSize, projection],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReadJsonConstMeta => const TaskConstMeta(
        debugName: "read_json",
        argNames: ["path", "batchSize", "projection"],
      );

  @override
  Future<LazyFrame> scanCsv(
      {required String path,
      required OptionSchema dtypeOverwrite,
      bool? hasHeader,
      String? commentChar,
      String? eolChar,
      String? quoteChar = '"',
      int skipRows = 0,
      int skipRowsAfterHeader = 0,
      RowCount? rowCount,
      CsvEncoding? encoding,
      int? nRows,
      NullValues? nullValues,
      bool ignoreErrors = false,
      bool rechunk = false,
      bool tryParseDates = true,
      int? inferSchemaLength = 100,
      bool cache = false,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(path);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionSchema(
            dtypeOverwrite);
        var arg2 = cst_encode_opt_box_autoadd_bool(hasHeader);
        var arg3 = cst_encode_opt_String(commentChar);
        var arg4 = cst_encode_opt_String(eolChar);
        var arg5 = cst_encode_opt_String(quoteChar);
        var arg6 = cst_encode_usize(skipRows);
        var arg7 = cst_encode_usize(skipRowsAfterHeader);
        var arg8 = cst_encode_opt_box_autoadd_row_count(rowCount);
        var arg9 = cst_encode_opt_box_autoadd_csv_encoding(encoding);
        var arg10 = cst_encode_opt_box_autoadd_usize(nRows);
        var arg11 = cst_encode_opt_box_autoadd_null_values(nullValues);
        var arg12 = cst_encode_bool(ignoreErrors);
        var arg13 = cst_encode_bool(rechunk);
        var arg14 = cst_encode_bool(tryParseDates);
        var arg15 = cst_encode_opt_box_autoadd_usize(inferSchemaLength);
        var arg16 = cst_encode_bool(cache);
        return wire.wire_scan_csv(
            port_,
            arg0,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
            arg6,
            arg7,
            arg8,
            arg9,
            arg10,
            arg11,
            arg12,
            arg13,
            arg14,
            arg15,
            arg16);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kScanCsvConstMeta,
      argValues: [
        path,
        dtypeOverwrite,
        hasHeader,
        commentChar,
        eolChar,
        quoteChar,
        skipRows,
        skipRowsAfterHeader,
        rowCount,
        encoding,
        nRows,
        nullValues,
        ignoreErrors,
        rechunk,
        tryParseDates,
        inferSchemaLength,
        cache
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kScanCsvConstMeta => const TaskConstMeta(
        debugName: "scan_csv",
        argNames: [
          "path",
          "dtypeOverwrite",
          "hasHeader",
          "commentChar",
          "eolChar",
          "quoteChar",
          "skipRows",
          "skipRowsAfterHeader",
          "rowCount",
          "encoding",
          "nRows",
          "nullValues",
          "ignoreErrors",
          "rechunk",
          "tryParseDates",
          "inferSchemaLength",
          "cache"
        ],
      );

  @override
  Expr exprAbs({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_abs(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprAbsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprAbsConstMeta => const TaskConstMeta(
        debugName: "Expr_abs",
        argNames: ["that"],
      );

  @override
  Expr exprAdd({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_add(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprAddConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprAddConstMeta => const TaskConstMeta(
        debugName: "Expr_add",
        argNames: ["that", "other"],
      );

  @override
  Expr exprAggGroups({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_agg_groups(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprAggGroupsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprAggGroupsConstMeta => const TaskConstMeta(
        debugName: "Expr_agg_groups",
        argNames: ["that"],
      );

  @override
  Expr exprAlias({required Expr that, required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_String(name);
        return wire.wire_Expr_alias(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprAliasConstMeta,
      argValues: [that, name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprAliasConstMeta => const TaskConstMeta(
        debugName: "Expr_alias",
        argNames: ["that", "name"],
      );

  @override
  Expr exprAll({required Expr that, bool ignoreNulls = false, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(ignoreNulls);
        return wire.wire_Expr_all(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprAllConstMeta,
      argValues: [that, ignoreNulls],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprAllConstMeta => const TaskConstMeta(
        debugName: "Expr_all",
        argNames: ["that", "ignoreNulls"],
      );

  @override
  Expr exprAnd({required Expr that, required Expr expr, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(expr);
        return wire.wire_Expr_and(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprAndConstMeta,
      argValues: [that, expr],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprAndConstMeta => const TaskConstMeta(
        debugName: "Expr_and",
        argNames: ["that", "expr"],
      );

  @override
  Expr exprAny({required Expr that, bool ignoreNulls = false, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(ignoreNulls);
        return wire.wire_Expr_any(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprAnyConstMeta,
      argValues: [that, ignoreNulls],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprAnyConstMeta => const TaskConstMeta(
        debugName: "Expr_any",
        argNames: ["that", "ignoreNulls"],
      );

  @override
  Expr exprAppend(
      {required Expr that,
      required Expr other,
      bool upcast = true,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        var arg2 = cst_encode_bool(upcast);
        return wire.wire_Expr_append(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprAppendConstMeta,
      argValues: [that, other, upcast],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprAppendConstMeta => const TaskConstMeta(
        debugName: "Expr_append",
        argNames: ["that", "other", "upcast"],
      );

  @override
  Expr exprArccos({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_arccos(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArccosConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArccosConstMeta => const TaskConstMeta(
        debugName: "Expr_arccos",
        argNames: ["that"],
      );

  @override
  Expr exprArccosh({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_arccosh(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArccoshConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArccoshConstMeta => const TaskConstMeta(
        debugName: "Expr_arccosh",
        argNames: ["that"],
      );

  @override
  Expr exprArcsin({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_arcsin(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArcsinConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArcsinConstMeta => const TaskConstMeta(
        debugName: "Expr_arcsin",
        argNames: ["that"],
      );

  @override
  Expr exprArcsinh({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_arcsinh(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArcsinhConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArcsinhConstMeta => const TaskConstMeta(
        debugName: "Expr_arcsinh",
        argNames: ["that"],
      );

  @override
  Expr exprArctan({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_arctan(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArctanConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArctanConstMeta => const TaskConstMeta(
        debugName: "Expr_arctan",
        argNames: ["that"],
      );

  @override
  Expr exprArctan2({required Expr that, required Expr x, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(x);
        return wire.wire_Expr_arctan2(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArctan2ConstMeta,
      argValues: [that, x],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArctan2ConstMeta => const TaskConstMeta(
        debugName: "Expr_arctan2",
        argNames: ["that", "x"],
      );

  @override
  Expr exprArctanh({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_arctanh(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArctanhConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArctanhConstMeta => const TaskConstMeta(
        debugName: "Expr_arctanh",
        argNames: ["that"],
      );

  @override
  Expr exprArgMax({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_arg_max(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArgMaxConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArgMaxConstMeta => const TaskConstMeta(
        debugName: "Expr_arg_max",
        argNames: ["that"],
      );

  @override
  Expr exprArgMin({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_arg_min(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArgMinConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArgMinConstMeta => const TaskConstMeta(
        debugName: "Expr_arg_min",
        argNames: ["that"],
      );

  @override
  Expr exprArgSort(
      {required Expr that,
      bool descending = false,
      bool nullsLast = false,
      bool multithreaded = true,
      bool maintainOrder = false,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(descending);
        var arg2 = cst_encode_bool(nullsLast);
        var arg3 = cst_encode_bool(multithreaded);
        var arg4 = cst_encode_bool(maintainOrder);
        return wire.wire_Expr_arg_sort(arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArgSortConstMeta,
      argValues: [that, descending, nullsLast, multithreaded, maintainOrder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArgSortConstMeta => const TaskConstMeta(
        debugName: "Expr_arg_sort",
        argNames: [
          "that",
          "descending",
          "nullsLast",
          "multithreaded",
          "maintainOrder"
        ],
      );

  @override
  Expr exprArgUnique({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_arg_unique(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprArgUniqueConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprArgUniqueConstMeta => const TaskConstMeta(
        debugName: "Expr_arg_unique",
        argNames: ["that"],
      );

  @override
  Expr exprBackwardFill({required Expr that, int? limit, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_u_32(limit);
        return wire.wire_Expr_backward_fill(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprBackwardFillConstMeta,
      argValues: [that, limit],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprBackwardFillConstMeta => const TaskConstMeta(
        debugName: "Expr_backward_fill",
        argNames: ["that", "limit"],
      );

  @override
  Expr exprCast(
      {required Expr that, required DataType dataType, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_box_autoadd_data_type(dataType);
        return wire.wire_Expr_cast(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCastConstMeta,
      argValues: [that, dataType],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCastConstMeta => const TaskConstMeta(
        debugName: "Expr_cast",
        argNames: ["that", "dataType"],
      );

  @override
  Expr exprCbrt({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_cbrt(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCbrtConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCbrtConstMeta => const TaskConstMeta(
        debugName: "Expr_cbrt",
        argNames: ["that"],
      );

  @override
  Expr exprCeil({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_ceil(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCeilConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCeilConstMeta => const TaskConstMeta(
        debugName: "Expr_ceil",
        argNames: ["that"],
      );

  @override
  Expr exprClip(
      {required Expr that,
      required Expr min,
      required Expr max,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(min);
        var arg2 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(max);
        return wire.wire_Expr_clip(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprClipConstMeta,
      argValues: [that, min, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprClipConstMeta => const TaskConstMeta(
        debugName: "Expr_clip",
        argNames: ["that", "min", "max"],
      );

  @override
  Expr exprClipMax({required Expr that, required Expr max, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(max);
        return wire.wire_Expr_clip_max(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprClipMaxConstMeta,
      argValues: [that, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprClipMaxConstMeta => const TaskConstMeta(
        debugName: "Expr_clip_max",
        argNames: ["that", "max"],
      );

  @override
  Expr exprClipMin({required Expr that, required Expr min, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(min);
        return wire.wire_Expr_clip_min(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprClipMinConstMeta,
      argValues: [that, min],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprClipMinConstMeta => const TaskConstMeta(
        debugName: "Expr_clip_min",
        argNames: ["that", "min"],
      );

  @override
  Expr exprCos({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_cos(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCosConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCosConstMeta => const TaskConstMeta(
        debugName: "Expr_cos",
        argNames: ["that"],
      );

  @override
  Expr exprCosh({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_cosh(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCoshConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCoshConstMeta => const TaskConstMeta(
        debugName: "Expr_cosh",
        argNames: ["that"],
      );

  @override
  Expr exprCot({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_cot(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCotConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCotConstMeta => const TaskConstMeta(
        debugName: "Expr_cot",
        argNames: ["that"],
      );

  @override
  Expr exprCount({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_count(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCountConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCountConstMeta => const TaskConstMeta(
        debugName: "Expr_count",
        argNames: ["that"],
      );

  @override
  Expr exprCumCount({required Expr that, bool reverse = false, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(reverse);
        return wire.wire_Expr_cum_count(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCumCountConstMeta,
      argValues: [that, reverse],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCumCountConstMeta => const TaskConstMeta(
        debugName: "Expr_cum_count",
        argNames: ["that", "reverse"],
      );

  @override
  Expr exprCumMax({required Expr that, bool reverse = false, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(reverse);
        return wire.wire_Expr_cum_max(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCumMaxConstMeta,
      argValues: [that, reverse],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCumMaxConstMeta => const TaskConstMeta(
        debugName: "Expr_cum_max",
        argNames: ["that", "reverse"],
      );

  @override
  Expr exprCumMin({required Expr that, bool reverse = false, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(reverse);
        return wire.wire_Expr_cum_min(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCumMinConstMeta,
      argValues: [that, reverse],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCumMinConstMeta => const TaskConstMeta(
        debugName: "Expr_cum_min",
        argNames: ["that", "reverse"],
      );

  @override
  Expr exprCumProd({required Expr that, bool reverse = false, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(reverse);
        return wire.wire_Expr_cum_prod(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCumProdConstMeta,
      argValues: [that, reverse],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCumProdConstMeta => const TaskConstMeta(
        debugName: "Expr_cum_prod",
        argNames: ["that", "reverse"],
      );

  @override
  Expr exprCumSum({required Expr that, bool reverse = false, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(reverse);
        return wire.wire_Expr_cum_sum(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprCumSumConstMeta,
      argValues: [that, reverse],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprCumSumConstMeta => const TaskConstMeta(
        debugName: "Expr_cum_sum",
        argNames: ["that", "reverse"],
      );

  @override
  Expr exprDegrees({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_degrees(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprDegreesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprDegreesConstMeta => const TaskConstMeta(
        debugName: "Expr_degrees",
        argNames: ["that"],
      );

  @override
  Expr exprDiv({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_div(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprDivConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprDivConstMeta => const TaskConstMeta(
        debugName: "Expr_div",
        argNames: ["that", "other"],
      );

  @override
  Expr exprDot({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_dot(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprDotConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprDotConstMeta => const TaskConstMeta(
        debugName: "Expr_dot",
        argNames: ["that", "other"],
      );

  @override
  Expr exprDropNans({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_drop_nans(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprDropNansConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprDropNansConstMeta => const TaskConstMeta(
        debugName: "Expr_drop_nans",
        argNames: ["that"],
      );

  @override
  Expr exprDropNulls({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_drop_nulls(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprDropNullsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprDropNullsConstMeta => const TaskConstMeta(
        debugName: "Expr_drop_nulls",
        argNames: ["that"],
      );

  @override
  Expr exprEntropy(
      {required Expr that,
      required double base,
      bool normalize = false,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_f_64(base);
        var arg2 = cst_encode_bool(normalize);
        return wire.wire_Expr_entropy(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprEntropyConstMeta,
      argValues: [that, base, normalize],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprEntropyConstMeta => const TaskConstMeta(
        debugName: "Expr_entropy",
        argNames: ["that", "base", "normalize"],
      );

  @override
  Expr exprEq({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_eq(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprEqConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprEqConstMeta => const TaskConstMeta(
        debugName: "Expr_eq",
        argNames: ["that", "other"],
      );

  @override
  Expr exprEqMissing({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_eq_missing(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprEqMissingConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprEqMissingConstMeta => const TaskConstMeta(
        debugName: "Expr_eq_missing",
        argNames: ["that", "other"],
      );

  @override
  Expr exprExclude(
      {required Expr that, required List<String> columns, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_list_String(columns);
        return wire.wire_Expr_exclude(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprExcludeConstMeta,
      argValues: [that, columns],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprExcludeConstMeta => const TaskConstMeta(
        debugName: "Expr_exclude",
        argNames: ["that", "columns"],
      );

  @override
  Expr exprExp({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_exp(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprExpConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprExpConstMeta => const TaskConstMeta(
        debugName: "Expr_exp",
        argNames: ["that"],
      );

  @override
  Expr exprExplode({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_explode(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprExplodeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprExplodeConstMeta => const TaskConstMeta(
        debugName: "Expr_explode",
        argNames: ["that"],
      );

  @override
  Expr exprFillNan({required Expr that, required Expr value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(value);
        return wire.wire_Expr_fill_nan(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprFillNanConstMeta,
      argValues: [that, value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprFillNanConstMeta => const TaskConstMeta(
        debugName: "Expr_fill_nan",
        argNames: ["that", "value"],
      );

  @override
  Expr exprFillNull({required Expr that, required Expr value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(value);
        return wire.wire_Expr_fill_null(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprFillNullConstMeta,
      argValues: [that, value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprFillNullConstMeta => const TaskConstMeta(
        debugName: "Expr_fill_null",
        argNames: ["that", "value"],
      );

  @override
  Expr exprFilter({required Expr that, required Expr cond, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(cond);
        return wire.wire_Expr_filter(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprFilterConstMeta,
      argValues: [that, cond],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprFilterConstMeta => const TaskConstMeta(
        debugName: "Expr_filter",
        argNames: ["that", "cond"],
      );

  @override
  Expr exprFirst({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_first(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprFirstConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprFirstConstMeta => const TaskConstMeta(
        debugName: "Expr_first",
        argNames: ["that"],
      );

  @override
  Expr exprFlatten({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_flatten(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprFlattenConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprFlattenConstMeta => const TaskConstMeta(
        debugName: "Expr_flatten",
        argNames: ["that"],
      );

  @override
  Expr exprFloor({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_floor(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprFloorConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprFloorConstMeta => const TaskConstMeta(
        debugName: "Expr_floor",
        argNames: ["that"],
      );

  @override
  Expr exprFloorDiv({required Expr that, required Expr rhs, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(rhs);
        return wire.wire_Expr_floor_div(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprFloorDivConstMeta,
      argValues: [that, rhs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprFloorDivConstMeta => const TaskConstMeta(
        debugName: "Expr_floor_div",
        argNames: ["that", "rhs"],
      );

  @override
  Expr exprForwardFill({required Expr that, int? limit, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_u_32(limit);
        return wire.wire_Expr_forward_fill(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprForwardFillConstMeta,
      argValues: [that, limit],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprForwardFillConstMeta => const TaskConstMeta(
        debugName: "Expr_forward_fill",
        argNames: ["that", "limit"],
      );

  @override
  Expr exprGather({required Expr that, required Expr idx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(idx);
        return wire.wire_Expr_gather(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprGatherConstMeta,
      argValues: [that, idx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprGatherConstMeta => const TaskConstMeta(
        debugName: "Expr_gather",
        argNames: ["that", "idx"],
      );

  @override
  Expr exprGet({required Expr that, required Expr idx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(idx);
        return wire.wire_Expr_get(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprGetConstMeta,
      argValues: [that, idx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprGetConstMeta => const TaskConstMeta(
        debugName: "Expr_get",
        argNames: ["that", "idx"],
      );

  @override
  Expr exprGt({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_gt(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprGtConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprGtConstMeta => const TaskConstMeta(
        debugName: "Expr_gt",
        argNames: ["that", "other"],
      );

  @override
  Expr exprGtEq({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_gt_eq(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprGtEqConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprGtEqConstMeta => const TaskConstMeta(
        debugName: "Expr_gt_eq",
        argNames: ["that", "other"],
      );

  @override
  Expr exprHead({required Expr that, int? length, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_usize(length);
        return wire.wire_Expr_head(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprHeadConstMeta,
      argValues: [that, length],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprHeadConstMeta => const TaskConstMeta(
        debugName: "Expr_head",
        argNames: ["that", "length"],
      );

  @override
  Expr exprImplode({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_implode(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprImplodeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprImplodeConstMeta => const TaskConstMeta(
        debugName: "Expr_implode",
        argNames: ["that"],
      );

  @override
  Expr exprIsFinite({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_is_finite(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprIsFiniteConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprIsFiniteConstMeta => const TaskConstMeta(
        debugName: "Expr_is_finite",
        argNames: ["that"],
      );

  @override
  Expr exprIsIn({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_is_in(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprIsInConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprIsInConstMeta => const TaskConstMeta(
        debugName: "Expr_is_in",
        argNames: ["that", "other"],
      );

  @override
  Expr exprIsNan({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_is_nan(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprIsNanConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprIsNanConstMeta => const TaskConstMeta(
        debugName: "Expr_is_nan",
        argNames: ["that"],
      );

  @override
  Expr exprIsNotNan({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_is_not_nan(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprIsNotNanConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprIsNotNanConstMeta => const TaskConstMeta(
        debugName: "Expr_is_not_nan",
        argNames: ["that"],
      );

  @override
  Expr exprIsNotNull({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_is_not_null(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprIsNotNullConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprIsNotNullConstMeta => const TaskConstMeta(
        debugName: "Expr_is_not_null",
        argNames: ["that"],
      );

  @override
  Expr exprIsNull({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_is_null(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprIsNullConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprIsNullConstMeta => const TaskConstMeta(
        debugName: "Expr_is_null",
        argNames: ["that"],
      );

  @override
  Expr exprLast({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_last(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprLastConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprLastConstMeta => const TaskConstMeta(
        debugName: "Expr_last",
        argNames: ["that"],
      );

  @override
  Expr exprLiteral({required LiteralValue value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_literal_value(value);
        return wire.wire_Expr_literal(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprLiteralConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprLiteralConstMeta => const TaskConstMeta(
        debugName: "Expr_literal",
        argNames: ["value"],
      );

  @override
  Expr exprLog({required Expr that, required double base, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_f_64(base);
        return wire.wire_Expr_log(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprLogConstMeta,
      argValues: [that, base],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprLogConstMeta => const TaskConstMeta(
        debugName: "Expr_log",
        argNames: ["that", "base"],
      );

  @override
  Expr exprLog1P({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_log1p(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprLog1PConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprLog1PConstMeta => const TaskConstMeta(
        debugName: "Expr_log1p",
        argNames: ["that"],
      );

  @override
  Expr exprLowerBound({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_lower_bound(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprLowerBoundConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprLowerBoundConstMeta => const TaskConstMeta(
        debugName: "Expr_lower_bound",
        argNames: ["that"],
      );

  @override
  Expr exprLt({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_lt(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprLtConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprLtConstMeta => const TaskConstMeta(
        debugName: "Expr_lt",
        argNames: ["that", "other"],
      );

  @override
  Expr exprLtEq({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_lt_eq(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprLtEqConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprLtEqConstMeta => const TaskConstMeta(
        debugName: "Expr_lt_eq",
        argNames: ["that", "other"],
      );

  @override
  Expr exprMul({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_mul(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprMulConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprMulConstMeta => const TaskConstMeta(
        debugName: "Expr_mul",
        argNames: ["that", "other"],
      );

  @override
  Expr exprNUnique({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_n_unique(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprNUniqueConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprNUniqueConstMeta => const TaskConstMeta(
        debugName: "Expr_n_unique",
        argNames: ["that"],
      );

  @override
  Expr exprNanMax({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_nan_max(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprNanMaxConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprNanMaxConstMeta => const TaskConstMeta(
        debugName: "Expr_nan_max",
        argNames: ["that"],
      );

  @override
  Expr exprNanMin({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_nan_min(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprNanMinConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprNanMinConstMeta => const TaskConstMeta(
        debugName: "Expr_nan_min",
        argNames: ["that"],
      );

  @override
  Expr exprNeq({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_neq(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprNeqConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprNeqConstMeta => const TaskConstMeta(
        debugName: "Expr_neq",
        argNames: ["that", "other"],
      );

  @override
  Expr exprNeqMissing({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_neq_missing(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprNeqMissingConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprNeqMissingConstMeta => const TaskConstMeta(
        debugName: "Expr_neq_missing",
        argNames: ["that", "other"],
      );

  @override
  Expr exprNot({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_not(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprNotConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprNotConstMeta => const TaskConstMeta(
        debugName: "Expr_not",
        argNames: ["that"],
      );

  @override
  Expr exprNullCount({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_null_count(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprNullCountConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprNullCountConstMeta => const TaskConstMeta(
        debugName: "Expr_null_count",
        argNames: ["that"],
      );

  @override
  Expr exprOr({required Expr that, required Expr expr, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(expr);
        return wire.wire_Expr_or(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprOrConstMeta,
      argValues: [that, expr],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprOrConstMeta => const TaskConstMeta(
        debugName: "Expr_or",
        argNames: ["that", "expr"],
      );

  @override
  Expr exprOver(
      {required Expr that,
      required VecExpr partiionBy,
      WindowMapping? kind,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(partiionBy);
        var arg2 = cst_encode_opt_box_autoadd_window_mapping(kind);
        return wire.wire_Expr_over(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprOverConstMeta,
      argValues: [that, partiionBy, kind],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprOverConstMeta => const TaskConstMeta(
        debugName: "Expr_over",
        argNames: ["that", "partiionBy", "kind"],
      );

  @override
  Expr exprPow({required Expr that, required double exponent, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_f_64(exponent);
        return wire.wire_Expr_pow(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprPowConstMeta,
      argValues: [that, exponent],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprPowConstMeta => const TaskConstMeta(
        debugName: "Expr_pow",
        argNames: ["that", "exponent"],
      );

  @override
  Expr exprProduct({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_product(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprProductConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprProductConstMeta => const TaskConstMeta(
        debugName: "Expr_product",
        argNames: ["that"],
      );

  @override
  Expr exprQuantile(
      {required Expr that,
      required Expr quantile,
      QuantileInterpolOptions? interpol,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(quantile);
        var arg2 =
            cst_encode_opt_box_autoadd_quantile_interpol_options(interpol);
        return wire.wire_Expr_quantile(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprQuantileConstMeta,
      argValues: [that, quantile, interpol],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprQuantileConstMeta => const TaskConstMeta(
        debugName: "Expr_quantile",
        argNames: ["that", "quantile", "interpol"],
      );

  @override
  Expr exprRadians({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_radians(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRadiansConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRadiansConstMeta => const TaskConstMeta(
        debugName: "Expr_radians",
        argNames: ["that"],
      );

  @override
  Expr exprRem({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_rem(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRemConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRemConstMeta => const TaskConstMeta(
        debugName: "Expr_rem",
        argNames: ["that", "other"],
      );

  @override
  Expr exprReshape(
      {required Expr that, required Int64List dims, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_list_prim_i_64(dims);
        return wire.wire_Expr_reshape(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprReshapeConstMeta,
      argValues: [that, dims],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprReshapeConstMeta => const TaskConstMeta(
        debugName: "Expr_reshape",
        argNames: ["that", "dims"],
      );

  @override
  Expr exprReverse({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_reverse(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprReverseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprReverseConstMeta => const TaskConstMeta(
        debugName: "Expr_reverse",
        argNames: ["that"],
      );

  @override
  Expr exprRollingMax(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_String(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        return wire.wire_Expr_rolling_max(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRollingMaxConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRollingMaxConstMeta => const TaskConstMeta(
        debugName: "Expr_rolling_max",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow"
        ],
      );

  @override
  Expr exprRollingMean(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_String(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        return wire.wire_Expr_rolling_mean(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRollingMeanConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRollingMeanConstMeta => const TaskConstMeta(
        debugName: "Expr_rolling_mean",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow"
        ],
      );

  @override
  Expr exprRollingMedian(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_String(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        return wire.wire_Expr_rolling_median(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRollingMedianConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRollingMedianConstMeta => const TaskConstMeta(
        debugName: "Expr_rolling_median",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow"
        ],
      );

  @override
  Expr exprRollingMin(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_String(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        return wire.wire_Expr_rolling_min(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRollingMinConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRollingMinConstMeta => const TaskConstMeta(
        debugName: "Expr_rolling_min",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow"
        ],
      );

  @override
  Expr exprRollingQuantile(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_String(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        return wire.wire_Expr_rolling_quantile(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRollingQuantileConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRollingQuantileConstMeta => const TaskConstMeta(
        debugName: "Expr_rolling_quantile",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow"
        ],
      );

  @override
  Expr exprRollingStd(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_String(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        return wire.wire_Expr_rolling_std(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRollingStdConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRollingStdConstMeta => const TaskConstMeta(
        debugName: "Expr_rolling_std",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow"
        ],
      );

  @override
  Expr exprRollingSum(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_String(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        return wire.wire_Expr_rolling_sum(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRollingSumConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRollingSumConstMeta => const TaskConstMeta(
        debugName: "Expr_rolling_sum",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow"
        ],
      );

  @override
  Expr exprRollingVar(
      {required Expr that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      String? by,
      ClosedWindow? closedWindow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_String(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        return wire.wire_Expr_rolling_var(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRollingVarConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRollingVarConstMeta => const TaskConstMeta(
        debugName: "Expr_rolling_var",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow"
        ],
      );

  @override
  Expr exprRound({required Expr that, required int decimals, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_u_32(decimals);
        return wire.wire_Expr_round(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRoundConstMeta,
      argValues: [that, decimals],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRoundConstMeta => const TaskConstMeta(
        debugName: "Expr_round",
        argNames: ["that", "decimals"],
      );

  @override
  Expr exprRoundSigFigs(
      {required Expr that, required int digits, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_i_32(digits);
        return wire.wire_Expr_round_sig_figs(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprRoundSigFigsConstMeta,
      argValues: [that, digits],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprRoundSigFigsConstMeta => const TaskConstMeta(
        debugName: "Expr_round_sig_figs",
        argNames: ["that", "digits"],
      );

  @override
  Expr exprSetSortedFlag(
      {required Expr that, required IsSorted sorted, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_is_sorted(sorted);
        return wire.wire_Expr_set_sorted_flag(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprSetSortedFlagConstMeta,
      argValues: [that, sorted],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprSetSortedFlagConstMeta => const TaskConstMeta(
        debugName: "Expr_set_sorted_flag",
        argNames: ["that", "sorted"],
      );

  @override
  Expr exprShift({required Expr that, required Expr n, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(n);
        return wire.wire_Expr_shift(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprShiftConstMeta,
      argValues: [that, n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprShiftConstMeta => const TaskConstMeta(
        debugName: "Expr_shift",
        argNames: ["that", "n"],
      );

  @override
  Expr exprShiftAndFill(
      {required Expr that,
      required Expr n,
      required Expr fillValue,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(n);
        var arg2 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(fillValue);
        return wire.wire_Expr_shift_and_fill(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprShiftAndFillConstMeta,
      argValues: [that, n, fillValue],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprShiftAndFillConstMeta => const TaskConstMeta(
        debugName: "Expr_shift_and_fill",
        argNames: ["that", "n", "fillValue"],
      );

  @override
  Expr exprShrinkDtype({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_shrink_dtype(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprShrinkDtypeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprShrinkDtypeConstMeta => const TaskConstMeta(
        debugName: "Expr_shrink_dtype",
        argNames: ["that"],
      );

  @override
  Expr exprSin({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_sin(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprSinConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprSinConstMeta => const TaskConstMeta(
        debugName: "Expr_sin",
        argNames: ["that"],
      );

  @override
  Expr exprSinh({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_sinh(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprSinhConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprSinhConstMeta => const TaskConstMeta(
        debugName: "Expr_sinh",
        argNames: ["that"],
      );

  @override
  Expr exprSlice(
      {required Expr that,
      required Expr offset,
      required Expr length,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(offset);
        var arg2 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(length);
        return wire.wire_Expr_slice(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprSliceConstMeta,
      argValues: [that, offset, length],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprSliceConstMeta => const TaskConstMeta(
        debugName: "Expr_slice",
        argNames: ["that", "offset", "length"],
      );

  @override
  Expr exprSort(
      {required Expr that,
      bool descending = false,
      bool nullsLast = false,
      bool multithreaded = true,
      bool maintainOrder = false,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(descending);
        var arg2 = cst_encode_bool(nullsLast);
        var arg3 = cst_encode_bool(multithreaded);
        var arg4 = cst_encode_bool(maintainOrder);
        return wire.wire_Expr_sort(arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprSortConstMeta,
      argValues: [that, descending, nullsLast, multithreaded, maintainOrder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprSortConstMeta => const TaskConstMeta(
        debugName: "Expr_sort",
        argNames: [
          "that",
          "descending",
          "nullsLast",
          "multithreaded",
          "maintainOrder"
        ],
      );

  @override
  Expr exprSqrt({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_sqrt(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprSqrtConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprSqrtConstMeta => const TaskConstMeta(
        debugName: "Expr_sqrt",
        argNames: ["that"],
      );

  @override
  Expr exprStd({required Expr that, required int ddof, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_u_8(ddof);
        return wire.wire_Expr_std(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprStdConstMeta,
      argValues: [that, ddof],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprStdConstMeta => const TaskConstMeta(
        debugName: "Expr_std",
        argNames: ["that", "ddof"],
      );

  @override
  Expr exprStrictCast(
      {required Expr that, required DataType dataType, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_box_autoadd_data_type(dataType);
        return wire.wire_Expr_strict_cast(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprStrictCastConstMeta,
      argValues: [that, dataType],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprStrictCastConstMeta => const TaskConstMeta(
        debugName: "Expr_strict_cast",
        argNames: ["that", "dataType"],
      );

  @override
  Expr exprSub({required Expr that, required Expr other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(other);
        return wire.wire_Expr_sub(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprSubConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprSubConstMeta => const TaskConstMeta(
        debugName: "Expr_sub",
        argNames: ["that", "other"],
      );

  @override
  Expr exprSum({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_sum(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprSumConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprSumConstMeta => const TaskConstMeta(
        debugName: "Expr_sum",
        argNames: ["that"],
      );

  @override
  Expr exprTail({required Expr that, int? length, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_opt_box_autoadd_usize(length);
        return wire.wire_Expr_tail(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprTailConstMeta,
      argValues: [that, length],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprTailConstMeta => const TaskConstMeta(
        debugName: "Expr_tail",
        argNames: ["that", "length"],
      );

  @override
  Expr exprTan({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_tan(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprTanConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprTanConstMeta => const TaskConstMeta(
        debugName: "Expr_tan",
        argNames: ["that"],
      );

  @override
  Expr exprTanh({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_tanh(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprTanhConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprTanhConstMeta => const TaskConstMeta(
        debugName: "Expr_tanh",
        argNames: ["that"],
      );

  @override
  Expr exprThen(
      {required Expr that,
      required Expr value,
      required Expr otherwise,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(value);
        var arg2 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(otherwise);
        return wire.wire_Expr_then(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprThenConstMeta,
      argValues: [that, value, otherwise],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprThenConstMeta => const TaskConstMeta(
        debugName: "Expr_then",
        argNames: ["that", "value", "otherwise"],
      );

  @override
  String exprToDot({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_to_dot(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kExprToDotConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprToDotConstMeta => const TaskConstMeta(
        debugName: "Expr_to_dot",
        argNames: ["that"],
      );

  @override
  Expr exprToPhysical({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_to_physical(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprToPhysicalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprToPhysicalConstMeta => const TaskConstMeta(
        debugName: "Expr_to_physical",
        argNames: ["that"],
      );

  @override
  Expr exprUnique({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_unique(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprUniqueConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprUniqueConstMeta => const TaskConstMeta(
        debugName: "Expr_unique",
        argNames: ["that"],
      );

  @override
  Expr exprUniqueStable({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_unique_stable(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprUniqueStableConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprUniqueStableConstMeta => const TaskConstMeta(
        debugName: "Expr_unique_stable",
        argNames: ["that"],
      );

  @override
  Expr exprUpperBound({required Expr that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        return wire.wire_Expr_upper_bound(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprUpperBoundConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprUpperBoundConstMeta => const TaskConstMeta(
        debugName: "Expr_upper_bound",
        argNames: ["that"],
      );

  @override
  Expr exprValueCounts(
      {required Expr that,
      bool sort = false,
      bool parallel = true,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_bool(sort);
        var arg2 = cst_encode_bool(parallel);
        return wire.wire_Expr_value_counts(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprValueCountsConstMeta,
      argValues: [that, sort, parallel],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprValueCountsConstMeta => const TaskConstMeta(
        debugName: "Expr_value_counts",
        argNames: ["that", "sort", "parallel"],
      );

  @override
  Expr exprVariance({required Expr that, required int ddof, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_u_8(ddof);
        return wire.wire_Expr_variance(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprVarianceConstMeta,
      argValues: [that, ddof],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprVarianceConstMeta => const TaskConstMeta(
        debugName: "Expr_variance",
        argNames: ["that", "ddof"],
      );

  @override
  Expr exprXor({required Expr that, required Expr expr, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(expr);
        return wire.wire_Expr_xor(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kExprXorConstMeta,
      argValues: [that, expr],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExprXorConstMeta => const TaskConstMeta(
        debugName: "Expr_xor",
        argNames: ["that", "expr"],
      );

  @override
  Expr col({required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(name);
        return wire.wire_col(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kColConstMeta,
      argValues: [name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kColConstMeta => const TaskConstMeta(
        debugName: "col",
        argNames: ["name"],
      );

  @override
  Expr cols({required List<String> names, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_String(names);
        return wire.wire_cols(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kColsConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kColsConstMeta => const TaskConstMeta(
        debugName: "cols",
        argNames: ["names"],
      );

  @override
  Expr count({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        return wire.wire_count();
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kCountConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCountConstMeta => const TaskConstMeta(
        debugName: "count",
        argNames: [],
      );

  @override
  Expr dtypes({required List<DataType> types, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_data_type(types);
        return wire.wire_dtypes(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kDtypesConstMeta,
      argValues: [types],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDtypesConstMeta => const TaskConstMeta(
        debugName: "dtypes",
        argNames: ["types"],
      );

  @override
  Expr nth({required int idx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_i_64(idx);
        return wire.wire_nth(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr,
        decodeErrorData: null,
      ),
      constMeta: kNthConstMeta,
      argValues: [idx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNthConstMeta => const TaskConstMeta(
        debugName: "nth",
        argNames: ["idx"],
      );

  @override
  LazyFrame lazyGroupByAgg(
      {required LazyGroupBy that, required VecExpr exprs, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(exprs);
        return wire.wire_LazyGroupBy_agg(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyGroupByAggConstMeta,
      argValues: [that, exprs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyGroupByAggConstMeta => const TaskConstMeta(
        debugName: "LazyGroupBy_agg",
        argNames: ["that", "exprs"],
      );

  @override
  LazyFrame lazyGroupByHead({required LazyGroupBy that, int? n, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(that);
        var arg1 = cst_encode_opt_box_autoadd_usize(n);
        return wire.wire_LazyGroupBy_head(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyGroupByHeadConstMeta,
      argValues: [that, n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyGroupByHeadConstMeta => const TaskConstMeta(
        debugName: "LazyGroupBy_head",
        argNames: ["that", "n"],
      );

  @override
  LazyFrame lazyGroupByTail({required LazyGroupBy that, int? n, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(that);
        var arg1 = cst_encode_opt_box_autoadd_usize(n);
        return wire.wire_LazyGroupBy_tail(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame,
        decodeErrorData: null,
      ),
      constMeta: kLazyGroupByTailConstMeta,
      argValues: [that, n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLazyGroupByTailConstMeta => const TaskConstMeta(
        debugName: "LazyGroupBy_tail",
        argNames: ["that", "n"],
      );

  @override
  Schema schemaOf({required List<Field> fields, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_list_field(fields);
        return wire.wire_Schema_of(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSchema,
        decodeErrorData: null,
      ),
      constMeta: kSchemaOfConstMeta,
      argValues: [fields],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSchemaOfConstMeta => const TaskConstMeta(
        debugName: "Schema_of",
        argNames: ["fields"],
      );

  @override
  Series seriesAddTo(
      {required Series that, required Series other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(other);
        return wire.wire_Series_add_to(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesAddToConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesAddToConstMeta => const TaskConstMeta(
        debugName: "Series_add_to",
        argNames: ["that", "other"],
      );

  @override
  void seriesAppend(
      {required Series that, required Series other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(other);
        return wire.wire_Series_append(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesAppendConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesAppendConstMeta => const TaskConstMeta(
        debugName: "Series_append",
        argNames: ["that", "other"],
      );

  @override
  Series seriesApplyScalar(
      {required Series that,
      required Operator op,
      required double value,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_operator(op);
        var arg2 = cst_encode_f_64(value);
        return wire.wire_Series_apply_scalar(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesApplyScalarConstMeta,
      argValues: [that, op, value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesApplyScalarConstMeta => const TaskConstMeta(
        debugName: "Series_apply_scalar",
        argNames: ["that", "op", "value"],
      );

  @override
  Future<List<double?>> seriesAsDoubles(
      {required Series that, bool strict = true, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_bool(strict);
        return wire.wire_Series_as_doubles(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_opt_box_autoadd_f_64,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesAsDoublesConstMeta,
      argValues: [that, strict],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesAsDoublesConstMeta => const TaskConstMeta(
        debugName: "Series_as_doubles",
        argNames: ["that", "strict"],
      );

  @override
  List<Duration?> seriesAsDurations({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_as_durations(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_opt_box_autoadd_Chrono_Duration,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesAsDurationsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesAsDurationsConstMeta => const TaskConstMeta(
        debugName: "Series_as_durations",
        argNames: ["that"],
      );

  @override
  List<int?> seriesAsInts(
      {required Series that, bool strict = true, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_bool(strict);
        return wire.wire_Series_as_ints(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_opt_box_autoadd_i_64,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesAsIntsConstMeta,
      argValues: [that, strict],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesAsIntsConstMeta => const TaskConstMeta(
        debugName: "Series_as_ints",
        argNames: ["that", "strict"],
      );

  @override
  List<DateTime?> seriesAsLocalDatetime({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_as_local_datetime(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_opt_box_autoadd_Chrono_Local,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesAsLocalDatetimeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesAsLocalDatetimeConstMeta => const TaskConstMeta(
        debugName: "Series_as_local_datetime",
        argNames: ["that"],
      );

  @override
  List<DateTime?> seriesAsNaiveDatetime({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_as_naive_datetime(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_opt_box_autoadd_Chrono_Naive,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesAsNaiveDatetimeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesAsNaiveDatetimeConstMeta => const TaskConstMeta(
        debugName: "Series_as_naive_datetime",
        argNames: ["that"],
      );

  @override
  List<String?> seriesAsStrings({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_as_strings(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_opt_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesAsStringsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesAsStringsConstMeta => const TaskConstMeta(
        debugName: "Series_as_strings",
        argNames: ["that"],
      );

  @override
  List<DateTime?> seriesAsUtcDatetime({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_as_utc_datetime(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_opt_box_autoadd_Chrono_Utc,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesAsUtcDatetimeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesAsUtcDatetimeConstMeta => const TaskConstMeta(
        debugName: "Series_as_utc_datetime",
        argNames: ["that"],
      );

  @override
  Series seriesCast(
      {required Series that,
      required DataType dtype,
      bool strict = true,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_box_autoadd_data_type(dtype);
        var arg2 = cst_encode_bool(strict);
        return wire.wire_Series_cast(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesCastConstMeta,
      argValues: [that, dtype, strict],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesCastConstMeta => const TaskConstMeta(
        debugName: "Series_cast",
        argNames: ["that", "dtype", "strict"],
      );

  @override
  Series seriesDivide(
      {required Series that, required Series other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(other);
        return wire.wire_Series_divide(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesDivideConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesDivideConstMeta => const TaskConstMeta(
        debugName: "Series_divide",
        argNames: ["that", "other"],
      );

  @override
  String seriesDump({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_dump(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kSeriesDumpConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesDumpConstMeta => const TaskConstMeta(
        debugName: "Series_dump",
        argNames: ["that"],
      );

  @override
  bool seriesEqual(
      {required Series that,
      required Series other,
      bool ignoreNull = false,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(other);
        var arg2 = cst_encode_bool(ignoreNull);
        return wire.wire_Series_equal(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kSeriesEqualConstMeta,
      argValues: [that, other, ignoreNull],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesEqualConstMeta => const TaskConstMeta(
        debugName: "Series_equal",
        argNames: ["that", "other", "ignoreNull"],
      );

  @override
  int seriesEstimatedSize({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_estimated_size(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kSeriesEstimatedSizeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesEstimatedSizeConstMeta => const TaskConstMeta(
        debugName: "Series_estimated_size",
        argNames: ["that"],
      );

  @override
  Series seriesExplode({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_explode(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesExplodeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesExplodeConstMeta => const TaskConstMeta(
        debugName: "Series_explode",
        argNames: ["that"],
      );

  @override
  Series seriesExplodeByOffsets(
      {required Series that, required Int64List offsets, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_list_prim_i_64(offsets);
        return wire.wire_Series_explode_by_offsets(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesExplodeByOffsetsConstMeta,
      argValues: [that, offsets],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesExplodeByOffsetsConstMeta => const TaskConstMeta(
        debugName: "Series_explode_by_offsets",
        argNames: ["that", "offsets"],
      );

  @override
  double? seriesGet({required Series that, required int index, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_usize(index);
        return wire.wire_Series_get(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesGetConstMeta,
      argValues: [that, index],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesGetConstMeta => const TaskConstMeta(
        debugName: "Series_get",
        argNames: ["that", "index"],
      );

  @override
  String? seriesGetString(
      {required Series that, required int index, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_usize(index);
        return wire.wire_Series_get_string(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kSeriesGetStringConstMeta,
      argValues: [that, index],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesGetStringConstMeta => const TaskConstMeta(
        debugName: "Series_get_string",
        argNames: ["that", "index"],
      );

  @override
  Series seriesHead({required Series that, int? length, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_usize(length);
        return wire.wire_Series_head(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesHeadConstMeta,
      argValues: [that, length],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesHeadConstMeta => const TaskConstMeta(
        debugName: "Series_head",
        argNames: ["that", "length"],
      );

  @override
  DataFrame seriesIntoFrame({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_into_frame(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame,
        decodeErrorData: null,
      ),
      constMeta: kSeriesIntoFrameConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesIntoFrameConstMeta => const TaskConstMeta(
        debugName: "Series_into_frame",
        argNames: ["that"],
      );

  @override
  LiteralValue seriesIntoLiteral({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_into_literal(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_literal_value,
        decodeErrorData: null,
      ),
      constMeta: kSeriesIntoLiteralConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesIntoLiteralConstMeta => const TaskConstMeta(
        debugName: "Series_into_literal",
        argNames: ["that"],
      );

  @override
  bool seriesIsBool({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_is_bool(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kSeriesIsBoolConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesIsBoolConstMeta => const TaskConstMeta(
        debugName: "Series_is_bool",
        argNames: ["that"],
      );

  @override
  bool seriesIsNumeric({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_is_numeric(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kSeriesIsNumericConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesIsNumericConstMeta => const TaskConstMeta(
        debugName: "Series_is_numeric",
        argNames: ["that"],
      );

  @override
  bool seriesIsTemporal({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_is_temporal(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kSeriesIsTemporalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesIsTemporalConstMeta => const TaskConstMeta(
        debugName: "Series_is_temporal",
        argNames: ["that"],
      );

  @override
  bool seriesIsUtf8({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_is_utf8(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesIsUtf8ConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesIsUtf8ConstMeta => const TaskConstMeta(
        debugName: "Series_is_utf8",
        argNames: ["that"],
      );

  @override
  Stream<dynamic> seriesIter({required Series that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_iter(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_dartabi,
        decodeErrorData: null,
      ),
      constMeta: kSeriesIterConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesIterConstMeta => const TaskConstMeta(
        debugName: "Series_iter",
        argNames: ["that"],
      );

  @override
  double? seriesMax({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_max(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesMaxConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesMaxConstMeta => const TaskConstMeta(
        debugName: "Series_max",
        argNames: ["that"],
      );

  @override
  double? seriesMean({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_mean(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kSeriesMeanConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesMeanConstMeta => const TaskConstMeta(
        debugName: "Series_mean",
        argNames: ["that"],
      );

  @override
  Series seriesMeanAsSeries({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_mean_as_series(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesMeanAsSeriesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesMeanAsSeriesConstMeta => const TaskConstMeta(
        debugName: "Series_mean_as_series",
        argNames: ["that"],
      );

  @override
  double? seriesMedian({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_median(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kSeriesMedianConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesMedianConstMeta => const TaskConstMeta(
        debugName: "Series_median",
        argNames: ["that"],
      );

  @override
  Series seriesMedianAsSeries({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_median_as_series(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesMedianAsSeriesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesMedianAsSeriesConstMeta => const TaskConstMeta(
        debugName: "Series_median_as_series",
        argNames: ["that"],
      );

  @override
  double? seriesMin({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_min(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kSeriesMinConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesMinConstMeta => const TaskConstMeta(
        debugName: "Series_min",
        argNames: ["that"],
      );

  @override
  Series seriesMultiply(
      {required Series that, required Series other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(other);
        return wire.wire_Series_multiply(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesMultiplyConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesMultiplyConstMeta => const TaskConstMeta(
        debugName: "Series_multiply",
        argNames: ["that", "other"],
      );

  @override
  Series seriesOfBools({String name = r"", List<bool?>? values, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_opt_list_opt_box_autoadd_bool(values);
        return wire.wire_Series_of_bools(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesOfBoolsConstMeta,
      argValues: [name, values],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesOfBoolsConstMeta => const TaskConstMeta(
        debugName: "Series_of_bools",
        argNames: ["name", "values"],
      );

  @override
  Series seriesOfDoubles(
      {String name = r"", List<double?>? values, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_opt_list_opt_box_autoadd_f_64(values);
        return wire.wire_Series_of_doubles(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesOfDoublesConstMeta,
      argValues: [name, values],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesOfDoublesConstMeta => const TaskConstMeta(
        debugName: "Series_of_doubles",
        argNames: ["name", "values"],
      );

  @override
  Series seriesOfDurations(
      {String name = r"",
      List<Duration?>? values,
      TimeUnit unit = TimeUnit.milliseconds,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_opt_list_opt_box_autoadd_Chrono_Duration(values);
        var arg2 = cst_encode_time_unit(unit);
        return wire.wire_Series_of_durations(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesOfDurationsConstMeta,
      argValues: [name, values, unit],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesOfDurationsConstMeta => const TaskConstMeta(
        debugName: "Series_of_durations",
        argNames: ["name", "values", "unit"],
      );

  @override
  Series seriesOfI32({String name = r"", List<int?>? values, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_opt_list_opt_box_autoadd_i_32(values);
        return wire.wire_Series_of_i32(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesOfI32ConstMeta,
      argValues: [name, values],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesOfI32ConstMeta => const TaskConstMeta(
        debugName: "Series_of_i32",
        argNames: ["name", "values"],
      );

  @override
  Series seriesOfInts({String name = r"", List<int?>? values, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_opt_list_opt_box_autoadd_i_64(values);
        return wire.wire_Series_of_ints(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesOfIntsConstMeta,
      argValues: [name, values],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesOfIntsConstMeta => const TaskConstMeta(
        debugName: "Series_of_ints",
        argNames: ["name", "values"],
      );

  @override
  Series seriesOfStrings(
      {String name = r"", List<String?>? values, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_opt_list_opt_String(values);
        return wire.wire_Series_of_strings(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesOfStringsConstMeta,
      argValues: [name, values],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesOfStringsConstMeta => const TaskConstMeta(
        debugName: "Series_of_strings",
        argNames: ["name", "values"],
      );

  @override
  Series seriesProduct({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_product(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesProductConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesProductConstMeta => const TaskConstMeta(
        debugName: "Series_product",
        argNames: ["that"],
      );

  @override
  Series seriesRemainder(
      {required Series that, required Series other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(other);
        return wire.wire_Series_remainder(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesRemainderConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRemainderConstMeta => const TaskConstMeta(
        debugName: "Series_remainder",
        argNames: ["that", "other"],
      );

  @override
  void seriesRename(
      {required Series that, required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_String(name);
        return wire.wire_Series_rename(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSeriesRenameConstMeta,
      argValues: [that, name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRenameConstMeta => const TaskConstMeta(
        debugName: "Series_rename",
        argNames: ["that", "name"],
      );

  @override
  Series seriesReshape(
      {required Series that, required Int64List dims, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_list_prim_i_64(dims);
        return wire.wire_Series_reshape(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesReshapeConstMeta,
      argValues: [that, dims],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesReshapeConstMeta => const TaskConstMeta(
        debugName: "Series_reshape",
        argNames: ["that", "dims"],
      );

  @override
  Series seriesRollingMax(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_list_prim_i_64(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        var arg7 = cst_encode_opt_box_autoadd_time_unit(timeUnit);
        var arg8 = cst_encode_opt_String(timezone);
        return wire.wire_Series_rolling_max(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesRollingMaxConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow,
        timeUnit,
        timezone
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRollingMaxConstMeta => const TaskConstMeta(
        debugName: "Series_rolling_max",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow",
          "timeUnit",
          "timezone"
        ],
      );

  @override
  Series seriesRollingMean(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_list_prim_i_64(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        var arg7 = cst_encode_opt_box_autoadd_time_unit(timeUnit);
        var arg8 = cst_encode_opt_String(timezone);
        return wire.wire_Series_rolling_mean(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesRollingMeanConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow,
        timeUnit,
        timezone
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRollingMeanConstMeta => const TaskConstMeta(
        debugName: "Series_rolling_mean",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow",
          "timeUnit",
          "timezone"
        ],
      );

  @override
  Series seriesRollingMedian(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_list_prim_i_64(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        var arg7 = cst_encode_opt_box_autoadd_time_unit(timeUnit);
        var arg8 = cst_encode_opt_String(timezone);
        return wire.wire_Series_rolling_median(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesRollingMedianConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow,
        timeUnit,
        timezone
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRollingMedianConstMeta => const TaskConstMeta(
        debugName: "Series_rolling_median",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow",
          "timeUnit",
          "timezone"
        ],
      );

  @override
  Series seriesRollingMin(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_list_prim_i_64(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        var arg7 = cst_encode_opt_box_autoadd_time_unit(timeUnit);
        var arg8 = cst_encode_opt_String(timezone);
        return wire.wire_Series_rolling_min(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesRollingMinConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow,
        timeUnit,
        timezone
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRollingMinConstMeta => const TaskConstMeta(
        debugName: "Series_rolling_min",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow",
          "timeUnit",
          "timezone"
        ],
      );

  @override
  Series seriesRollingQuantile(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_list_prim_i_64(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        var arg7 = cst_encode_opt_box_autoadd_time_unit(timeUnit);
        var arg8 = cst_encode_opt_String(timezone);
        return wire.wire_Series_rolling_quantile(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesRollingQuantileConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow,
        timeUnit,
        timezone
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRollingQuantileConstMeta => const TaskConstMeta(
        debugName: "Series_rolling_quantile",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow",
          "timeUnit",
          "timezone"
        ],
      );

  @override
  Series seriesRollingStd(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_list_prim_i_64(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        var arg7 = cst_encode_opt_box_autoadd_time_unit(timeUnit);
        var arg8 = cst_encode_opt_String(timezone);
        return wire.wire_Series_rolling_std(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesRollingStdConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow,
        timeUnit,
        timezone
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRollingStdConstMeta => const TaskConstMeta(
        debugName: "Series_rolling_std",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow",
          "timeUnit",
          "timezone"
        ],
      );

  @override
  Series seriesRollingSum(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_list_prim_i_64(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        var arg7 = cst_encode_opt_box_autoadd_time_unit(timeUnit);
        var arg8 = cst_encode_opt_String(timezone);
        return wire.wire_Series_rolling_sum(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesRollingSumConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow,
        timeUnit,
        timezone
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRollingSumConstMeta => const TaskConstMeta(
        debugName: "Series_rolling_sum",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow",
          "timeUnit",
          "timezone"
        ],
      );

  @override
  Series seriesRollingVar(
      {required Series that,
      Duration? windowSize,
      int minPeriods = 1,
      Float64List? weights,
      bool center = false,
      Int64List? by,
      ClosedWindow? closedWindow,
      TimeUnit? timeUnit,
      String? timezone,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_Chrono_Duration(windowSize);
        var arg2 = cst_encode_usize(minPeriods);
        var arg3 = cst_encode_opt_list_prim_f_64(weights);
        var arg4 = cst_encode_bool(center);
        var arg5 = cst_encode_opt_list_prim_i_64(by);
        var arg6 = cst_encode_opt_box_autoadd_closed_window(closedWindow);
        var arg7 = cst_encode_opt_box_autoadd_time_unit(timeUnit);
        var arg8 = cst_encode_opt_String(timezone);
        return wire.wire_Series_rolling_var(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesRollingVarConstMeta,
      argValues: [
        that,
        windowSize,
        minPeriods,
        weights,
        center,
        by,
        closedWindow,
        timeUnit,
        timezone
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesRollingVarConstMeta => const TaskConstMeta(
        debugName: "Series_rolling_var",
        argNames: [
          "that",
          "windowSize",
          "minPeriods",
          "weights",
          "center",
          "by",
          "closedWindow",
          "timeUnit",
          "timezone"
        ],
      );

  @override
  Series seriesShuffle({required Series that, int? seed, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_u_64(seed);
        return wire.wire_Series_shuffle(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesShuffleConstMeta,
      argValues: [that, seed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesShuffleConstMeta => const TaskConstMeta(
        debugName: "Series_shuffle",
        argNames: ["that", "seed"],
      );

  @override
  Series seriesSort(
      {required Series that, bool reverse = false, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_bool(reverse);
        return wire.wire_Series_sort(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesSortConstMeta,
      argValues: [that, reverse],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesSortConstMeta => const TaskConstMeta(
        debugName: "Series_sort",
        argNames: ["that", "reverse"],
      );

  @override
  Series seriesStdAsSeries(
      {required Series that, required int ddof, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_u_8(ddof);
        return wire.wire_Series_std_as_series(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesStdAsSeriesConstMeta,
      argValues: [that, ddof],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesStdAsSeriesConstMeta => const TaskConstMeta(
        debugName: "Series_std_as_series",
        argNames: ["that", "ddof"],
      );

  @override
  Series seriesSubtract(
      {required Series that, required Series other, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(other);
        return wire.wire_Series_subtract(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesSubtractConstMeta,
      argValues: [that, other],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesSubtractConstMeta => const TaskConstMeta(
        debugName: "Series_subtract",
        argNames: ["that", "other"],
      );

  @override
  double? seriesSum({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_sum(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kSeriesSumConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesSumConstMeta => const TaskConstMeta(
        debugName: "Series_sum",
        argNames: ["that"],
      );

  @override
  Series seriesSumAsSeries({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_sum_as_series(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesSumAsSeriesConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesSumAsSeriesConstMeta => const TaskConstMeta(
        debugName: "Series_sum_as_series",
        argNames: ["that"],
      );

  @override
  Series seriesTail({required Series that, int? length, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_opt_box_autoadd_usize(length);
        return wire.wire_Series_tail(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesTailConstMeta,
      argValues: [that, length],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesTailConstMeta => const TaskConstMeta(
        debugName: "Series_tail",
        argNames: ["that", "length"],
      );

  @override
  List<dynamic> seriesToList({required Series that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        return wire.wire_Series_to_list(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_dartabi,
        decodeErrorData: null,
      ),
      constMeta: kSeriesToListConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesToListConstMeta => const TaskConstMeta(
        debugName: "Series_to_list",
        argNames: ["that"],
      );

  @override
  Series seriesUnique(
      {required Series that, bool maintainOrder = false, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_bool(maintainOrder);
        return wire.wire_Series_unique(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSeriesUniqueConstMeta,
      argValues: [that, maintainOrder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesUniqueConstMeta => const TaskConstMeta(
        debugName: "Series_unique",
        argNames: ["that", "maintainOrder"],
      );

  @override
  Series seriesVarAsSeries(
      {required Series that, required int ddof, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(that);
        var arg1 = cst_encode_u_8(ddof);
        return wire.wire_Series_var_as_series(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries,
        decodeErrorData: null,
      ),
      constMeta: kSeriesVarAsSeriesConstMeta,
      argValues: [that, ddof],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSeriesVarAsSeriesConstMeta => const TaskConstMeta(
        debugName: "Series_var_as_series",
        argNames: ["that", "ddof"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SpecialEqPSeries => wire
          .rust_arc_increment_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SpecialEqPSeries => wire
          .rust_arc_decrement_strong_count_RustOpaque_AssertUnwindSafeSpecialEqPSeries;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataFrame => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockDataFrame;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataFrame => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockDataFrame;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Expr =>
      wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockExpr;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Expr =>
      wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockExpr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LazyFrame => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyFrame;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LazyFrame => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyFrame;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LazyGroupBy => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LazyGroupBy => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockLazyGroupBy;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OptionSchema => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionSchema;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OptionSchema => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionSchema;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OptionVecExpr => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OptionVecExpr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecExpr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OptionVecSeries => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OptionVecSeries => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVecSeries;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Schema =>
          wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSchema;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Schema =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSchema;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Series =>
          wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockSeries;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Series =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockSeries;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VecExpr =>
          wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecExpr;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VecExpr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecExpr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VecSeries => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVecSeries;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VecSeries => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVecSeries;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    return AnyhowException(raw as String);
  }

  @protected
  DataFrame dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame(
      dynamic raw) {
    return DataFrame.dcoDecode(raw);
  }

  @protected
  Expr dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(dynamic raw) {
    return Expr.dcoDecode(raw);
  }

  @protected
  LazyFrame dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(
      dynamic raw) {
    return LazyFrame.dcoDecode(raw);
  }

  @protected
  LazyGroupBy dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(
      dynamic raw) {
    return LazyGroupBy.dcoDecode(raw);
  }

  @protected
  Schema dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSchema(dynamic raw) {
    return Schema.dcoDecode(raw);
  }

  @protected
  Series dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(dynamic raw) {
    return Series.dcoDecode(raw);
  }

  @protected
  VecSeries dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockVecSeries(
      dynamic raw) {
    return VecSeries.dcoDecode(raw);
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw) {
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: false);
  }

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw) {
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  SpecialEqPSeries dco_decode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      dynamic raw) {
    return SpecialEqPSeries.dcoDecode(raw);
  }

  @protected
  DataFrame dco_decode_RustOpaque_stdsyncRwLockDataFrame(dynamic raw) {
    return DataFrame.dcoDecode(raw);
  }

  @protected
  Expr dco_decode_RustOpaque_stdsyncRwLockExpr(dynamic raw) {
    return Expr.dcoDecode(raw);
  }

  @protected
  LazyFrame dco_decode_RustOpaque_stdsyncRwLockLazyFrame(dynamic raw) {
    return LazyFrame.dcoDecode(raw);
  }

  @protected
  LazyGroupBy dco_decode_RustOpaque_stdsyncRwLockLazyGroupBy(dynamic raw) {
    return LazyGroupBy.dcoDecode(raw);
  }

  @protected
  Schema dco_decode_RustOpaque_stdsyncRwLockSchema(dynamic raw) {
    return Schema.dcoDecode(raw);
  }

  @protected
  Series dco_decode_RustOpaque_stdsyncRwLockSeries(dynamic raw) {
    return Series.dcoDecode(raw);
  }

  @protected
  VecSeries dco_decode_RustOpaque_stdsyncRwLockVecSeries(dynamic raw) {
    return VecSeries.dcoDecode(raw);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  Duration dco_decode_box_autoadd_Chrono_Duration(dynamic raw) {
    return dco_decode_Chrono_Duration(raw);
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Local(dynamic raw) {
    return dco_decode_Chrono_Local(raw);
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Naive(dynamic raw) {
    return dco_decode_Chrono_Naive(raw);
  }

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw) {
    return dco_decode_Chrono_Utc(raw);
  }

  @protected
  DataType dco_decode_box_autoadd_data_type(dynamic raw) {
    return dco_decode_data_type(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    return raw as double;
  }

  @protected
  int dco_decode_box_autoadd_i_64(dynamic raw) {
    return dco_decode_i_64(raw);
  }

  @protected
  DataType dco_decode_box_data_type(dynamic raw) {
    return dco_decode_data_type(raw);
  }

  @protected
  dynamic dco_decode_dartabi(dynamic raw) {
    return raw;
  }

  @protected
  DataType dco_decode_data_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DataType_Boolean();
      case 1:
        return DataType_UInt8();
      case 2:
        return DataType_UInt16();
      case 3:
        return DataType_UInt32();
      case 4:
        return DataType_UInt64();
      case 5:
        return DataType_Int8();
      case 6:
        return DataType_Int16();
      case 7:
        return DataType_Int32();
      case 8:
        return DataType_Int64();
      case 9:
        return DataType_Float32();
      case 10:
        return DataType_Float64();
      case 11:
        return DataType_Utf8();
      case 12:
        return DataType_Binary();
      case 13:
        return DataType_Date();
      case 14:
        return DataType_Datetime(
          dco_decode_time_unit(raw[1]),
          dco_decode_opt_String(raw[2]),
        );
      case 15:
        return DataType_Duration(
          dco_decode_time_unit(raw[1]),
        );
      case 16:
        return DataType_Time();
      case 17:
        return DataType_List(
          dco_decode_box_data_type(raw[1]),
        );
      case 18:
        return DataType_Struct(
          dco_decode_list_field(raw[1]),
        );
      case 19:
        return DataType_Null();
      case 20:
        return DataType_Unknown();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    return raw as double;
  }

  @protected
  Field dco_decode_field(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Field(
      name: dco_decode_String(arr[0]),
      dtype: dco_decode_box_data_type(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    return raw as int;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<dynamic> dco_decode_list_dartabi(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_dartabi).toList();
  }

  @protected
  List<DataType> dco_decode_list_data_type(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_data_type).toList();
  }

  @protected
  List<Field> dco_decode_list_field(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_field).toList();
  }

  @protected
  List<String?> dco_decode_list_opt_String(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_opt_String).toList();
  }

  @protected
  List<Duration?> dco_decode_list_opt_box_autoadd_Chrono_Duration(dynamic raw) {
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_Chrono_Duration)
        .toList();
  }

  @protected
  List<DateTime?> dco_decode_list_opt_box_autoadd_Chrono_Local(dynamic raw) {
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_Chrono_Local)
        .toList();
  }

  @protected
  List<DateTime?> dco_decode_list_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_Chrono_Naive)
        .toList();
  }

  @protected
  List<DateTime?> dco_decode_list_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_Chrono_Utc)
        .toList();
  }

  @protected
  List<double?> dco_decode_list_opt_box_autoadd_f_64(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_opt_box_autoadd_f_64).toList();
  }

  @protected
  List<int?> dco_decode_list_opt_box_autoadd_i_64(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_opt_box_autoadd_i_64).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  LiteralValue dco_decode_literal_value(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LiteralValue_Null();
      case 1:
        return LiteralValue_Boolean(
          dco_decode_bool(raw[1]),
        );
      case 2:
        return LiteralValue_Utf8(
          dco_decode_String(raw[1]),
        );
      case 3:
        return LiteralValue_Binary(
          dco_decode_list_prim_u_8(raw[1]),
        );
      case 4:
        return LiteralValue_Uint32(
          dco_decode_u_32(raw[1]),
        );
      case 5:
        return LiteralValue_Uint64(
          dco_decode_u_64(raw[1]),
        );
      case 6:
        return LiteralValue_Int32(
          dco_decode_i_32(raw[1]),
        );
      case 7:
        return LiteralValue_Int64(
          dco_decode_i_64(raw[1]),
        );
      case 8:
        return LiteralValue_Float32(
          dco_decode_f_32(raw[1]),
        );
      case 9:
        return LiteralValue_Float64(
          dco_decode_f_64(raw[1]),
        );
      case 10:
        return LiteralValue_Range(
          low: dco_decode_i_64(raw[1]),
          high: dco_decode_i_64(raw[2]),
          dataType: dco_decode_box_autoadd_data_type(raw[3]),
        );
      case 11:
        return LiteralValue_DateTime(
          dco_decode_i_64(raw[1]),
          dco_decode_time_unit(raw[2]),
          dco_decode_opt_String(raw[3]),
        );
      case 12:
        return LiteralValue_Duration(
          dco_decode_i_64(raw[1]),
          dco_decode_time_unit(raw[2]),
        );
      case 13:
        return LiteralValue_Series(
          dco_decode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(raw[1]),
        );
      case 14:
        return LiteralValue_Date(
          dco_decode_i_32(raw[1]),
        );
      case 15:
        return LiteralValue_Time(
          dco_decode_i_64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Duration? dco_decode_opt_box_autoadd_Chrono_Duration(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Local(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Local(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Naive(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Naive(raw);
  }

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  (int, int) dco_decode_record_usize_usize(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_usize(arr[0]),
      dco_decode_usize(arr[1]),
    );
  }

  @protected
  TimeUnit dco_decode_time_unit(dynamic raw) {
    return TimeUnit.values[raw as int];
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    return raw as int;
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  DataFrame sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame(
      SseDeserializer deserializer) {
    return DataFrame.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Expr sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(
      SseDeserializer deserializer) {
    return Expr.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LazyFrame sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(
      SseDeserializer deserializer) {
    return LazyFrame.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LazyGroupBy sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(
      SseDeserializer deserializer) {
    return LazyGroupBy.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Schema sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockSchema(
      SseDeserializer deserializer) {
    return Schema.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Series sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(
      SseDeserializer deserializer) {
    return Series.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VecSeries sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockVecSeries(
      SseDeserializer deserializer) {
    return VecSeries.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  SpecialEqPSeries sse_decode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      SseDeserializer deserializer) {
    return SpecialEqPSeries.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DataFrame sse_decode_RustOpaque_stdsyncRwLockDataFrame(
      SseDeserializer deserializer) {
    return DataFrame.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Expr sse_decode_RustOpaque_stdsyncRwLockExpr(SseDeserializer deserializer) {
    return Expr.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LazyFrame sse_decode_RustOpaque_stdsyncRwLockLazyFrame(
      SseDeserializer deserializer) {
    return LazyFrame.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LazyGroupBy sse_decode_RustOpaque_stdsyncRwLockLazyGroupBy(
      SseDeserializer deserializer) {
    return LazyGroupBy.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Schema sse_decode_RustOpaque_stdsyncRwLockSchema(
      SseDeserializer deserializer) {
    return Schema.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Series sse_decode_RustOpaque_stdsyncRwLockSeries(
      SseDeserializer deserializer) {
    return Series.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VecSeries sse_decode_RustOpaque_stdsyncRwLockVecSeries(
      SseDeserializer deserializer) {
    return VecSeries.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Duration sse_decode_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    return (sse_decode_Chrono_Duration(deserializer));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Local(SseDeserializer deserializer) {
    return (sse_decode_Chrono_Local(deserializer));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Naive(SseDeserializer deserializer) {
    return (sse_decode_Chrono_Naive(deserializer));
  }

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer) {
    return (sse_decode_Chrono_Utc(deserializer));
  }

  @protected
  DataType sse_decode_box_autoadd_data_type(SseDeserializer deserializer) {
    return (sse_decode_data_type(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    return (sse_decode_f_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    return (sse_decode_i_64(deserializer));
  }

  @protected
  DataType sse_decode_box_data_type(SseDeserializer deserializer) {
    return (sse_decode_data_type(deserializer));
  }

  @protected
  dynamic sse_decode_dartabi(SseDeserializer deserializer) {
    throw UnimplementedError('');
  }

  @protected
  DataType sse_decode_data_type(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DataType_Boolean();
      case 1:
        return DataType_UInt8();
      case 2:
        return DataType_UInt16();
      case 3:
        return DataType_UInt32();
      case 4:
        return DataType_UInt64();
      case 5:
        return DataType_Int8();
      case 6:
        return DataType_Int16();
      case 7:
        return DataType_Int32();
      case 8:
        return DataType_Int64();
      case 9:
        return DataType_Float32();
      case 10:
        return DataType_Float64();
      case 11:
        return DataType_Utf8();
      case 12:
        return DataType_Binary();
      case 13:
        return DataType_Date();
      case 14:
        var var_field0 = sse_decode_time_unit(deserializer);
        var var_field1 = sse_decode_opt_String(deserializer);
        return DataType_Datetime(var_field0, var_field1);
      case 15:
        var var_field0 = sse_decode_time_unit(deserializer);
        return DataType_Duration(var_field0);
      case 16:
        return DataType_Time();
      case 17:
        var var_field0 = sse_decode_box_data_type(deserializer);
        return DataType_List(var_field0);
      case 18:
        var var_field0 = sse_decode_list_field(deserializer);
        return DataType_Struct(var_field0);
      case 19:
        return DataType_Null();
      case 20:
        return DataType_Unknown();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat64();
  }

  @protected
  Field sse_decode_field(SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    var var_dtype = sse_decode_box_data_type(deserializer);
    return Field(name: var_name, dtype: var_dtype);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    return deserializer.buffer.getInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<dynamic> sse_decode_list_dartabi(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <dynamic>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dartabi(deserializer));
    }
    return ans_;
  }

  @protected
  List<DataType> sse_decode_list_data_type(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DataType>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_data_type(deserializer));
    }
    return ans_;
  }

  @protected
  List<Field> sse_decode_list_field(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Field>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_field(deserializer));
    }
    return ans_;
  }

  @protected
  List<String?> sse_decode_list_opt_String(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Duration?> sse_decode_list_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Duration?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_Chrono_Duration(deserializer));
    }
    return ans_;
  }

  @protected
  List<DateTime?> sse_decode_list_opt_box_autoadd_Chrono_Local(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DateTime?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_Chrono_Local(deserializer));
    }
    return ans_;
  }

  @protected
  List<DateTime?> sse_decode_list_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DateTime?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_Chrono_Naive(deserializer));
    }
    return ans_;
  }

  @protected
  List<DateTime?> sse_decode_list_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DateTime?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_Chrono_Utc(deserializer));
    }
    return ans_;
  }

  @protected
  List<double?> sse_decode_list_opt_box_autoadd_f_64(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <double?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_f_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<int?> sse_decode_list_opt_box_autoadd_i_64(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <int?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_i_64(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  LiteralValue sse_decode_literal_value(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return LiteralValue_Null();
      case 1:
        var var_field0 = sse_decode_bool(deserializer);
        return LiteralValue_Boolean(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return LiteralValue_Utf8(var_field0);
      case 3:
        var var_field0 = sse_decode_list_prim_u_8(deserializer);
        return LiteralValue_Binary(var_field0);
      case 4:
        var var_field0 = sse_decode_u_32(deserializer);
        return LiteralValue_Uint32(var_field0);
      case 5:
        var var_field0 = sse_decode_u_64(deserializer);
        return LiteralValue_Uint64(var_field0);
      case 6:
        var var_field0 = sse_decode_i_32(deserializer);
        return LiteralValue_Int32(var_field0);
      case 7:
        var var_field0 = sse_decode_i_64(deserializer);
        return LiteralValue_Int64(var_field0);
      case 8:
        var var_field0 = sse_decode_f_32(deserializer);
        return LiteralValue_Float32(var_field0);
      case 9:
        var var_field0 = sse_decode_f_64(deserializer);
        return LiteralValue_Float64(var_field0);
      case 10:
        var var_low = sse_decode_i_64(deserializer);
        var var_high = sse_decode_i_64(deserializer);
        var var_dataType = sse_decode_box_autoadd_data_type(deserializer);
        return LiteralValue_Range(
            low: var_low, high: var_high, dataType: var_dataType);
      case 11:
        var var_field0 = sse_decode_i_64(deserializer);
        var var_field1 = sse_decode_time_unit(deserializer);
        var var_field2 = sse_decode_opt_String(deserializer);
        return LiteralValue_DateTime(var_field0, var_field1, var_field2);
      case 12:
        var var_field0 = sse_decode_i_64(deserializer);
        var var_field1 = sse_decode_time_unit(deserializer);
        return LiteralValue_Duration(var_field0, var_field1);
      case 13:
        var var_field0 = sse_decode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
            deserializer);
        return LiteralValue_Series(var_field0);
      case 14:
        var var_field0 = sse_decode_i_32(deserializer);
        return LiteralValue_Date(var_field0);
      case 15:
        var var_field0 = sse_decode_i_64(deserializer);
        return LiteralValue_Time(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Duration? sse_decode_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Duration(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Local(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Local(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Naive(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Chrono_Utc(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (int, int) sse_decode_record_usize_usize(SseDeserializer deserializer) {
    var var_field0 = sse_decode_usize(deserializer);
    var var_field1 = sse_decode_usize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  TimeUnit sse_decode_time_unit(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return TimeUnit.values[inner];
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(Expr raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(
      LazyFrame raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(
      LazyGroupBy raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionSchema(
      OptionSchema raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecExpr(
      OptionVecExpr raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecSeries(
      OptionVecSeries raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(
      Series raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(
      VecExpr raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  PlatformPointer cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockSeries(
      Series raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockExpr(Expr raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(
      Series raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      SpecialEqPSeries raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockDataFrame(DataFrame raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockExpr(Expr raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockLazyFrame(LazyFrame raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockLazyGroupBy(
      LazyGroupBy raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockOptionSchema(
      OptionSchema raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockOptionVecExpr(
      OptionVecExpr raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockOptionVecSeries(
      OptionVecSeries raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockSeries(Series raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockVecExpr(VecExpr raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  int cst_encode_closed_window(ClosedWindow raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_csv_encoding(CsvEncoding raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  double cst_encode_f_32(double raw) {
    return raw;
  }

  @protected
  double cst_encode_f_64(double raw) {
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    return raw;
  }

  @protected
  int cst_encode_is_sorted(IsSorted raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_join_type(JoinType raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_operator(Operator raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_quantile_interpol_options(QuantileInterpolOptions raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_time_unit(TimeUnit raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_32(int raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  int cst_encode_unique_keep_strategy(UniqueKeepStrategy raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_usize(int raw) {
    return raw;
  }

  @protected
  int cst_encode_window_mapping(WindowMapping raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockExpr(
      Expr self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyFrame(
      LazyFrame self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockLazyGroupBy(
      LazyGroupBy self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionSchema(
      OptionSchema self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecExpr(
      OptionVecExpr self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVecSeries(
      OptionVecSeries self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockSeries(
      Series self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockVecExpr(
      VecExpr self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockSeries(
      Series self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockExpr(
      Expr self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockSeries(
      Series self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  void sse_encode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
      SpecialEqPSeries self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockDataFrame(
      DataFrame self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockExpr(
      Expr self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockLazyFrame(
      LazyFrame self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockLazyGroupBy(
      LazyGroupBy self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockOptionSchema(
      OptionSchema self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockOptionVecExpr(
      OptionVecExpr self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockOptionVecSeries(
      OptionVecSeries self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockSeries(
      Series self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockVecExpr(
      VecExpr self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_Chrono_Duration(
      Duration self, SseSerializer serializer) {
    sse_encode_Chrono_Duration(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_closed_window(
      ClosedWindow self, SseSerializer serializer) {
    sse_encode_closed_window(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_csv_encoding(
      CsvEncoding self, SseSerializer serializer) {
    sse_encode_csv_encoding(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_data_type(
      DataType self, SseSerializer serializer) {
    sse_encode_data_type(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(int self, SseSerializer serializer) {
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_literal_value(
      LiteralValue self, SseSerializer serializer) {
    sse_encode_literal_value(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_null_values(
      NullValues self, SseSerializer serializer) {
    sse_encode_null_values(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_quantile_interpol_options(
      QuantileInterpolOptions self, SseSerializer serializer) {
    sse_encode_quantile_interpol_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_row_count(
      RowCount self, SseSerializer serializer) {
    sse_encode_row_count(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_time_unit(
      TimeUnit self, SseSerializer serializer) {
    sse_encode_time_unit(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer) {
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(int self, SseSerializer serializer) {
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_window_mapping(
      WindowMapping self, SseSerializer serializer) {
    sse_encode_window_mapping(self, serializer);
  }

  @protected
  void sse_encode_box_data_type(DataType self, SseSerializer serializer) {
    sse_encode_data_type(self, serializer);
  }

  @protected
  void sse_encode_closed_window(ClosedWindow self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_csv_encoding(CsvEncoding self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_data_type(DataType self, SseSerializer serializer) {
    switch (self) {
      case DataType_Boolean():
        sse_encode_i_32(0, serializer);
      case DataType_UInt8():
        sse_encode_i_32(1, serializer);
      case DataType_UInt16():
        sse_encode_i_32(2, serializer);
      case DataType_UInt32():
        sse_encode_i_32(3, serializer);
      case DataType_UInt64():
        sse_encode_i_32(4, serializer);
      case DataType_Int8():
        sse_encode_i_32(5, serializer);
      case DataType_Int16():
        sse_encode_i_32(6, serializer);
      case DataType_Int32():
        sse_encode_i_32(7, serializer);
      case DataType_Int64():
        sse_encode_i_32(8, serializer);
      case DataType_Float32():
        sse_encode_i_32(9, serializer);
      case DataType_Float64():
        sse_encode_i_32(10, serializer);
      case DataType_Utf8():
        sse_encode_i_32(11, serializer);
      case DataType_Binary():
        sse_encode_i_32(12, serializer);
      case DataType_Date():
        sse_encode_i_32(13, serializer);
      case DataType_Datetime(field0: final field0, field1: final field1):
        sse_encode_i_32(14, serializer);
        sse_encode_time_unit(field0, serializer);
        sse_encode_opt_String(field1, serializer);
      case DataType_Duration(field0: final field0):
        sse_encode_i_32(15, serializer);
        sse_encode_time_unit(field0, serializer);
      case DataType_Time():
        sse_encode_i_32(16, serializer);
      case DataType_List(field0: final field0):
        sse_encode_i_32(17, serializer);
        sse_encode_box_data_type(field0, serializer);
      case DataType_Struct(field0: final field0):
        sse_encode_i_32(18, serializer);
        sse_encode_list_field(field0, serializer);
      case DataType_Null():
        sse_encode_i_32(19, serializer);
      case DataType_Unknown():
        sse_encode_i_32(20, serializer);
    }
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_field(Field self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
    sse_encode_box_data_type(self.dtype, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_is_sorted(IsSorted self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_join_type(JoinType self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bool(List<bool> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_data_type(
      List<DataType> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_data_type(item, serializer);
    }
  }

  @protected
  void sse_encode_list_field(List<Field> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_field(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_String(
      List<String?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_Chrono_Duration(
      List<Duration?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_Chrono_Duration(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_bool(
      List<bool?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_f_64(
      List<double?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_f_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_i_32(
      List<int?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_i_64(
      List<int?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_i_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_f_64(Float64List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(self);
  }

  @protected
  void sse_encode_list_prim_i_64(Int64List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_u_32(Uint32List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_literal_value(LiteralValue self, SseSerializer serializer) {
    switch (self) {
      case LiteralValue_Null():
        sse_encode_i_32(0, serializer);
      case LiteralValue_Boolean(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(field0, serializer);
      case LiteralValue_Utf8(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case LiteralValue_Binary(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_list_prim_u_8(field0, serializer);
      case LiteralValue_Uint32(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_u_32(field0, serializer);
      case LiteralValue_Uint64(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_u_64(field0, serializer);
      case LiteralValue_Int32(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_i_32(field0, serializer);
      case LiteralValue_Int64(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_i_64(field0, serializer);
      case LiteralValue_Float32(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_f_32(field0, serializer);
      case LiteralValue_Float64(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_f_64(field0, serializer);
      case LiteralValue_Range(
          low: final low,
          high: final high,
          dataType: final dataType
        ):
        sse_encode_i_32(10, serializer);
        sse_encode_i_64(low, serializer);
        sse_encode_i_64(high, serializer);
        sse_encode_box_autoadd_data_type(dataType, serializer);
      case LiteralValue_DateTime(
          field0: final field0,
          field1: final field1,
          field2: final field2
        ):
        sse_encode_i_32(11, serializer);
        sse_encode_i_64(field0, serializer);
        sse_encode_time_unit(field1, serializer);
        sse_encode_opt_String(field2, serializer);
      case LiteralValue_Duration(field0: final field0, field1: final field1):
        sse_encode_i_32(12, serializer);
        sse_encode_i_64(field0, serializer);
        sse_encode_time_unit(field1, serializer);
      case LiteralValue_Series(field0: final field0):
        sse_encode_i_32(13, serializer);
        sse_encode_RustOpaque_AssertUnwindSafeSpecialEqPSeries(
            field0, serializer);
      case LiteralValue_Date(field0: final field0):
        sse_encode_i_32(14, serializer);
        sse_encode_i_32(field0, serializer);
      case LiteralValue_Time(field0: final field0):
        sse_encode_i_32(15, serializer);
        sse_encode_i_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_null_values(NullValues self, SseSerializer serializer) {
    switch (self) {
      case NullValues_AllColumnsSingle(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case NullValues_AllColumns(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_String(field0, serializer);
      case NullValues_Named(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_list_record_string_string(field0, serializer);
    }
  }

  @protected
  void sse_encode_operator(Operator self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Duration(
      Duration? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Chrono_Duration(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_closed_window(
      ClosedWindow? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_closed_window(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_csv_encoding(
      CsvEncoding? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_csv_encoding(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_null_values(
      NullValues? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_null_values(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_quantile_interpol_options(
      QuantileInterpolOptions? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_quantile_interpol_options(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_row_count(
      RowCount? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_row_count(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_time_unit(
      TimeUnit? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_time_unit(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_window_mapping(
      WindowMapping? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_window_mapping(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_data_type(
      List<DataType>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_data_type(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_String(
      List<String?>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_Chrono_Duration(
      List<Duration?>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_Chrono_Duration(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_bool(
      List<bool?>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_f_64(
      List<double?>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_i_32(
      List<int?>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_i_64(
      List<int?>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_f_64(
      Float64List? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_i_64(
      Int64List? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_32(
      Uint32List? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_quantile_interpol_options(
      QuantileInterpolOptions self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_row_count(RowCount self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
    sse_encode_u_32(self.offset, serializer);
  }

  @protected
  void sse_encode_time_unit(TimeUnit self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unique_keep_strategy(
      UniqueKeepStrategy self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_window_mapping(WindowMapping self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }
}
