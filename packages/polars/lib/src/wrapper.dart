// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'ffi.io.dart' if (dart.library.html) 'ffi.web.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'wrapper.freezed.dart';

abstract class PolarsWrapper {
  /// Reads a [.csv](https://en.wikipedia.org/wiki/Comma-separated_values) file into a [DataFrame].
  ///
  /// - `columns`: Select only columns matching these names
  /// - `delimiter`: Specify the delimiter for this file.
  /// - `commentChar`: Ignore the rest of a line after encountering this character.
  /// - `eolChar`: Stop reading after encountering this character.
  /// - `quoteChar`: Specify the quote character, if set to null disables quoting.
  /// - `skipRows`: Skip the first few rows, then parse the header and the dataframe.
  /// - `skipRowsAfterHeader`: Skip this many rows after the header.
  /// - `chunkSize`: Specify the chunk size of the internal parser. Performance knob.
  /// - `nRows`: Try to read up to n rows then stop. Might not be honored in multithreading execution.
  /// - `nullValues`: Specify values to be interpreted as null.
  /// - `projection`: Select only columns at the specified indices.
  /// - `rechunk`: Relocate the dataframe into contiguous memory after parsing.
  ///              Slow, but improves performance for later operations.
  Future<DataFrame> readCsv(
      {required String path,
      Schema? dtypes,
      List<DataType>? dtypesSlice,
      bool? hasHeader,
      List<String>? columns,
      String? delimiter,
      String? commentChar,
      String? eolChar,
      int? chunkSize,
      int? sampleSize,
      RowCount? rowCount,
      CsvEncoding? encoding,
      int? nRows,
      int? nThreads,
      NullValues? nullValues,
      Uint32List? projection,
      String? quoteChar = '"',
      int skipRows = 0,
      int skipRowsAfterHeader = 0,
      bool ignoreParserErrors = false,
      bool rechunk = false,
      bool parseDates = true,
      bool lowMemory = false,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadCsvConstMeta;

  /// Prepares a [.csv](https://en.wikipedia.org/wiki/Comma-separated_values) file for reading into a [LazyFrame].
  ///
  /// - `delimiter`: Specify the delimiter for this file.
  /// - `commentChar`: Ignore the rest of a line after encountering this character.
  /// - `eolChar`: Stop reading after encountering this character.
  /// - `quoteChar`: Specify the quote character, if set to null disables quoting.
  /// - `skipRows`: Skip the first few rows, then parse the header and the dataframe.
  /// - `skipRowsAfterHeader`: Skip this many rows after the header.
  /// - `nRows`: Try to read up to n rows then stop. Might not be honored in multithreading execution.
  /// - `nullValues`: Specify values to be interpreted as null.
  /// - `rechunk`: Relocate the dataframe into contiguous memory after parsing.
  ///              Slow, but improves performance for later operations.
  /// - `inferSchemaLength`: Specify how many rows to read to infer the schema, if null the entire table is scanned.
  /// - `cache`: Cache the dataframe after reading.
  Future<LazyFrame> scanCsv(
      {required String path,
      Schema? dtypeOverwrite,
      bool? hasHeader,
      String? delimiter,
      String? commentChar,
      String? eolChar,
      String? quoteChar = '"',
      int skipRows = 0,
      int skipRowsAfterHeader = 0,
      RowCount? rowCount,
      CsvEncoding? encoding,
      int? nRows,
      NullValues? nullValues,
      bool ignoreParserErrors = false,
      bool rechunk = false,
      bool parseDates = true,
      int? inferSchemaLength = 100,
      bool cache = false,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kScanCsvConstMeta;

  /// Reads a [.json](https://en.wikipedia.org/wiki/JSON) file into a [DataFrame].
  Future<DataFrame> readJson(
      {required String path,
      Schema? schema,
      int? batchSize,
      List<String>? projection,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadJsonConstMeta;

  /// Returns a new, empty dataframe.
  DataFrame ofStaticMethodDataFrame({List<Series>? series, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOfStaticMethodDataFrameConstMeta;

  /// Iterate through this dataframe's rows.
  ///
  /// Use [parseRow] to retrieve the canonical values for these rows.
  Stream<List<dynamic>> iterMethodDataFrame(
      {required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIterMethodDataFrameConstMeta;

  /// Select a single column by name.
  Series columnMethodDataFrame(
      {required DataFrame that, required String column, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kColumnMethodDataFrameConstMeta;

  /// Select multiple columns by name.
  List<Series> columnsMethodDataFrame(
      {required DataFrame that, required List<String> columns, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kColumnsMethodDataFrameConstMeta;

  /// Select the column at the given index.
  Series columnAtMethodDataFrame(
      {required DataFrame that, required int index, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kColumnAtMethodDataFrameConstMeta;

  /// Dump the contents of this entire dataframe.
  Future<String> dumpMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDumpMethodDataFrameConstMeta;

  /// Returns the amount of bytes occupied by this series.
  int estimatedSizeMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEstimatedSizeMethodDataFrameConstMeta;

  /// Add a new column at index 0 denoting the row number.
  Future<DataFrame> withRowCountMethodDataFrame(
      {required DataFrame that,
      required String name,
      int? offset,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWithRowCountMethodDataFrameConstMeta;

  /// Get the names of this dataframe's columns.
  List<String> getColumnNamesMethodDataFrame(
      {required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetColumnNamesMethodDataFrameConstMeta;

  /// Get all columns of this dataframe.
  Future<List<Series>> getColumnsMethodDataFrame(
      {required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetColumnsMethodDataFrameConstMeta;

  /// Returns the width of this dataframe, aka the number of columns.
  int widthMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWidthMethodDataFrameConstMeta;

  /// Returns the height of this dataframe, aka the number of rows.
  int heightMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHeightMethodDataFrameConstMeta;

  /// Returns whether this dataframe has no rows.
  bool isEmptyMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsEmptyMethodDataFrameConstMeta;

  /// Sample [n] datapoints from this dataframe.
  Future<DataFrame> sampleMethodDataFrame(
      {required DataFrame that,
      required int n,
      bool withReplacement = false,
      bool shuffle = false,
      int? seed,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSampleMethodDataFrameConstMeta;

  /// Makes a new dataframe with the specified columns from this dataframe.
  DataFrame selectMethodDataFrame(
      {required DataFrame that, required List<String> columns, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSelectMethodDataFrameConstMeta;

  /// Returns the first few rows of this dataframe.
  DataFrame headMethodDataFrame(
      {required DataFrame that, int? length, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHeadMethodDataFrameConstMeta;

  /// Returns the last few rows of this dataframe.
  DataFrame tailMethodDataFrame(
      {required DataFrame that, int? length, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTailMethodDataFrameConstMeta;

  /// Output statistics about this dataframe.
  Future<DataFrame> describeMethodDataFrame(
      {required DataFrame that, Float64List? percentiles, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDescribeMethodDataFrameConstMeta;

  /// Drops a column by name, producing a new dataframe.
  DataFrame dropMethodDataFrame(
      {required DataFrame that, required String column, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDropMethodDataFrameConstMeta;

  /// Drops a column in-place and returns it.
  Series dropInPlaceMethodDataFrame(
      {required DataFrame that, required String column, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDropInPlaceMethodDataFrameConstMeta;

  /// Returns a dataframe with columns from this dataframe in reverse order.
  DataFrame reverseMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReverseMethodDataFrameConstMeta;

  /// Returns the height and width of this dataframe.
  Shape shapeMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kShapeMethodDataFrameConstMeta;

  /// Aggregate the columns to their maximum values.
  Future<DataFrame> maxMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMaxMethodDataFrameConstMeta;

  /// Get a row of data from this dataframe.
  ///
  /// This method may be slow due to conversions between different data formats.
  Future<List<dynamic>> getRowMethodDataFrame(
      {required DataFrame that, required int index, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetRowMethodDataFrameConstMeta;

  /// Returns the [Schema] of this dataframe.
  Schema schemaMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSchemaMethodDataFrameConstMeta;

  /// Returns the datatypes of this dataframe's columns.
  List<DataType> dtypesMethodDataFrame({required DataFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDtypesMethodDataFrameConstMeta;

  /// Returns a [LazyFrame] to which operations can be applied lazily.
  /// As opposed to [LazyFrame], [DataFrame] by default applies its operations eagerly.
  ///
  /// This operation will fail if this dataframe is currently being shared, unless
  /// `allowCopy` is true in which case this dataframe will be copied.
  LazyFrame lazyMethodTakeSelfDataFrame(
      {required DataFrame that,
      bool allowCopy = false,
      bool? projectionPushdown,
      bool? predicatePushdown,
      bool? typeCoercion,
      bool? simplifyExpressions,
      bool? slicePushdown,
      bool? streaming,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLazyMethodTakeSelfDataFrameConstMeta;

  /// Select (and rename) columns from the query.
  LazyFrame selectMethodTakeSelfLazyFrame(
      {required LazyFrame that, required List<Expr> exprs, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSelectMethodTakeSelfLazyFrameConstMeta;

  /// Filter by the specified predicate expression.
  LazyFrame filterMethodTakeSelfLazyFrame(
      {required LazyFrame that, required Expr pred, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFilterMethodTakeSelfLazyFrameConstMeta;

  /// Define conditions by which to group and aggregate rows.
  LazyGroupBy groupbyMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required List<Expr> exprs,
      bool stable = false,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGroupbyMethodTakeSelfLazyFrameConstMeta;

  /// Reverse the order of this dataframe's columns.
  LazyFrame reverseMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReverseMethodTakeSelfLazyFrameConstMeta;

  /// Add a column to this dataframe.
  LazyFrame withColumnMethodTakeSelfLazyFrame(
      {required LazyFrame that, required Expr expr, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kWithColumnMethodTakeSelfLazyFrameConstMeta;

  /// Add columns to this dataframe.
  LazyFrame withColumnsMethodTakeSelfLazyFrame(
      {required LazyFrame that, required List<Expr> expr, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kWithColumnsMethodTakeSelfLazyFrameConstMeta;

  /// Caches the results into a new [LazyFrame].
  ///
  /// This should be used to prevent computations running multiple times.
  LazyFrame cacheMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCacheMethodTakeSelfLazyFrameConstMeta;

  /// Executes all lazy operations and collects results into a [DataFrame].
  Future<DataFrame> collectMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCollectMethodTakeSelfLazyFrameConstMeta;

  /// Creates the [Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product) from both frames,
  /// preserving the order of this frame's keys.
  LazyFrame crossJoinMethodTakeSelfLazyFrame(
      {required LazyFrame that, required LazyFrame other, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCrossJoinMethodTakeSelfLazyFrameConstMeta;

  /// Performs a [left outer join](https://en.wikipedia.org/wiki/Join_(SQL)#Left_outer_join) with [other].
  LazyFrame leftJoinMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLeftJoinMethodTakeSelfLazyFrameConstMeta;

  /// Performs a [full outer join](https://en.wikipedia.org/wiki/Join_(SQL)#Full_outer_join) with [other].
  LazyFrame outerJoinMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOuterJoinMethodTakeSelfLazyFrameConstMeta;

  /// Performs an [inner join](https://en.wikipedia.org/wiki/Join_(SQL)#Inner_join_and_NULL_values) with [other].
  LazyFrame innerJoinMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInnerJoinMethodTakeSelfLazyFrameConstMeta;

  /// Joins this table to [other].
  ///
  /// Use [on] to specify columns on both frames to join on, or specify separately
  /// using [leftOn] and [rightOn].
  ///
  /// [suffix] specifies the suffix to add to duplicate columns of [other].
  ///
  /// Example:
  /// ```dart
  /// final joined = left
  ///   .join(
  ///     other: right,
  ///     leftOn: [col('foo'), col('bar')],
  ///     rightOn: [col('foo'), col('bar')],
  ///     how: JoinType.Inner,
  ///   );
  /// ```
  LazyFrame joinMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required LazyFrame other,
      List<Expr>? on,
      List<Expr>? leftOn,
      List<Expr>? rightOn,
      String suffix = r"_right",
      JoinType how = JoinType.Left,
      bool allowParallel = true,
      bool forceParallel = false,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJoinMethodTakeSelfLazyFrameConstMeta;

  /// Aggregate all columns as their max values.
  LazyFrame maxMethodTakeSelfLazyFrame({required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMaxMethodTakeSelfLazyFrameConstMeta;

  /// Aggregate all columns as their min values.
  LazyFrame minMethodTakeSelfLazyFrame({required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMinMethodTakeSelfLazyFrameConstMeta;

  /// Aggregate all columns as their sums.
  LazyFrame sumMethodTakeSelfLazyFrame({required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSumMethodTakeSelfLazyFrameConstMeta;

  /// Aggregate all columns as their means.
  LazyFrame meanMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMeanMethodTakeSelfLazyFrameConstMeta;

  /// Aggregate all columns as their medians.
  LazyFrame medianMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMedianMethodTakeSelfLazyFrameConstMeta;

  /// Aggregate all columns as their quantiles.
  LazyFrame quantileMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required Expr quantile,
      required QuantileInterpolOptions interpol,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQuantileMethodTakeSelfLazyFrameConstMeta;

  /// Aggregate all columns as their standard deviances.
  LazyFrame stdMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int ddof, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStdMethodTakeSelfLazyFrameConstMeta;

  /// Aggregate all columns as their variances.
  LazyFrame varianceMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int ddof, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVarianceMethodTakeSelfLazyFrameConstMeta;

  /// Explode each column.
  LazyFrame explodeMethodTakeSelfLazyFrame(
      {required LazyFrame that, required List<Expr> columns, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExplodeMethodTakeSelfLazyFrameConstMeta;

  /// Keep unique rows without maintaining order.
  LazyFrame uniqueMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      List<String>? subset,
      required UniqueKeepStrategy keepStrategy,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUniqueMethodTakeSelfLazyFrameConstMeta;

  /// Drop null rows.
  ///
  /// Same as `frame.filter(col('*').isNotNull)`.
  LazyFrame dropNullsMethodTakeSelfLazyFrame(
      {required LazyFrame that, List<Expr>? subset, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDropNullsMethodTakeSelfLazyFrameConstMeta;

  /// Slice the frame.
  LazyFrame sliceMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required int offset,
      required int len,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSliceMethodTakeSelfLazyFrameConstMeta;

  /// Get the first row.
  LazyFrame firstMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFirstMethodTakeSelfLazyFrameConstMeta;

  /// Get the last row.
  LazyFrame lastMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLastMethodTakeSelfLazyFrameConstMeta;

  /// Get the last [n] rows.
  LazyFrame tailMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int n, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTailMethodTakeSelfLazyFrameConstMeta;

  /// Melt this dataframe from the wide format to the long format.
  LazyFrame meltMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required List<String> idVars,
      required List<String> valueVars,
      String? variableName,
      String? valueName,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMeltMethodTakeSelfLazyFrameConstMeta;

  /// Limit this dataframe to the first [n] rows.
  ///
  /// To avoid scanning the rows, use [fetch].
  LazyFrame limitMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int n, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLimitMethodTakeSelfLazyFrameConstMeta;

  /// Similar to [collect], but overrides the number of rows read by each operation.
  ///
  /// The final row count is not guaranteed to be equal [nRows].
  Future<DataFrame> fetchMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int nRows, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchMethodTakeSelfLazyFrameConstMeta;

  /// Add a new column at index 0 denoting the row number.
  LazyFrame withRowCountMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required String name,
      int? offset,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kWithRowCountMethodTakeSelfLazyFrameConstMeta;

  /// Create a new series of strings.
  Series ofStringsStaticMethodSeries(
      {required String name, List<String?>? values, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOfStringsStaticMethodSeriesConstMeta;

  /// Create a new series of 32-bit wide integers.
  Series ofI32StaticMethodSeries(
      {required String name, List<int?>? values, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOfI32StaticMethodSeriesConstMeta;

  /// Create a new series of 64-bit wide integers.
  Series ofIntsStaticMethodSeries(
      {required String name, List<int?>? values, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOfIntsStaticMethodSeriesConstMeta;

  /// Create a new series of [Duration]s.
  Series ofDurationsStaticMethodSeries(
      {required String name,
      List<Duration?>? values,
      TimeUnit unit = TimeUnit.Milliseconds,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOfDurationsStaticMethodSeriesConstMeta;

  /// Create a new series of doubles.
  Series ofDoublesStaticMethodSeries(
      {required String name, List<double?>? values, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOfDoublesStaticMethodSeriesConstMeta;

  /// Adds the contents of [other] onto this series.
  ///
  /// Throws if [other] is self.
  Future<void> appendMethodSeries(
      {required Series that, required Series other, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAppendMethodSeriesConstMeta;

  /// Casts this series into one with the specified datatype.
  Future<Series> castMethodSeries(
      {required Series that,
      required DataType dtype,
      bool strict = true,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCastMethodSeriesConstMeta;

  /// If this series is a UTF-8 series, returns its Dart representation.
  Future<List<String?>> asStringsMethodSeries(
      {required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsStringsMethodSeriesConstMeta;

  /// If compatible, returns a representation of this series as integers.
  Future<List<int?>> asIntsMethodSeries(
      {required Series that, bool strict = true, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsIntsMethodSeriesConstMeta;

  /// If compatible, returns a representation of this series as integers.
  Future<List<double?>> asDoublesMethodSeries(
      {required Series that, bool strict = true, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsDoublesMethodSeriesConstMeta;

  /// If this series contains [Duration]s, returns its Dart representation.
  Future<List<Duration?>> asDurationsMethodSeries(
      {required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsDurationsMethodSeriesConstMeta;

  /// If this series contains [DateTime]s, returns its Dart representation.
  ///
  /// Datetimes are parsed as-is, without any timezone correction.
  Future<List<DateTime?>> asNaiveDatetimeMethodSeries(
      {required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsNaiveDatetimeMethodSeriesConstMeta;

  /// If this series contains [DateTime]s, returns its Dart representation.
  ///
  /// If a timezone is defined by this series, the datetimes will be converted to UTC.
  /// Otherwise, the datetimes are assumed to be in UTC.
  Future<List<DateTime?>> asUtcDatetimeMethodSeries(
      {required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsUtcDatetimeMethodSeriesConstMeta;

  /// If this series contains [DateTime]s, returns its Dart representation.
  ///
  /// If a timezone is defined by this series, the datetimes will be converted to the local timezone.
  /// Otherwise, the datetimes are assumed to be in the local timezone.
  Future<List<DateTime?>> asLocalDatetimeMethodSeries(
      {required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsLocalDatetimeMethodSeriesConstMeta;

  /// Returns a new series with each value's absolute value.
  Future<Series> absMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAbsMethodSeriesConstMeta;

  /// Returns a new sorted series.
  Future<Series> sortMethodSeries(
      {required Series that, bool reverse = false, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSortMethodSeriesConstMeta;

  /// Returns a new shuffled series.
  Future<Series> shuffleMethodSeries(
      {required Series that, int? seed, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kShuffleMethodSeriesConstMeta;

  /// Sums all non-null rows in this series to produce a result.
  ///
  /// Returns null if the series only contains null values.
  Future<double?> sumMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSumMethodSeriesConstMeta;

  /// Returns the sum of this series' values as a single-element series.
  Future<Series> sumAsSeriesMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSumAsSeriesMethodSeriesConstMeta;

  /// Returns the minimum value of this series' values.
  ///
  /// Returns null if one of the values are also null.
  Future<double?> minMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMinMethodSeriesConstMeta;

  /// Returns the maximum value of this series' values.
  ///
  /// Returns null if one of the values are also null.
  Future<double?> maxMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMaxMethodSeriesConstMeta;

  /// Expands a series of lists into rows of values, or strings into rows of characters.
  Future<Series> explodeMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExplodeMethodSeriesConstMeta;

  /// TODO: docs
  Future<Series> explodeByOffsetsMethodSeries(
      {required Series that, required Int64List offsets, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExplodeByOffsetsMethodSeriesConstMeta;

  /// Calculates the cumulative max at each element.
  Future<Series> cummaxMethodSeries(
      {required Series that, bool reverse = false, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCummaxMethodSeriesConstMeta;

  /// Calculates the cumulative min at each element.
  Future<Series> cumminMethodSeries(
      {required Series that, bool reverse = false, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCumminMethodSeriesConstMeta;

  /// Calculates the cumulative product at each element.
  Future<Series> cumprodMethodSeries(
      {required Series that, bool reverse = false, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCumprodMethodSeriesConstMeta;

  /// Calculates the cumulative sum at each element.
  Future<Series> cumsumMethodSeries(
      {required Series that, bool reverse = false, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCumsumMethodSeriesConstMeta;

  /// Calculates the product of each element in the series and returns it in a single-element series.
  Future<Series> productMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProductMethodSeriesConstMeta;

  /// Get the value at [index] as a string.
  String? getStringMethodSeries(
      {required Series that, required int index, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetStringMethodSeriesConstMeta;

  /// Get the value at [index] as a double.
  double? getMethodSeries(
      {required Series that, required int index, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetMethodSeriesConstMeta;

  /// Get the first few values of this series.
  Series headMethodSeries({required Series that, int? length, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHeadMethodSeriesConstMeta;

  /// Get the last few values of this series.
  Series tailMethodSeries({required Series that, int? length, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTailMethodSeriesConstMeta;

  /// Calculates the mean (average) of this series.
  Future<double?> meanMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMeanMethodSeriesConstMeta;

  /// Calculates the [median](https://en.wikipedia.org/wiki/Median) of this series.
  Future<double?> medianMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMedianMethodSeriesConstMeta;

  /// Calculates and wraps this series' mean as a single-element series.
  Future<Series> meanAsSeriesMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMeanAsSeriesMethodSeriesConstMeta;

  /// Calculates and wraps this series' median as a single-element series.
  Future<Series> medianAsSeriesMethodSeries(
      {required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMedianAsSeriesMethodSeriesConstMeta;

  /// Returns the amount of bytes occupied by this series.
  int estimatedSizeMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEstimatedSizeMethodSeriesConstMeta;

  /// Returns a new series with elements from this series added to [other]'s element-wise.
  Series addToMethodSeries(
      {required Series that, required Series other, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddToMethodSeriesConstMeta;

  /// Returns a new series with elements from this series subtracted from [other]'s element-wise.
  Series subtractMethodSeries(
      {required Series that, required Series other, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSubtractMethodSeriesConstMeta;

  /// Returns a new series with elements from this series multiplied with [other]'s element-wise.
  Series multiplyMethodSeries(
      {required Series that, required Series other, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMultiplyMethodSeriesConstMeta;

  /// Returns a new series with elements from this series divided by [other]'s element-wise.
  Series divideMethodSeries(
      {required Series that, required Series other, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDivideMethodSeriesConstMeta;

  /// Returns a new series with the [remainder](https://en.wikipedia.org/wiki/Remainder)
  /// between this series' and [other]'s elements.
  Series remainderMethodSeries(
      {required Series that, required Series other, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemainderMethodSeriesConstMeta;

  /// Returns whether this is a series of booleans.
  bool isBoolMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsBoolMethodSeriesConstMeta;

  /// Returns whether this is a series of UTF-8 strings.
  bool isUtf8MethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsUtf8MethodSeriesConstMeta;

  /// Returns whether this is a series of numeric values.
  bool isNumericMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsNumericMethodSeriesConstMeta;

  /// Returns whether this is a series of [DateTime] or [Duration]s.
  bool isTemporalMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsTemporalMethodSeriesConstMeta;

  /// Dump the contents of this entire series.
  Future<String> dumpMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDumpMethodSeriesConstMeta;

  /// Rename this series to [name] in-place.
  void renameMethodSeries(
      {required Series that, required String name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRenameMethodSeriesConstMeta;

  /// Returns the unique values of this series.
  ///
  /// If `stable` is true, extra work is done to maintain the original order of elements.
  Future<Series> uniqueMethodSeries(
      {required Series that, bool stable = false, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUniqueMethodSeriesConstMeta;

  /// Returns whether this series is identical to [other].
  ///
  /// if `ignoreNull` is true, null values are considered to be equal.
  Future<bool> equalMethodSeries(
      {required Series that,
      required Series other,
      bool ignoreNull = false,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEqualMethodSeriesConstMeta;

  /// Applies a binary operation onto this series with a scalar value.
  ///
  /// For logic operators, the new series is a boolean mask. Otherwise,
  /// it will be a series of numeric values.
  Future<Series> applyScalarMethodSeries(
      {required Series that,
      required Operator op,
      required double value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kApplyScalarMethodSeriesConstMeta;

  /// Creates a new series with the specified dimensions.
  Future<Series> reshapeMethodSeries(
      {required Series that, required Int64List dims, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReshapeMethodSeriesConstMeta;

  /// Calculates the standard deviation of this series with the specified degree of freedom.
  Future<Series> stdAsSeriesMethodSeries(
      {required Series that, required int ddof, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStdAsSeriesMethodSeriesConstMeta;

  /// Calculates the variance of this series with the specified degree of freedom.
  Future<Series> varAsSeriesMethodSeries(
      {required Series that, required int ddof, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVarAsSeriesMethodSeriesConstMeta;

  /// Returns an untyped list.
  Future<List<dynamic>> toListMethodSeries(
      {required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToListMethodSeriesConstMeta;

  /// Casts this series into a [DataFrame]. May create a copy.
  DataFrame intoFrameMethodTakeSelfSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIntoFrameMethodTakeSelfSeriesConstMeta;

  /// Iterate over this series' values.
  Stream<dynamic> iterMethodSeries({required Series that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIterMethodSeriesConstMeta;

  /// Group by and aggregate.
  ///
  /// Select a column with [col] and choose an aggregation. If you want to aggregate all columns
  /// use `col("*")`.
  LazyFrame aggMethodTakeSelfLazyGroupBy(
      {required LazyGroupBy that, required List<Expr> exprs, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAggMethodTakeSelfLazyGroupByConstMeta;

  /// Return the first [n] rows of each group.
  LazyFrame headMethodTakeSelfLazyGroupBy(
      {required LazyGroupBy that, int? n, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHeadMethodTakeSelfLazyGroupByConstMeta;

  /// Return the last [n] rows of each group.
  LazyFrame tailMethodTakeSelfLazyGroupBy(
      {required LazyGroupBy that, int? n, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTailMethodTakeSelfLazyGroupByConstMeta;

  /// Create a schema from a list of [Field]s.
  Schema ofStaticMethodSchema({required List<Field> fields, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOfStaticMethodSchemaConstMeta;

  DropFnType get dropOpaqueRwLockPDataFrame;
  ShareFnType get shareOpaqueRwLockPDataFrame;
  OpaqueTypeFinalizer get RwLockPDataFrameFinalizer;

  DropFnType get dropOpaqueRwLockPLazyFrame;
  ShareFnType get shareOpaqueRwLockPLazyFrame;
  OpaqueTypeFinalizer get RwLockPLazyFrameFinalizer;

  DropFnType get dropOpaqueRwLockPLazyGroupBy;
  ShareFnType get shareOpaqueRwLockPLazyGroupBy;
  OpaqueTypeFinalizer get RwLockPLazyGroupByFinalizer;

  DropFnType get dropOpaqueRwLockPSchema;
  ShareFnType get shareOpaqueRwLockPSchema;
  OpaqueTypeFinalizer get RwLockPSchemaFinalizer;

  DropFnType get dropOpaqueRwLockPSeries;
  ShareFnType get shareOpaqueRwLockPSeries;
  OpaqueTypeFinalizer get RwLockPSeriesFinalizer;
}

@sealed
class RwLockPDataFrame extends FrbOpaque {
  RwLockPDataFrame.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => wrapper.dropOpaqueRwLockPDataFrame;

  @override
  ShareFnType get shareFn => wrapper.shareOpaqueRwLockPDataFrame;

  @override
  OpaqueTypeFinalizer get staticFinalizer => wrapper.RwLockPDataFrameFinalizer;
}

@sealed
class RwLockPLazyFrame extends FrbOpaque {
  RwLockPLazyFrame.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => wrapper.dropOpaqueRwLockPLazyFrame;

  @override
  ShareFnType get shareFn => wrapper.shareOpaqueRwLockPLazyFrame;

  @override
  OpaqueTypeFinalizer get staticFinalizer => wrapper.RwLockPLazyFrameFinalizer;
}

@sealed
class RwLockPLazyGroupBy extends FrbOpaque {
  RwLockPLazyGroupBy.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => wrapper.dropOpaqueRwLockPLazyGroupBy;

  @override
  ShareFnType get shareFn => wrapper.shareOpaqueRwLockPLazyGroupBy;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      wrapper.RwLockPLazyGroupByFinalizer;
}

@sealed
class RwLockPSchema extends FrbOpaque {
  RwLockPSchema.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => wrapper.dropOpaqueRwLockPSchema;

  @override
  ShareFnType get shareFn => wrapper.shareOpaqueRwLockPSchema;

  @override
  OpaqueTypeFinalizer get staticFinalizer => wrapper.RwLockPSchemaFinalizer;
}

@sealed
class RwLockPSeries extends FrbOpaque {
  RwLockPSeries.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => wrapper.dropOpaqueRwLockPSeries;

  @override
  ShareFnType get shareFn => wrapper.shareOpaqueRwLockPSeries;

  @override
  OpaqueTypeFinalizer get staticFinalizer => wrapper.RwLockPSeriesFinalizer;
}

@freezed
class AggExpr with _$AggExpr {
  const factory AggExpr.min({
    required Expr input,
    required bool propagateNans,
  }) = AggExpr_Min;
  const factory AggExpr.max({
    required Expr input,
    required bool propagateNans,
  }) = AggExpr_Max;
  const factory AggExpr.median(
    Expr field0,
  ) = AggExpr_Median;
  const factory AggExpr.nUnique(
    Expr field0,
  ) = AggExpr_NUnique;
  const factory AggExpr.first(
    Expr field0,
  ) = AggExpr_First;
  const factory AggExpr.last(
    Expr field0,
  ) = AggExpr_Last;
  const factory AggExpr.mean(
    Expr field0,
  ) = AggExpr_Mean;
  const factory AggExpr.list(
    Expr field0,
  ) = AggExpr_List;
  const factory AggExpr.count(
    Expr field0,
  ) = AggExpr_Count;
  const factory AggExpr.quantile({
    required Expr expr,
    required Expr quantile,
    required QuantileInterpolOptions interpol,
  }) = AggExpr_Quantile;
  const factory AggExpr.sum(
    Expr field0,
  ) = AggExpr_Sum;
  const factory AggExpr.aggGroups(
    Expr field0,
  ) = AggExpr_AggGroups;
  const factory AggExpr.std(
    Expr field0,
    int field1,
  ) = AggExpr_Std;
}

/// Options for CSV encoding.
enum CsvEncoding {
  /// Utf8 encoding
  Utf8,

  /// Utf8 encoding and unknown bytes are replaced with �
  LossyUtf8,
}

/// A contiguous growable collection of [Series] that have the same length.
///
/// ## Import declarations
///
/// ```dart
/// import 'package:polars/polars.dart';                 // in Dart library
/// import 'package:flutter_polars/flutter_polars.dart'; // in Flutter
/// ```
///
/// # Initialization
/// ## Default
///
/// A `DataFrame` can be initialized empty:
///
/// ```dart
/// final df = DataFrame.of(bridge: pl);
/// assert(df.isEmpty());
/// ```
///
/// ## Wrapping a `List<Series>`
///
/// A `DataFrame` is built upon a `List<Series>` where the [Series] have the same length.
///
/// ```dart
/// final s1 = Series.ofStrings(
///     bridge: pl, name: "Fruit",
///     values: ["Apple", "Apple", "Pear"]);
/// final s2 = Series.ofStrings(
///     bridge: pl, name: "Color",
///     values: ["Red", "Yellow", "Green"]);
/// final df = DataFrame.of(bridge: pl, series: [s1, s2]);
/// ```
///
/// ## Using a CSV file
///
/// See [readCsv] and [scanCsv].
///
/// # Indexing
/// ## By a number
///
/// ```dart
/// final df = DataFrame.of(bridge: pl, series: [
///     Series.ofStrings(bridge: pl, name: "Fruit", values: ["Apple", "Apple", "Pear"]),
///     Series.ofStrings(bridge: pl, name: "Color", values: ["Red", "Yellow", "Green"]),
/// ]);
///
/// assert(await df[0].asStrings(), ["Apple", "Apple", "Pear"]);
/// assert(await df[1].asStrings(), ["Red", "Yellow", "Green"]);
/// ```
///
/// ## By a [Series] name
///
/// ```dart
/// final df = DataFrame.of(bridge: pl, series: [
///     Series.ofStrings(bridge: pl, name: "Fruit", values: ["Apple", "Apple", "Pear"]),
///     Series.ofStrings(bridge: pl, name: "Color", values: ["Red", "Yellow", "Green"]),
/// ]);
///
/// assert(await df["Fruit"].asStrings(), ["Apple", "Apple", "Pear"]);
/// assert(await df["Color"].asStrings(), ["Red", "Yellow", "Green"]);
/// ```
class DataFrame {
  /// @nodoc
  final RwLockPDataFrame field0;

  const DataFrame({
    required this.field0,
  });

  /// Returns a new, empty dataframe.
  static DataFrame of({List<Series>? series, dynamic hint}) =>
      wrapper.ofStaticMethodDataFrame(series: series, hint: hint);

  /// Iterate through this dataframe's rows.
  ///
  /// Use [parseRow] to retrieve the canonical values for these rows.
  Stream<List<dynamic>> iter({dynamic hint}) => wrapper.iterMethodDataFrame(
        that: this,
      );

  /// Select a single column by name.
  Series column({required String column, dynamic hint}) =>
      wrapper.columnMethodDataFrame(
        that: this,
        column: column,
      );

  /// Select multiple columns by name.
  List<Series> columns({required List<String> columns, dynamic hint}) =>
      wrapper.columnsMethodDataFrame(
        that: this,
        columns: columns,
      );

  /// Select the column at the given index.
  Series columnAt({required int index, dynamic hint}) =>
      wrapper.columnAtMethodDataFrame(
        that: this,
        index: index,
      );

  /// Dump the contents of this entire dataframe.
  Future<String> dump({dynamic hint}) => wrapper.dumpMethodDataFrame(
        that: this,
      );

  /// Returns the amount of bytes occupied by this series.
  int estimatedSize({dynamic hint}) => wrapper.estimatedSizeMethodDataFrame(
        that: this,
      );

  /// Add a new column at index 0 denoting the row number.
  Future<DataFrame> withRowCount(
          {required String name, int? offset, dynamic hint}) =>
      wrapper.withRowCountMethodDataFrame(
        that: this,
        name: name,
        offset: offset,
      );

  /// Get the names of this dataframe's columns.
  List<String> getColumnNames({dynamic hint}) =>
      wrapper.getColumnNamesMethodDataFrame(
        that: this,
      );

  /// Get all columns of this dataframe.
  Future<List<Series>> getColumns({dynamic hint}) =>
      wrapper.getColumnsMethodDataFrame(
        that: this,
      );

  /// Returns the width of this dataframe, aka the number of columns.
  int width({dynamic hint}) => wrapper.widthMethodDataFrame(
        that: this,
      );

  /// Returns the height of this dataframe, aka the number of rows.
  int height({dynamic hint}) => wrapper.heightMethodDataFrame(
        that: this,
      );

  /// Returns whether this dataframe has no rows.
  bool isEmpty({dynamic hint}) => wrapper.isEmptyMethodDataFrame(
        that: this,
      );

  /// Sample [n] datapoints from this dataframe.
  Future<DataFrame> sample(
          {required int n,
          bool withReplacement = false,
          bool shuffle = false,
          int? seed,
          dynamic hint}) =>
      wrapper.sampleMethodDataFrame(
        that: this,
        n: n,
        withReplacement: withReplacement,
        shuffle: shuffle,
        seed: seed,
      );

  /// Makes a new dataframe with the specified columns from this dataframe.
  DataFrame select({required List<String> columns, dynamic hint}) =>
      wrapper.selectMethodDataFrame(
        that: this,
        columns: columns,
      );

  /// Returns the first few rows of this dataframe.
  DataFrame head({int? length, dynamic hint}) => wrapper.headMethodDataFrame(
        that: this,
        length: length,
      );

  /// Returns the last few rows of this dataframe.
  DataFrame tail({int? length, dynamic hint}) => wrapper.tailMethodDataFrame(
        that: this,
        length: length,
      );

  /// Output statistics about this dataframe.
  Future<DataFrame> describe({Float64List? percentiles, dynamic hint}) =>
      wrapper.describeMethodDataFrame(
        that: this,
        percentiles: percentiles,
      );

  /// Drops a column by name, producing a new dataframe.
  DataFrame drop({required String column, dynamic hint}) =>
      wrapper.dropMethodDataFrame(
        that: this,
        column: column,
      );

  /// Drops a column in-place and returns it.
  Series dropInPlace({required String column, dynamic hint}) =>
      wrapper.dropInPlaceMethodDataFrame(
        that: this,
        column: column,
      );

  /// Returns a dataframe with columns from this dataframe in reverse order.
  DataFrame reverse({dynamic hint}) => wrapper.reverseMethodDataFrame(
        that: this,
      );

  /// Returns the height and width of this dataframe.
  Shape shape({dynamic hint}) => wrapper.shapeMethodDataFrame(
        that: this,
      );

  /// Aggregate the columns to their maximum values.
  Future<DataFrame> max({dynamic hint}) => wrapper.maxMethodDataFrame(
        that: this,
      );

  /// Get a row of data from this dataframe.
  ///
  /// This method may be slow due to conversions between different data formats.
  Future<List<dynamic>> getRow({required int index, dynamic hint}) =>
      wrapper.getRowMethodDataFrame(
        that: this,
        index: index,
      );

  /// Returns the [Schema] of this dataframe.
  Schema schema({dynamic hint}) => wrapper.schemaMethodDataFrame(
        that: this,
      );

  /// Returns the datatypes of this dataframe's columns.
  List<DataType> dtypes({dynamic hint}) => wrapper.dtypesMethodDataFrame(
        that: this,
      );

  /// Returns a [LazyFrame] to which operations can be applied lazily.
  /// As opposed to [LazyFrame], [DataFrame] by default applies its operations eagerly.
  ///
  /// This operation will fail if this dataframe is currently being shared, unless
  /// `allowCopy` is true in which case this dataframe will be copied.
  LazyFrame lazy(
          {bool allowCopy = false,
          bool? projectionPushdown,
          bool? predicatePushdown,
          bool? typeCoercion,
          bool? simplifyExpressions,
          bool? slicePushdown,
          bool? streaming,
          dynamic hint}) =>
      wrapper.lazyMethodTakeSelfDataFrame(
        that: this,
        allowCopy: allowCopy,
        projectionPushdown: projectionPushdown,
        predicatePushdown: predicatePushdown,
        typeCoercion: typeCoercion,
        simplifyExpressions: simplifyExpressions,
        slicePushdown: slicePushdown,
        streaming: streaming,
      );
}

@freezed
class DataType with _$DataType {
  /// Boolean
  const factory DataType.boolean() = DataType_Boolean;

  /// Unsigned 8-bit integer
  const factory DataType.uInt8() = DataType_UInt8;

  /// Unsigned 16-bit integer
  const factory DataType.uInt16() = DataType_UInt16;

  /// Unsigned 32-bit integer
  const factory DataType.uInt32() = DataType_UInt32;

  /// Unsigned 64-bit integer
  const factory DataType.uInt64() = DataType_UInt64;

  /// Signed 8-bit integer
  const factory DataType.int8() = DataType_Int8;

  /// Signed 16-bit integer
  const factory DataType.int16() = DataType_Int16;

  /// Signed 32-bit integer
  const factory DataType.int32() = DataType_Int32;

  /// Signed 64-bit integer, the default [int] on native platforms.
  const factory DataType.int64() = DataType_Int64;

  /// Single-precision floating point number
  const factory DataType.float32() = DataType_Float32;

  /// Double-precision floating point number, aka a [double].
  const factory DataType.float64() = DataType_Float64;

  /// String data
  const factory DataType.utf8() = DataType_Utf8;

  /// Raw bytes.
  const factory DataType.binary() = DataType_Binary;

  /// A 32-bit date representing the elapsed time since UNIX epoch (1970-01-01)
  /// in days (32 bits).
  const factory DataType.date() = DataType_Date;

  /// A 64-bit date representing the elapsed time since UNIX epoch (1970-01-01)
  /// in the given timeunit (64 bits).
  const factory DataType.datetime(
    TimeUnit field0, [
    String? field1,
  ]) = DataType_Datetime;

  /// 64-bit integer representing difference between times in milliseconds or nanoseconds
  const factory DataType.duration(
    TimeUnit field0,
  ) = DataType_Duration;

  /// A 64-bit time representing the elapsed time since midnight in nanoseconds
  const factory DataType.time() = DataType_Time;

  /// A typed list.
  const factory DataType.list(
    DataType field0,
  ) = DataType_List;

  /// A generic type that can be used in a `Series`
  /// &'static str can be used to determine/set inner type
  /// Structured data.
  const factory DataType.struct(
    List<Field> field0,
  ) = DataType_Struct;

  /// Some logical types we cannot know statically, e.g. Datetime
  const factory DataType.unknown() = DataType_Unknown;
}

@freezed
class Excluded with _$Excluded {
  /// By name
  const factory Excluded.name(
    String field0,
  ) = Excluded_Name;

  /// By type
  const factory Excluded.dtype(
    DataType field0,
  ) = Excluded_Dtype;
}

@freezed
class Expr with _$Expr {
  /// Give this expression a new name.
  const factory Expr.alias(
    Expr field0,
    String field1,
  ) = Expr_Alias;

  /// Get the column matching this name.
  const factory Expr.column(
    String field0,
  ) = Expr_Column;

  /// Get all columns matching these names.
  const factory Expr.columns(
    List<String> field0,
  ) = Expr_Columns;

  /// Get columns of these datatypes.
  const factory Expr.dtypeColumn(
    List<DataType> field0,
  ) = Expr_DtypeColumn;

  /// Represents a literal value, i.e. strings, numebrs and so on.
  const factory Expr.literal(
    LiteralValue field0,
  ) = Expr_Literal;

  /// A binary expression.
  const factory Expr.binaryExpr({
    /// The left-hand side column.
    required Expr left,

    /// The operator, e.g. ==, >, <.
    required Operator op,

    /// The right-hand side column.
    required Expr right,
  }) = Expr_BinaryExpr;

  /// Cast a column into one of another type.
  const factory Expr.cast({
    /// The column to be cast.
    required Expr expr,

    /// The new desired datatype.
    required DataType dataType,

    /// Whether incompatible values should be coerced.
    required bool strict,
  }) = Expr_Cast;

  /// Sort the column.
  const factory Expr.sort({
    /// The column to be sorted.
    required Expr expr,

    /// Options for sorting.
    required SortOptions options,
  }) = Expr_Sort;

  /// Take a column.
  const factory Expr.take({
    /// The column from which to take.
    required Expr expr,

    /// The index to take at.
    required Expr idx,
  }) = Expr_Take;

  /// Aggregating options.
  const factory Expr.agg(
    AggExpr field0,
  ) = Expr_Agg;

  /// A ternary operation.
  const factory Expr.ternary({
    /// The condition for this ternary.
    required Expr predicate,

    /// If `predicate` is true, evaluate to this.
    required Expr truthy,

    /// If `predicate` is false, evaluate to this.
    required Expr falsy,
  }) = Expr_Ternary;

  /// Expand columns of strings or lists.
  const factory Expr.explode(
    Expr field0,
  ) = Expr_Explode;

  /// Filter columns' values.
  const factory Expr.filter({
    /// The column to be filtered.
    required Expr input,

    /// The conditions by which this column should be filtered.
    required Expr by,
  }) = Expr_Filter;

  /// Matches any value.
  const factory Expr.wildcard() = Expr_Wildcard;

  /// Take slices of series.
  const factory Expr.slice({
    /// The column to take slices of.
    required Expr input,

    /// Length is not yet known so we accept negative offsets
    required Expr offset,

    /// How long the slice should be.
    required Expr length,
  }) = Expr_Slice;

  /// Can be used in a select statement to exclude a column from selection
  const factory Expr.exclude(
    Expr field0,
    List<Excluded> field1,
  ) = Expr_Exclude;

  /// Set root name as Alias
  const factory Expr.keepName(
    Expr field0,
  ) = Expr_KeepName;

  /// Special case that does not need columns
  const factory Expr.count() = Expr_Count;

  /// Take the nth column in the `DataFrame`
  const factory Expr.nth(
    int field0,
  ) = Expr_Nth;
}

/// Fields in a struct.
class Field {
  /// The field's name.
  final String name;

  /// The field's data type.
  final DataType dtype;

  const Field({
    required this.name,
    required this.dtype,
  });
}

/// Options for joining.
enum JoinType {
  /// Left outer join.
  Left,

  /// Inner join.
  Inner,

  /// Full outer join.
  Outer,

  /// Cartesian (cross-product) join.
  Cross,

  /// [Semijoin](https://en.wikipedia.org/wiki/Relational_algebra#Semijoin_(%E2%8B%89_and_%E2%8B%8A)).
  Semi,

  /// [Antijoin](https://en.wikipedia.org/wiki/Relational_algebra#Antijoin_(%E2%96%B7)).
  Anti,
}

/// Lazily-evaluated version of a [DataFrame].
///
/// Operations applied onto a [LazyFrame] will only be evaluated once
/// `.collect` is called, which returns the results as a new [DataFrame].
class LazyFrame {
  /// @nodoc
  final RwLockPLazyFrame field0;

  const LazyFrame({
    required this.field0,
  });

  /// Select (and rename) columns from the query.
  LazyFrame select({required List<Expr> exprs, dynamic hint}) =>
      wrapper.selectMethodTakeSelfLazyFrame(
        that: this,
        exprs: exprs,
      );

  /// Filter by the specified predicate expression.
  LazyFrame filter({required Expr pred, dynamic hint}) =>
      wrapper.filterMethodTakeSelfLazyFrame(
        that: this,
        pred: pred,
      );

  /// Define conditions by which to group and aggregate rows.
  LazyGroupBy groupby(
          {required List<Expr> exprs, bool stable = false, dynamic hint}) =>
      wrapper.groupbyMethodTakeSelfLazyFrame(
        that: this,
        exprs: exprs,
        stable: stable,
      );

  /// Reverse the order of this dataframe's columns.
  LazyFrame reverse({dynamic hint}) => wrapper.reverseMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Add a column to this dataframe.
  LazyFrame withColumn({required Expr expr, dynamic hint}) =>
      wrapper.withColumnMethodTakeSelfLazyFrame(
        that: this,
        expr: expr,
      );

  /// Add columns to this dataframe.
  LazyFrame withColumns({required List<Expr> expr, dynamic hint}) =>
      wrapper.withColumnsMethodTakeSelfLazyFrame(
        that: this,
        expr: expr,
      );

  /// Caches the results into a new [LazyFrame].
  ///
  /// This should be used to prevent computations running multiple times.
  LazyFrame cache({dynamic hint}) => wrapper.cacheMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Executes all lazy operations and collects results into a [DataFrame].
  Future<DataFrame> collect({dynamic hint}) =>
      wrapper.collectMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Creates the [Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product) from both frames,
  /// preserving the order of this frame's keys.
  LazyFrame crossJoin({required LazyFrame other, dynamic hint}) =>
      wrapper.crossJoinMethodTakeSelfLazyFrame(
        that: this,
        other: other,
      );

  /// Performs a [left outer join](https://en.wikipedia.org/wiki/Join_(SQL)#Left_outer_join) with [other].
  LazyFrame leftJoin(
          {required LazyFrame other,
          required Expr leftOn,
          required Expr rightOn,
          dynamic hint}) =>
      wrapper.leftJoinMethodTakeSelfLazyFrame(
        that: this,
        other: other,
        leftOn: leftOn,
        rightOn: rightOn,
      );

  /// Performs a [full outer join](https://en.wikipedia.org/wiki/Join_(SQL)#Full_outer_join) with [other].
  LazyFrame outerJoin(
          {required LazyFrame other,
          required Expr leftOn,
          required Expr rightOn,
          dynamic hint}) =>
      wrapper.outerJoinMethodTakeSelfLazyFrame(
        that: this,
        other: other,
        leftOn: leftOn,
        rightOn: rightOn,
      );

  /// Performs an [inner join](https://en.wikipedia.org/wiki/Join_(SQL)#Inner_join_and_NULL_values) with [other].
  LazyFrame innerJoin(
          {required LazyFrame other,
          required Expr leftOn,
          required Expr rightOn,
          dynamic hint}) =>
      wrapper.innerJoinMethodTakeSelfLazyFrame(
        that: this,
        other: other,
        leftOn: leftOn,
        rightOn: rightOn,
      );

  /// Joins this table to [other].
  ///
  /// Use [on] to specify columns on both frames to join on, or specify separately
  /// using [leftOn] and [rightOn].
  ///
  /// [suffix] specifies the suffix to add to duplicate columns of [other].
  ///
  /// Example:
  /// ```dart
  /// final joined = left
  ///   .join(
  ///     other: right,
  ///     leftOn: [col('foo'), col('bar')],
  ///     rightOn: [col('foo'), col('bar')],
  ///     how: JoinType.Inner,
  ///   );
  /// ```
  LazyFrame join(
          {required LazyFrame other,
          List<Expr>? on,
          List<Expr>? leftOn,
          List<Expr>? rightOn,
          String suffix = r"_right",
          JoinType how = JoinType.Left,
          bool allowParallel = true,
          bool forceParallel = false,
          dynamic hint}) =>
      wrapper.joinMethodTakeSelfLazyFrame(
        that: this,
        other: other,
        on: on,
        leftOn: leftOn,
        rightOn: rightOn,
        suffix: suffix,
        how: how,
        allowParallel: allowParallel,
        forceParallel: forceParallel,
      );

  /// Aggregate all columns as their max values.
  LazyFrame max({dynamic hint}) => wrapper.maxMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Aggregate all columns as their min values.
  LazyFrame min({dynamic hint}) => wrapper.minMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Aggregate all columns as their sums.
  LazyFrame sum({dynamic hint}) => wrapper.sumMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Aggregate all columns as their means.
  LazyFrame mean({dynamic hint}) => wrapper.meanMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Aggregate all columns as their medians.
  LazyFrame median({dynamic hint}) => wrapper.medianMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Aggregate all columns as their quantiles.
  LazyFrame quantile(
          {required Expr quantile,
          required QuantileInterpolOptions interpol,
          dynamic hint}) =>
      wrapper.quantileMethodTakeSelfLazyFrame(
        that: this,
        quantile: quantile,
        interpol: interpol,
      );

  /// Aggregate all columns as their standard deviances.
  LazyFrame std({required int ddof, dynamic hint}) =>
      wrapper.stdMethodTakeSelfLazyFrame(
        that: this,
        ddof: ddof,
      );

  /// Aggregate all columns as their variances.
  LazyFrame variance({required int ddof, dynamic hint}) =>
      wrapper.varianceMethodTakeSelfLazyFrame(
        that: this,
        ddof: ddof,
      );

  /// Explode each column.
  LazyFrame explode({required List<Expr> columns, dynamic hint}) =>
      wrapper.explodeMethodTakeSelfLazyFrame(
        that: this,
        columns: columns,
      );

  /// Keep unique rows without maintaining order.
  LazyFrame unique(
          {List<String>? subset,
          required UniqueKeepStrategy keepStrategy,
          dynamic hint}) =>
      wrapper.uniqueMethodTakeSelfLazyFrame(
        that: this,
        subset: subset,
        keepStrategy: keepStrategy,
      );

  /// Drop null rows.
  ///
  /// Same as `frame.filter(col('*').isNotNull)`.
  LazyFrame dropNulls({List<Expr>? subset, dynamic hint}) =>
      wrapper.dropNullsMethodTakeSelfLazyFrame(
        that: this,
        subset: subset,
      );

  /// Slice the frame.
  LazyFrame slice({required int offset, required int len, dynamic hint}) =>
      wrapper.sliceMethodTakeSelfLazyFrame(
        that: this,
        offset: offset,
        len: len,
      );

  /// Get the first row.
  LazyFrame first({dynamic hint}) => wrapper.firstMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Get the last row.
  LazyFrame last({dynamic hint}) => wrapper.lastMethodTakeSelfLazyFrame(
        that: this,
      );

  /// Get the last [n] rows.
  LazyFrame tail({required int n, dynamic hint}) =>
      wrapper.tailMethodTakeSelfLazyFrame(
        that: this,
        n: n,
      );

  /// Melt this dataframe from the wide format to the long format.
  LazyFrame melt(
          {required List<String> idVars,
          required List<String> valueVars,
          String? variableName,
          String? valueName,
          dynamic hint}) =>
      wrapper.meltMethodTakeSelfLazyFrame(
        that: this,
        idVars: idVars,
        valueVars: valueVars,
        variableName: variableName,
        valueName: valueName,
      );

  /// Limit this dataframe to the first [n] rows.
  ///
  /// To avoid scanning the rows, use [fetch].
  LazyFrame limit({required int n, dynamic hint}) =>
      wrapper.limitMethodTakeSelfLazyFrame(
        that: this,
        n: n,
      );

  /// Similar to [collect], but overrides the number of rows read by each operation.
  ///
  /// The final row count is not guaranteed to be equal [nRows].
  Future<DataFrame> fetch({required int nRows, dynamic hint}) =>
      wrapper.fetchMethodTakeSelfLazyFrame(
        that: this,
        nRows: nRows,
      );

  /// Add a new column at index 0 denoting the row number.
  LazyFrame withRowCount({required String name, int? offset, dynamic hint}) =>
      wrapper.withRowCountMethodTakeSelfLazyFrame(
        that: this,
        name: name,
        offset: offset,
      );
}

/// A wrapper for group-by opereations on a [LazyFrame].
class LazyGroupBy {
  /// @nodoc
  final RwLockPLazyGroupBy field0;

  const LazyGroupBy({
    required this.field0,
  });

  /// Group by and aggregate.
  ///
  /// Select a column with [col] and choose an aggregation. If you want to aggregate all columns
  /// use `col("*")`.
  LazyFrame agg({required List<Expr> exprs, dynamic hint}) =>
      wrapper.aggMethodTakeSelfLazyGroupBy(
        that: this,
        exprs: exprs,
      );

  /// Return the first [n] rows of each group.
  LazyFrame head({int? n, dynamic hint}) =>
      wrapper.headMethodTakeSelfLazyGroupBy(
        that: this,
        n: n,
      );

  /// Return the last [n] rows of each group.
  LazyFrame tail({int? n, dynamic hint}) =>
      wrapper.tailMethodTakeSelfLazyGroupBy(
        that: this,
        n: n,
      );
}

@freezed
class LiteralValue with _$LiteralValue {
  /// A binary true or false.
  const factory LiteralValue.boolean(
    bool field0,
  ) = LiteralValue_Boolean;

  /// A UTF8 encoded string type.
  const factory LiteralValue.utf8(
    String field0,
  ) = LiteralValue_Utf8;

  /// A raw binary array
  const factory LiteralValue.binary(
    Uint8List field0,
  ) = LiteralValue_Binary;

  /// An unsigned 8-bit integer number.
  const factory LiteralValue.uInt8(
    int field0,
  ) = LiteralValue_UInt8;

  /// An unsigned 16-bit integer number.
  const factory LiteralValue.uInt16(
    int field0,
  ) = LiteralValue_UInt16;

  /// An unsigned 32-bit integer number.
  const factory LiteralValue.uInt32(
    int field0,
  ) = LiteralValue_UInt32;

  /// An unsigned 64-bit integer number.
  const factory LiteralValue.uInt64(
    int field0,
  ) = LiteralValue_UInt64;

  /// An 8-bit integer number.
  const factory LiteralValue.int8(
    int field0,
  ) = LiteralValue_Int8;

  /// A 16-bit integer number.
  const factory LiteralValue.int16(
    int field0,
  ) = LiteralValue_Int16;

  /// A 32-bit integer number.
  const factory LiteralValue.int32(
    int field0,
  ) = LiteralValue_Int32;

  /// A 64-bit integer number.
  const factory LiteralValue.int64(
    int field0,
  ) = LiteralValue_Int64;

  /// A 32-bit floating point number.
  const factory LiteralValue.float32(
    double field0,
  ) = LiteralValue_Float32;

  /// A 64-bit floating point number.
  const factory LiteralValue.float64(
    double field0,
  ) = LiteralValue_Float64;

  /// A range between integers.
  const factory LiteralValue.range({
    /// The starting value of the range.
    required int low,

    /// The ending value of the range.
    required int high,

    /// The datatype of this range's ends.
    required DataType dataType,
  }) = LiteralValue_Range;

  /// Datetimes.
  const factory LiteralValue.dateTime(
    DateTime field0,
    TimeUnit field1,
  ) = LiteralValue_DateTime;

  /// Durations.
  const factory LiteralValue.duration(
    Duration field0,
    TimeUnit field1,
  ) = LiteralValue_Duration;
}

@freezed
class NullValues with _$NullValues {
  /// A single value that's used for all columns
  const factory NullValues.allColumnsSingle(
    String field0,
  ) = NullValues_AllColumnsSingle;

  /// Multiple values that are used for all columns
  const factory NullValues.allColumns(
    List<String> field0,
  ) = NullValues_AllColumns;
}

/// Operators for binary operations between [Expr]essions.
enum Operator {
  /// ==
  Eq,

  /// !=
  NotEq,

  /// <
  Lt,

  /// <=
  LtEq,

  /// >
  Gt,

  /// >=
  GtEq,

  /// +
  Plus,

  /// -
  Minus,

  /// *
  Multiply,

  /// /
  Divide,

  /// ~/
  TrueDivide,

  /// Divides and floors to the nearest integer.
  FloorDivide,

  /// %
  Modulus,

  /// &&
  And,

  /// ||
  Or,

  /// ^
  Xor,
}

enum QuantileInterpolOptions {
  Nearest,
  Lower,
  Higher,
  Midpoint,
  Linear,
}

/// Options for including a row count column.
class RowCount {
  /// Name of the new column.
  final String name;

  /// The value from which to start counting.
  final int offset;

  const RowCount({
    required this.name,
    required this.offset,
  });
}

/// Schemas to specify datatypes and optimize operations.
class Schema {
  /// @nodoc
  final RwLockPSchema field0;

  const Schema({
    required this.field0,
  });

  /// Create a schema from a list of [Field]s.
  static Schema of({required List<Field> fields, dynamic hint}) =>
      wrapper.ofStaticMethodSchema(fields: fields, hint: hint);
}

/// The columnar data type for a DataFrame.
///
/// ## Arithmetic
///
/// You can do standard arithmetic on series.
/// ```dart
/// final s = Series.ofI32(name: "a", values: Int32List.fromList([1, 2, 3]), bridge: pl);
/// final outAdd = s + s;
/// final outSub = s - s;
/// final outDiv = s / s;
/// final outMul = s * s;
/// ```
///
/// Or with series and numbers.
///
/// ```dart
/// final s = Series.ofI32(name: "a", values: Int32List.fromList([1, 2, 3]), bridge: pl);
/// final outAddOne = s + 1;
/// final outMultiply = s * 10;
///
/// // When on the right-hand side, methods must be used
/// final outDivide = 1.div(s);
/// final outAdd = 1.add(s);
/// final outSubtract = 1.sub(s);
/// final outMultiply = 1.mul(s);
/// ```
///
/// ## Comparison
/// You can obtain boolean mask by comparing series.
///
/// ```dart
/// import 'package:flutter/foundation.dart' show listEquals;
///
/// final s = Series.ofI32(name: "dollars", values: Int32List.fromList([1, 2, 3]), bridge: pl);
/// final mask = s.equal(1);
/// assert(listEquals(await mask.asBools(), [true, false, false]));
/// ```
///
/// ## Iterators
/// The Series variants contain differently typed `ChunkedArray`s.
/// These structs can be turned into iterators, making it possible to use any function/ closure you want
/// on a Series.
///
/// These iterators return `T?` because the values of a series may be null.
///
/// ```dart
/// const pi = 3.14;
/// final s = Series.ofF64(name: "angle", values: Float64List.fromList([2 * pi, pi, 1.5 * pi]));
/// final sCos = (await s.asDoubles())
///    .iter()
///    .map((angle) => angle != null ? cos(angle) : null)
///    .toList();
/// ```
///
/// ## Creation
/// Series can be create from different data structures. Below we'll show a few ways we can create
/// a Series object.
///
/// ```
/// // Series can be created from Lists, slices and arrays
/// Series.ofBools(name: "boolean series", values: [true, false, false], bridge: pl);
/// Series.ofI32(name: "int series", values: [1, 2, 3], bridge: pl);
/// // And can be nullable
/// Series.ofI32(name: "got nulls", values: [1, null, 2], bridge: pl);
///
/// ```
class Series {
  /// @nodoc
  final RwLockPSeries field0;

  const Series({
    required this.field0,
  });

  /// Create a new series of strings.
  static Series ofStrings(
          {required String name, List<String?>? values, dynamic hint}) =>
      wrapper.ofStringsStaticMethodSeries(
          name: name, values: values, hint: hint);

  /// Create a new series of 32-bit wide integers.
  static Series ofI32(
          {required String name, List<int?>? values, dynamic hint}) =>
      wrapper.ofI32StaticMethodSeries(name: name, values: values, hint: hint);

  /// Create a new series of 64-bit wide integers.
  static Series ofInts(
          {required String name, List<int?>? values, dynamic hint}) =>
      wrapper.ofIntsStaticMethodSeries(name: name, values: values, hint: hint);

  /// Create a new series of [Duration]s.
  static Series ofDurations(
          {required String name,
          List<Duration?>? values,
          TimeUnit unit = TimeUnit.Milliseconds,
          dynamic hint}) =>
      wrapper.ofDurationsStaticMethodSeries(
          name: name, values: values, unit: unit, hint: hint);

  /// Create a new series of doubles.
  static Series ofDoubles(
          {required String name, List<double?>? values, dynamic hint}) =>
      wrapper.ofDoublesStaticMethodSeries(
          name: name, values: values, hint: hint);

  /// Adds the contents of [other] onto this series.
  ///
  /// Throws if [other] is self.
  Future<void> append({required Series other, dynamic hint}) =>
      wrapper.appendMethodSeries(
        that: this,
        other: other,
      );

  /// Casts this series into one with the specified datatype.
  Future<Series> cast(
          {required DataType dtype, bool strict = true, dynamic hint}) =>
      wrapper.castMethodSeries(
        that: this,
        dtype: dtype,
        strict: strict,
      );

  /// If this series is a UTF-8 series, returns its Dart representation.
  Future<List<String?>> asStrings({dynamic hint}) =>
      wrapper.asStringsMethodSeries(
        that: this,
      );

  /// If compatible, returns a representation of this series as integers.
  Future<List<int?>> asInts({bool strict = true, dynamic hint}) =>
      wrapper.asIntsMethodSeries(
        that: this,
        strict: strict,
      );

  /// If compatible, returns a representation of this series as integers.
  Future<List<double?>> asDoubles({bool strict = true, dynamic hint}) =>
      wrapper.asDoublesMethodSeries(
        that: this,
        strict: strict,
      );

  /// If this series contains [Duration]s, returns its Dart representation.
  Future<List<Duration?>> asDurations({dynamic hint}) =>
      wrapper.asDurationsMethodSeries(
        that: this,
      );

  /// If this series contains [DateTime]s, returns its Dart representation.
  ///
  /// Datetimes are parsed as-is, without any timezone correction.
  Future<List<DateTime?>> asNaiveDatetime({dynamic hint}) =>
      wrapper.asNaiveDatetimeMethodSeries(
        that: this,
      );

  /// If this series contains [DateTime]s, returns its Dart representation.
  ///
  /// If a timezone is defined by this series, the datetimes will be converted to UTC.
  /// Otherwise, the datetimes are assumed to be in UTC.
  Future<List<DateTime?>> asUtcDatetime({dynamic hint}) =>
      wrapper.asUtcDatetimeMethodSeries(
        that: this,
      );

  /// If this series contains [DateTime]s, returns its Dart representation.
  ///
  /// If a timezone is defined by this series, the datetimes will be converted to the local timezone.
  /// Otherwise, the datetimes are assumed to be in the local timezone.
  Future<List<DateTime?>> asLocalDatetime({dynamic hint}) =>
      wrapper.asLocalDatetimeMethodSeries(
        that: this,
      );

  /// Returns a new series with each value's absolute value.
  Future<Series> abs({dynamic hint}) => wrapper.absMethodSeries(
        that: this,
      );

  /// Returns a new sorted series.
  Future<Series> sort({bool reverse = false, dynamic hint}) =>
      wrapper.sortMethodSeries(
        that: this,
        reverse: reverse,
      );

  /// Returns a new shuffled series.
  Future<Series> shuffle({int? seed, dynamic hint}) =>
      wrapper.shuffleMethodSeries(
        that: this,
        seed: seed,
      );

  /// Sums all non-null rows in this series to produce a result.
  ///
  /// Returns null if the series only contains null values.
  Future<double?> sum({dynamic hint}) => wrapper.sumMethodSeries(
        that: this,
      );

  /// Returns the sum of this series' values as a single-element series.
  Future<Series> sumAsSeries({dynamic hint}) => wrapper.sumAsSeriesMethodSeries(
        that: this,
      );

  /// Returns the minimum value of this series' values.
  ///
  /// Returns null if one of the values are also null.
  Future<double?> min({dynamic hint}) => wrapper.minMethodSeries(
        that: this,
      );

  /// Returns the maximum value of this series' values.
  ///
  /// Returns null if one of the values are also null.
  Future<double?> max({dynamic hint}) => wrapper.maxMethodSeries(
        that: this,
      );

  /// Expands a series of lists into rows of values, or strings into rows of characters.
  Future<Series> explode({dynamic hint}) => wrapper.explodeMethodSeries(
        that: this,
      );

  /// TODO: docs
  Future<Series> explodeByOffsets({required Int64List offsets, dynamic hint}) =>
      wrapper.explodeByOffsetsMethodSeries(
        that: this,
        offsets: offsets,
      );

  /// Calculates the cumulative max at each element.
  Future<Series> cummax({bool reverse = false, dynamic hint}) =>
      wrapper.cummaxMethodSeries(
        that: this,
        reverse: reverse,
      );

  /// Calculates the cumulative min at each element.
  Future<Series> cummin({bool reverse = false, dynamic hint}) =>
      wrapper.cumminMethodSeries(
        that: this,
        reverse: reverse,
      );

  /// Calculates the cumulative product at each element.
  Future<Series> cumprod({bool reverse = false, dynamic hint}) =>
      wrapper.cumprodMethodSeries(
        that: this,
        reverse: reverse,
      );

  /// Calculates the cumulative sum at each element.
  Future<Series> cumsum({bool reverse = false, dynamic hint}) =>
      wrapper.cumsumMethodSeries(
        that: this,
        reverse: reverse,
      );

  /// Calculates the product of each element in the series and returns it in a single-element series.
  Future<Series> product({dynamic hint}) => wrapper.productMethodSeries(
        that: this,
      );

  /// Get the value at [index] as a string.
  String? getString({required int index, dynamic hint}) =>
      wrapper.getStringMethodSeries(
        that: this,
        index: index,
      );

  /// Get the value at [index] as a double.
  double? get({required int index, dynamic hint}) => wrapper.getMethodSeries(
        that: this,
        index: index,
      );

  /// Get the first few values of this series.
  Series head({int? length, dynamic hint}) => wrapper.headMethodSeries(
        that: this,
        length: length,
      );

  /// Get the last few values of this series.
  Series tail({int? length, dynamic hint}) => wrapper.tailMethodSeries(
        that: this,
        length: length,
      );

  /// Calculates the mean (average) of this series.
  Future<double?> mean({dynamic hint}) => wrapper.meanMethodSeries(
        that: this,
      );

  /// Calculates the [median](https://en.wikipedia.org/wiki/Median) of this series.
  Future<double?> median({dynamic hint}) => wrapper.medianMethodSeries(
        that: this,
      );

  /// Calculates and wraps this series' mean as a single-element series.
  Future<Series> meanAsSeries({dynamic hint}) =>
      wrapper.meanAsSeriesMethodSeries(
        that: this,
      );

  /// Calculates and wraps this series' median as a single-element series.
  Future<Series> medianAsSeries({dynamic hint}) =>
      wrapper.medianAsSeriesMethodSeries(
        that: this,
      );

  /// Returns the amount of bytes occupied by this series.
  int estimatedSize({dynamic hint}) => wrapper.estimatedSizeMethodSeries(
        that: this,
      );

  /// Returns a new series with elements from this series added to [other]'s element-wise.
  Series addTo({required Series other, dynamic hint}) =>
      wrapper.addToMethodSeries(
        that: this,
        other: other,
      );

  /// Returns a new series with elements from this series subtracted from [other]'s element-wise.
  Series subtract({required Series other, dynamic hint}) =>
      wrapper.subtractMethodSeries(
        that: this,
        other: other,
      );

  /// Returns a new series with elements from this series multiplied with [other]'s element-wise.
  Series multiply({required Series other, dynamic hint}) =>
      wrapper.multiplyMethodSeries(
        that: this,
        other: other,
      );

  /// Returns a new series with elements from this series divided by [other]'s element-wise.
  Series divide({required Series other, dynamic hint}) =>
      wrapper.divideMethodSeries(
        that: this,
        other: other,
      );

  /// Returns a new series with the [remainder](https://en.wikipedia.org/wiki/Remainder)
  /// between this series' and [other]'s elements.
  Series remainder({required Series other, dynamic hint}) =>
      wrapper.remainderMethodSeries(
        that: this,
        other: other,
      );

  /// Returns whether this is a series of booleans.
  bool isBool({dynamic hint}) => wrapper.isBoolMethodSeries(
        that: this,
      );

  /// Returns whether this is a series of UTF-8 strings.
  bool isUtf8({dynamic hint}) => wrapper.isUtf8MethodSeries(
        that: this,
      );

  /// Returns whether this is a series of numeric values.
  bool isNumeric({dynamic hint}) => wrapper.isNumericMethodSeries(
        that: this,
      );

  /// Returns whether this is a series of [DateTime] or [Duration]s.
  bool isTemporal({dynamic hint}) => wrapper.isTemporalMethodSeries(
        that: this,
      );

  /// Dump the contents of this entire series.
  Future<String> dump({dynamic hint}) => wrapper.dumpMethodSeries(
        that: this,
      );

  /// Rename this series to [name] in-place.
  void rename({required String name, dynamic hint}) =>
      wrapper.renameMethodSeries(
        that: this,
        name: name,
      );

  /// Returns the unique values of this series.
  ///
  /// If `stable` is true, extra work is done to maintain the original order of elements.
  Future<Series> unique({bool stable = false, dynamic hint}) =>
      wrapper.uniqueMethodSeries(
        that: this,
        stable: stable,
      );

  /// Returns whether this series is identical to [other].
  ///
  /// if `ignoreNull` is true, null values are considered to be equal.
  Future<bool> equal(
          {required Series other, bool ignoreNull = false, dynamic hint}) =>
      wrapper.equalMethodSeries(
        that: this,
        other: other,
        ignoreNull: ignoreNull,
      );

  /// Applies a binary operation onto this series with a scalar value.
  ///
  /// For logic operators, the new series is a boolean mask. Otherwise,
  /// it will be a series of numeric values.
  Future<Series> applyScalar(
          {required Operator op, required double value, dynamic hint}) =>
      wrapper.applyScalarMethodSeries(
        that: this,
        op: op,
        value: value,
      );

  /// Creates a new series with the specified dimensions.
  Future<Series> reshape({required Int64List dims, dynamic hint}) =>
      wrapper.reshapeMethodSeries(
        that: this,
        dims: dims,
      );

  /// Calculates the standard deviation of this series with the specified degree of freedom.
  Future<Series> stdAsSeries({required int ddof, dynamic hint}) =>
      wrapper.stdAsSeriesMethodSeries(
        that: this,
        ddof: ddof,
      );

  /// Calculates the variance of this series with the specified degree of freedom.
  Future<Series> varAsSeries({required int ddof, dynamic hint}) =>
      wrapper.varAsSeriesMethodSeries(
        that: this,
        ddof: ddof,
      );

  /// Returns an untyped list.
  Future<List<dynamic>> toList({dynamic hint}) => wrapper.toListMethodSeries(
        that: this,
      );

  /// Casts this series into a [DataFrame]. May create a copy.
  DataFrame intoFrame({dynamic hint}) => wrapper.intoFrameMethodTakeSelfSeries(
        that: this,
      );

  /// Iterate over this series' values.
  Stream<dynamic> iter({dynamic hint}) => wrapper.iterMethodSeries(
        that: this,
      );
}

/// Describes the shape of a [DataFrame].
class Shape {
  /// The number of rows.
  final int height;

  /// The number of columns.
  final int width;

  const Shape({
    required this.height,
    required this.width,
  });
}

/// Options for sorting
class SortOptions {
  /// Whether it should be sorted from smallest or largest.
  final bool descending;

  /// Whether nulls get pushed to the top or bottom.
  final bool nullsLast;

  const SortOptions({
    required this.descending,
    required this.nullsLast,
  });
}

/// Possible units of time for dataframe values.
enum TimeUnit {
  /// One-billionth of a second.
  Nanoseconds,

  /// One-millionth of a second.
  Microseconds,

  /// One-thousandth of a second.
  Milliseconds,
}

/// Options for keeping unique values.
enum UniqueKeepStrategy {
  /// TODO: Doc
  First,

  /// TODO: Doc
  Last,
}

class PolarsWrapperImpl implements PolarsWrapper {
  final PolarsWrapperPlatform _platform;
  factory PolarsWrapperImpl(ExternalLibrary dylib) =>
      PolarsWrapperImpl.raw(PolarsWrapperPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory PolarsWrapperImpl.wasm(FutureOr<WasmModule> module) =>
      PolarsWrapperImpl(module as ExternalLibrary);
  PolarsWrapperImpl.raw(this._platform);
  Future<DataFrame> readCsv(
      {required String path,
      Schema? dtypes,
      List<DataType>? dtypesSlice,
      bool? hasHeader,
      List<String>? columns,
      String? delimiter,
      String? commentChar,
      String? eolChar,
      int? chunkSize,
      int? sampleSize,
      RowCount? rowCount,
      CsvEncoding? encoding,
      int? nRows,
      int? nThreads,
      NullValues? nullValues,
      Uint32List? projection,
      String? quoteChar = '"',
      int skipRows = 0,
      int skipRowsAfterHeader = 0,
      bool ignoreParserErrors = false,
      bool rechunk = false,
      bool parseDates = true,
      bool lowMemory = false,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_opt_schema(dtypes);
    var arg2 = _platform.api2wire_opt_list_data_type(dtypesSlice);
    var arg3 = _platform.api2wire_opt_bool(hasHeader);
    var arg4 = _platform.api2wire_opt_StringList(columns);
    var arg5 = _platform.api2wire_opt_char(delimiter);
    var arg6 = _platform.api2wire_opt_char(commentChar);
    var arg7 = _platform.api2wire_opt_char(eolChar);
    var arg8 = _platform.api2wire_opt_usize(chunkSize);
    var arg9 = _platform.api2wire_opt_usize(sampleSize);
    var arg10 = _platform.api2wire_opt_row_count(rowCount);
    var arg11 = _platform.api2wire_opt_csv_encoding(encoding);
    var arg12 = _platform.api2wire_opt_usize(nRows);
    var arg13 = _platform.api2wire_opt_usize(nThreads);
    var arg14 = _platform.api2wire_opt_null_values(nullValues);
    var arg15 = _platform.api2wire_opt_uint_32_list(projection);
    var arg16 = _platform.api2wire_opt_char(quoteChar);
    var arg17 = api2wire_usize(skipRows);
    var arg18 = api2wire_usize(skipRowsAfterHeader);
    var arg19 = ignoreParserErrors;
    var arg20 = rechunk;
    var arg21 = parseDates;
    var arg22 = lowMemory;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_read_csv(
          port_,
          arg0,
          arg1,
          arg2,
          arg3,
          arg4,
          arg5,
          arg6,
          arg7,
          arg8,
          arg9,
          arg10,
          arg11,
          arg12,
          arg13,
          arg14,
          arg15,
          arg16,
          arg17,
          arg18,
          arg19,
          arg20,
          arg21,
          arg22),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kReadCsvConstMeta,
      argValues: [
        path,
        dtypes,
        dtypesSlice,
        hasHeader,
        columns,
        delimiter,
        commentChar,
        eolChar,
        chunkSize,
        sampleSize,
        rowCount,
        encoding,
        nRows,
        nThreads,
        nullValues,
        projection,
        quoteChar,
        skipRows,
        skipRowsAfterHeader,
        ignoreParserErrors,
        rechunk,
        parseDates,
        lowMemory
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReadCsvConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "read_csv",
        argNames: [
          "path",
          "dtypes",
          "dtypesSlice",
          "hasHeader",
          "columns",
          "delimiter",
          "commentChar",
          "eolChar",
          "chunkSize",
          "sampleSize",
          "rowCount",
          "encoding",
          "nRows",
          "nThreads",
          "nullValues",
          "projection",
          "quoteChar",
          "skipRows",
          "skipRowsAfterHeader",
          "ignoreParserErrors",
          "rechunk",
          "parseDates",
          "lowMemory"
        ],
      );

  Future<LazyFrame> scanCsv(
      {required String path,
      Schema? dtypeOverwrite,
      bool? hasHeader,
      String? delimiter,
      String? commentChar,
      String? eolChar,
      String? quoteChar = '"',
      int skipRows = 0,
      int skipRowsAfterHeader = 0,
      RowCount? rowCount,
      CsvEncoding? encoding,
      int? nRows,
      NullValues? nullValues,
      bool ignoreParserErrors = false,
      bool rechunk = false,
      bool parseDates = true,
      int? inferSchemaLength = 100,
      bool cache = false,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_opt_schema(dtypeOverwrite);
    var arg2 = _platform.api2wire_opt_bool(hasHeader);
    var arg3 = _platform.api2wire_opt_char(delimiter);
    var arg4 = _platform.api2wire_opt_char(commentChar);
    var arg5 = _platform.api2wire_opt_char(eolChar);
    var arg6 = _platform.api2wire_opt_char(quoteChar);
    var arg7 = api2wire_usize(skipRows);
    var arg8 = api2wire_usize(skipRowsAfterHeader);
    var arg9 = _platform.api2wire_opt_row_count(rowCount);
    var arg10 = _platform.api2wire_opt_csv_encoding(encoding);
    var arg11 = _platform.api2wire_opt_usize(nRows);
    var arg12 = _platform.api2wire_opt_null_values(nullValues);
    var arg13 = ignoreParserErrors;
    var arg14 = rechunk;
    var arg15 = parseDates;
    var arg16 = _platform.api2wire_opt_usize(inferSchemaLength);
    var arg17 = cache;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_scan_csv(
          port_,
          arg0,
          arg1,
          arg2,
          arg3,
          arg4,
          arg5,
          arg6,
          arg7,
          arg8,
          arg9,
          arg10,
          arg11,
          arg12,
          arg13,
          arg14,
          arg15,
          arg16,
          arg17),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kScanCsvConstMeta,
      argValues: [
        path,
        dtypeOverwrite,
        hasHeader,
        delimiter,
        commentChar,
        eolChar,
        quoteChar,
        skipRows,
        skipRowsAfterHeader,
        rowCount,
        encoding,
        nRows,
        nullValues,
        ignoreParserErrors,
        rechunk,
        parseDates,
        inferSchemaLength,
        cache
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kScanCsvConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "scan_csv",
        argNames: [
          "path",
          "dtypeOverwrite",
          "hasHeader",
          "delimiter",
          "commentChar",
          "eolChar",
          "quoteChar",
          "skipRows",
          "skipRowsAfterHeader",
          "rowCount",
          "encoding",
          "nRows",
          "nullValues",
          "ignoreParserErrors",
          "rechunk",
          "parseDates",
          "inferSchemaLength",
          "cache"
        ],
      );

  Future<DataFrame> readJson(
      {required String path,
      Schema? schema,
      int? batchSize,
      List<String>? projection,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = _platform.api2wire_opt_schema(schema);
    var arg2 = _platform.api2wire_opt_usize(batchSize);
    var arg3 = _platform.api2wire_opt_StringList(projection);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_read_json(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kReadJsonConstMeta,
      argValues: [path, schema, batchSize, projection],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReadJsonConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "read_json",
        argNames: ["path", "schema", "batchSize", "projection"],
      );

  DataFrame ofStaticMethodDataFrame({List<Series>? series, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_list_series(series);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_of__static_method__DataFrame(arg0),
      parseSuccessData: _wire2api_data_frame,
      constMeta: kOfStaticMethodDataFrameConstMeta,
      argValues: [series],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOfStaticMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "of__static_method__DataFrame",
        argNames: ["series"],
      );

  Stream<List<dynamic>> iterMethodDataFrame(
      {required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_iter__method__DataFrame(port_, arg0),
      parseSuccessData: (d) => _wire2api_list_dartabi(d),
      constMeta: kIterMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIterMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "iter__method__DataFrame",
        argNames: ["that"],
      );

  Series columnMethodDataFrame(
      {required DataFrame that, required String column, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = _platform.api2wire_String(column);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_column__method__DataFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kColumnMethodDataFrameConstMeta,
      argValues: [that, column],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kColumnMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "column__method__DataFrame",
        argNames: ["that", "column"],
      );

  List<Series> columnsMethodDataFrame(
      {required DataFrame that, required List<String> columns, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = _platform.api2wire_StringList(columns);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_columns__method__DataFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_list_series(d),
      constMeta: kColumnsMethodDataFrameConstMeta,
      argValues: [that, columns],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kColumnsMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "columns__method__DataFrame",
        argNames: ["that", "columns"],
      );

  Series columnAtMethodDataFrame(
      {required DataFrame that, required int index, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = api2wire_usize(index);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_column_at__method__DataFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kColumnAtMethodDataFrameConstMeta,
      argValues: [that, index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kColumnAtMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "column_at__method__DataFrame",
        argNames: ["that", "index"],
      );

  Future<String> dumpMethodDataFrame({required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dump__method__DataFrame(port_, arg0),
      parseSuccessData: (d) => _wire2api_String(d),
      constMeta: kDumpMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDumpMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dump__method__DataFrame",
        argNames: ["that"],
      );

  int estimatedSizeMethodDataFrame({required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_estimated_size__method__DataFrame(arg0),
      parseSuccessData: (d) => _wire2api_usize(d),
      constMeta: kEstimatedSizeMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEstimatedSizeMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "estimated_size__method__DataFrame",
        argNames: ["that"],
      );

  Future<DataFrame> withRowCountMethodDataFrame(
      {required DataFrame that,
      required String name,
      int? offset,
      dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_opt_u32(offset);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_with_row_count__method__DataFrame(port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kWithRowCountMethodDataFrameConstMeta,
      argValues: [that, name, offset],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWithRowCountMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "with_row_count__method__DataFrame",
        argNames: ["that", "name", "offset"],
      );

  List<String> getColumnNamesMethodDataFrame(
      {required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_column_names__method__DataFrame(arg0),
      parseSuccessData: (d) => _wire2api_StringList(d),
      constMeta: kGetColumnNamesMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetColumnNamesMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_column_names__method__DataFrame",
        argNames: ["that"],
      );

  Future<List<Series>> getColumnsMethodDataFrame(
      {required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_columns__method__DataFrame(port_, arg0),
      parseSuccessData: (d) => _wire2api_list_series(d),
      constMeta: kGetColumnsMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetColumnsMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_columns__method__DataFrame",
        argNames: ["that"],
      );

  int widthMethodDataFrame({required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_width__method__DataFrame(arg0),
      parseSuccessData: (d) => _wire2api_usize(d),
      constMeta: kWidthMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWidthMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "width__method__DataFrame",
        argNames: ["that"],
      );

  int heightMethodDataFrame({required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_height__method__DataFrame(arg0),
      parseSuccessData: (d) => _wire2api_usize(d),
      constMeta: kHeightMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHeightMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "height__method__DataFrame",
        argNames: ["that"],
      );

  bool isEmptyMethodDataFrame({required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_empty__method__DataFrame(arg0),
      parseSuccessData: (d) => _wire2api_bool(d),
      constMeta: kIsEmptyMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsEmptyMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_empty__method__DataFrame",
        argNames: ["that"],
      );

  Future<DataFrame> sampleMethodDataFrame(
      {required DataFrame that,
      required int n,
      bool withReplacement = false,
      bool shuffle = false,
      int? seed,
      dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = api2wire_usize(n);
    var arg2 = withReplacement;
    var arg3 = shuffle;
    var arg4 = _platform.api2wire_opt_u64(seed);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sample__method__DataFrame(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kSampleMethodDataFrameConstMeta,
      argValues: [that, n, withReplacement, shuffle, seed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSampleMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sample__method__DataFrame",
        argNames: ["that", "n", "withReplacement", "shuffle", "seed"],
      );

  DataFrame selectMethodDataFrame(
      {required DataFrame that, required List<String> columns, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = _platform.api2wire_StringList(columns);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_select__method__DataFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kSelectMethodDataFrameConstMeta,
      argValues: [that, columns],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSelectMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "select__method__DataFrame",
        argNames: ["that", "columns"],
      );

  DataFrame headMethodDataFrame(
      {required DataFrame that, int? length, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = _platform.api2wire_opt_usize(length);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_head__method__DataFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kHeadMethodDataFrameConstMeta,
      argValues: [that, length],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHeadMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "head__method__DataFrame",
        argNames: ["that", "length"],
      );

  DataFrame tailMethodDataFrame(
      {required DataFrame that, int? length, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = _platform.api2wire_opt_usize(length);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_tail__method__DataFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kTailMethodDataFrameConstMeta,
      argValues: [that, length],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTailMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tail__method__DataFrame",
        argNames: ["that", "length"],
      );

  Future<DataFrame> describeMethodDataFrame(
      {required DataFrame that, Float64List? percentiles, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = _platform.api2wire_opt_float_64_list(percentiles);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_describe__method__DataFrame(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kDescribeMethodDataFrameConstMeta,
      argValues: [that, percentiles],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDescribeMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "describe__method__DataFrame",
        argNames: ["that", "percentiles"],
      );

  DataFrame dropMethodDataFrame(
      {required DataFrame that, required String column, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = _platform.api2wire_String(column);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_drop__method__DataFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kDropMethodDataFrameConstMeta,
      argValues: [that, column],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDropMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "drop__method__DataFrame",
        argNames: ["that", "column"],
      );

  Series dropInPlaceMethodDataFrame(
      {required DataFrame that, required String column, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = _platform.api2wire_String(column);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_drop_in_place__method__DataFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kDropInPlaceMethodDataFrameConstMeta,
      argValues: [that, column],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDropInPlaceMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "drop_in_place__method__DataFrame",
        argNames: ["that", "column"],
      );

  DataFrame reverseMethodDataFrame({required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_reverse__method__DataFrame(arg0),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kReverseMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReverseMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reverse__method__DataFrame",
        argNames: ["that"],
      );

  Shape shapeMethodDataFrame({required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_shape__method__DataFrame(arg0),
      parseSuccessData: (d) => _wire2api_shape(d),
      constMeta: kShapeMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kShapeMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "shape__method__DataFrame",
        argNames: ["that"],
      );

  Future<DataFrame> maxMethodDataFrame(
      {required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_max__method__DataFrame(port_, arg0),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kMaxMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMaxMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "max__method__DataFrame",
        argNames: ["that"],
      );

  Future<List<dynamic>> getRowMethodDataFrame(
      {required DataFrame that, required int index, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = api2wire_usize(index);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_row__method__DataFrame(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_list_dartabi(d),
      constMeta: kGetRowMethodDataFrameConstMeta,
      argValues: [that, index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetRowMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_row__method__DataFrame",
        argNames: ["that", "index"],
      );

  Schema schemaMethodDataFrame({required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_schema__method__DataFrame(arg0),
      parseSuccessData: (d) => _wire2api_schema(d),
      constMeta: kSchemaMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSchemaMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "schema__method__DataFrame",
        argNames: ["that"],
      );

  List<DataType> dtypesMethodDataFrame(
      {required DataFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_dtypes__method__DataFrame(arg0),
      parseSuccessData: (d) => _wire2api_list_data_type(d),
      constMeta: kDtypesMethodDataFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDtypesMethodDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dtypes__method__DataFrame",
        argNames: ["that"],
      );

  LazyFrame lazyMethodTakeSelfDataFrame(
      {required DataFrame that,
      bool allowCopy = false,
      bool? projectionPushdown,
      bool? predicatePushdown,
      bool? typeCoercion,
      bool? simplifyExpressions,
      bool? slicePushdown,
      bool? streaming,
      dynamic hint}) {
    var arg0 = _platform.api2wire_data_frame(that);
    var arg1 = allowCopy;
    var arg2 = _platform.api2wire_opt_bool(projectionPushdown);
    var arg3 = _platform.api2wire_opt_bool(predicatePushdown);
    var arg4 = _platform.api2wire_opt_bool(typeCoercion);
    var arg5 = _platform.api2wire_opt_bool(simplifyExpressions);
    var arg6 = _platform.api2wire_opt_bool(slicePushdown);
    var arg7 = _platform.api2wire_opt_bool(streaming);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_lazy__method__take_self__DataFrame(
          arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kLazyMethodTakeSelfDataFrameConstMeta,
      argValues: [
        that,
        allowCopy,
        projectionPushdown,
        predicatePushdown,
        typeCoercion,
        simplifyExpressions,
        slicePushdown,
        streaming
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLazyMethodTakeSelfDataFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "lazy__method__take_self__DataFrame",
        argNames: [
          "that",
          "allowCopy",
          "projectionPushdown",
          "predicatePushdown",
          "typeCoercion",
          "simplifyExpressions",
          "slicePushdown",
          "streaming"
        ],
      );

  LazyFrame selectMethodTakeSelfLazyFrame(
      {required LazyFrame that, required List<Expr> exprs, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_list_expr(exprs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_select__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kSelectMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, exprs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSelectMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "select__method__take_self__LazyFrame",
        argNames: ["that", "exprs"],
      );

  LazyFrame filterMethodTakeSelfLazyFrame(
      {required LazyFrame that, required Expr pred, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_expr(pred);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_filter__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kFilterMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, pred],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFilterMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "filter__method__take_self__LazyFrame",
        argNames: ["that", "pred"],
      );

  LazyGroupBy groupbyMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required List<Expr> exprs,
      bool stable = false,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_list_expr(exprs);
    var arg2 = stable;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_groupby__method__take_self__LazyFrame(arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_lazy_group_by(d),
      constMeta: kGroupbyMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, exprs, stable],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGroupbyMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "groupby__method__take_self__LazyFrame",
        argNames: ["that", "exprs", "stable"],
      );

  LazyFrame reverseMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_reverse__method__take_self__LazyFrame(arg0),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kReverseMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReverseMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reverse__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  LazyFrame withColumnMethodTakeSelfLazyFrame(
      {required LazyFrame that, required Expr expr, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_expr(expr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_with_column__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kWithColumnMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, expr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWithColumnMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "with_column__method__take_self__LazyFrame",
            argNames: ["that", "expr"],
          );

  LazyFrame withColumnsMethodTakeSelfLazyFrame(
      {required LazyFrame that, required List<Expr> expr, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_list_expr(expr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_with_columns__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kWithColumnsMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, expr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWithColumnsMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "with_columns__method__take_self__LazyFrame",
            argNames: ["that", "expr"],
          );

  LazyFrame cacheMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_cache__method__take_self__LazyFrame(arg0),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kCacheMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCacheMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cache__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  Future<DataFrame> collectMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_collect__method__take_self__LazyFrame(port_, arg0),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kCollectMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCollectMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "collect__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  LazyFrame crossJoinMethodTakeSelfLazyFrame(
      {required LazyFrame that, required LazyFrame other, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_lazy_frame(other);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_cross_join__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kCrossJoinMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, other],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kCrossJoinMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "cross_join__method__take_self__LazyFrame",
            argNames: ["that", "other"],
          );

  LazyFrame leftJoinMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_lazy_frame(other);
    var arg2 = _platform.api2wire_expr(leftOn);
    var arg3 = _platform.api2wire_expr(rightOn);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_left_join__method__take_self__LazyFrame(arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kLeftJoinMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, other, leftOn, rightOn],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kLeftJoinMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "left_join__method__take_self__LazyFrame",
            argNames: ["that", "other", "leftOn", "rightOn"],
          );

  LazyFrame outerJoinMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_lazy_frame(other);
    var arg2 = _platform.api2wire_expr(leftOn);
    var arg3 = _platform.api2wire_expr(rightOn);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_outer_join__method__take_self__LazyFrame(
              arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kOuterJoinMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, other, leftOn, rightOn],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kOuterJoinMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "outer_join__method__take_self__LazyFrame",
            argNames: ["that", "other", "leftOn", "rightOn"],
          );

  LazyFrame innerJoinMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required LazyFrame other,
      required Expr leftOn,
      required Expr rightOn,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_lazy_frame(other);
    var arg2 = _platform.api2wire_expr(leftOn);
    var arg3 = _platform.api2wire_expr(rightOn);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_inner_join__method__take_self__LazyFrame(
              arg0, arg1, arg2, arg3),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kInnerJoinMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, other, leftOn, rightOn],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kInnerJoinMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "inner_join__method__take_self__LazyFrame",
            argNames: ["that", "other", "leftOn", "rightOn"],
          );

  LazyFrame joinMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required LazyFrame other,
      List<Expr>? on,
      List<Expr>? leftOn,
      List<Expr>? rightOn,
      String suffix = r"_right",
      JoinType how = JoinType.Left,
      bool allowParallel = true,
      bool forceParallel = false,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_lazy_frame(other);
    var arg2 = _platform.api2wire_opt_list_expr(on);
    var arg3 = _platform.api2wire_opt_list_expr(leftOn);
    var arg4 = _platform.api2wire_opt_list_expr(rightOn);
    var arg5 = _platform.api2wire_String(suffix);
    var arg6 = api2wire_join_type(how);
    var arg7 = allowParallel;
    var arg8 = forceParallel;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_join__method__take_self__LazyFrame(
          arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kJoinMethodTakeSelfLazyFrameConstMeta,
      argValues: [
        that,
        other,
        on,
        leftOn,
        rightOn,
        suffix,
        how,
        allowParallel,
        forceParallel
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJoinMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "join__method__take_self__LazyFrame",
        argNames: [
          "that",
          "other",
          "on",
          "leftOn",
          "rightOn",
          "suffix",
          "how",
          "allowParallel",
          "forceParallel"
        ],
      );

  LazyFrame maxMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_max__method__take_self__LazyFrame(arg0),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kMaxMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMaxMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "max__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  LazyFrame minMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_min__method__take_self__LazyFrame(arg0),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kMinMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMinMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "min__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  LazyFrame sumMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_sum__method__take_self__LazyFrame(arg0),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kSumMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSumMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sum__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  LazyFrame meanMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_mean__method__take_self__LazyFrame(arg0),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kMeanMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMeanMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mean__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  LazyFrame medianMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_median__method__take_self__LazyFrame(arg0),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kMedianMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMedianMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "median__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  LazyFrame quantileMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required Expr quantile,
      required QuantileInterpolOptions interpol,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_expr(quantile);
    var arg2 = api2wire_quantile_interpol_options(interpol);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_quantile__method__take_self__LazyFrame(arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kQuantileMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, quantile, interpol],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kQuantileMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "quantile__method__take_self__LazyFrame",
            argNames: ["that", "quantile", "interpol"],
          );

  LazyFrame stdMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int ddof, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = api2wire_u8(ddof);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_std__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kStdMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, ddof],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStdMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "std__method__take_self__LazyFrame",
        argNames: ["that", "ddof"],
      );

  LazyFrame varianceMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int ddof, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = api2wire_u8(ddof);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_variance__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kVarianceMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, ddof],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kVarianceMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "variance__method__take_self__LazyFrame",
            argNames: ["that", "ddof"],
          );

  LazyFrame explodeMethodTakeSelfLazyFrame(
      {required LazyFrame that, required List<Expr> columns, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_list_expr(columns);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_explode__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kExplodeMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, columns],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExplodeMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "explode__method__take_self__LazyFrame",
        argNames: ["that", "columns"],
      );

  LazyFrame uniqueMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      List<String>? subset,
      required UniqueKeepStrategy keepStrategy,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_opt_StringList(subset);
    var arg2 = api2wire_unique_keep_strategy(keepStrategy);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_unique__method__take_self__LazyFrame(arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kUniqueMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, subset, keepStrategy],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUniqueMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unique__method__take_self__LazyFrame",
        argNames: ["that", "subset", "keepStrategy"],
      );

  LazyFrame dropNullsMethodTakeSelfLazyFrame(
      {required LazyFrame that, List<Expr>? subset, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_opt_list_expr(subset);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_drop_nulls__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kDropNullsMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, subset],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kDropNullsMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "drop_nulls__method__take_self__LazyFrame",
            argNames: ["that", "subset"],
          );

  LazyFrame sliceMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required int offset,
      required int len,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_i64(offset);
    var arg2 = api2wire_u32(len);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_slice__method__take_self__LazyFrame(arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kSliceMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, offset, len],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSliceMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "slice__method__take_self__LazyFrame",
        argNames: ["that", "offset", "len"],
      );

  LazyFrame firstMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_first__method__take_self__LazyFrame(arg0),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kFirstMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFirstMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "first__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  LazyFrame lastMethodTakeSelfLazyFrame(
      {required LazyFrame that, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_last__method__take_self__LazyFrame(arg0),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kLastMethodTakeSelfLazyFrameConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLastMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "last__method__take_self__LazyFrame",
        argNames: ["that"],
      );

  LazyFrame tailMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int n, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = api2wire_u32(n);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_tail__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kTailMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTailMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tail__method__take_self__LazyFrame",
        argNames: ["that", "n"],
      );

  LazyFrame meltMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required List<String> idVars,
      required List<String> valueVars,
      String? variableName,
      String? valueName,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_StringList(idVars);
    var arg2 = _platform.api2wire_StringList(valueVars);
    var arg3 = _platform.api2wire_opt_String(variableName);
    var arg4 = _platform.api2wire_opt_String(valueName);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_melt__method__take_self__LazyFrame(
          arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kMeltMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, idVars, valueVars, variableName, valueName],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMeltMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "melt__method__take_self__LazyFrame",
        argNames: ["that", "idVars", "valueVars", "variableName", "valueName"],
      );

  LazyFrame limitMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int n, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = api2wire_u32(n);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_limit__method__take_self__LazyFrame(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kLimitMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLimitMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "limit__method__take_self__LazyFrame",
        argNames: ["that", "n"],
      );

  Future<DataFrame> fetchMethodTakeSelfLazyFrame(
      {required LazyFrame that, required int nRows, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = api2wire_usize(nRows);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_fetch__method__take_self__LazyFrame(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kFetchMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, nRows],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFetchMethodTakeSelfLazyFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch__method__take_self__LazyFrame",
        argNames: ["that", "nRows"],
      );

  LazyFrame withRowCountMethodTakeSelfLazyFrame(
      {required LazyFrame that,
      required String name,
      int? offset,
      dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_frame(that);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_opt_u32(offset);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_with_row_count__method__take_self__LazyFrame(arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kWithRowCountMethodTakeSelfLazyFrameConstMeta,
      argValues: [that, name, offset],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kWithRowCountMethodTakeSelfLazyFrameConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "with_row_count__method__take_self__LazyFrame",
            argNames: ["that", "name", "offset"],
          );

  Series ofStringsStaticMethodSeries(
      {required String name, List<String?>? values, dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    var arg1 = _platform.api2wire_opt_list_opt_String(values);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_of_strings__static_method__Series(arg0, arg1),
      parseSuccessData: _wire2api_series,
      constMeta: kOfStringsStaticMethodSeriesConstMeta,
      argValues: [name, values],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOfStringsStaticMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "of_strings__static_method__Series",
        argNames: ["name", "values"],
      );

  Series ofI32StaticMethodSeries(
      {required String name, List<int?>? values, dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    var arg1 = _platform.api2wire_opt_list_opt_i32(values);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_of_i32__static_method__Series(arg0, arg1),
      parseSuccessData: _wire2api_series,
      constMeta: kOfI32StaticMethodSeriesConstMeta,
      argValues: [name, values],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOfI32StaticMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "of_i32__static_method__Series",
        argNames: ["name", "values"],
      );

  Series ofIntsStaticMethodSeries(
      {required String name, List<int?>? values, dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    var arg1 = _platform.api2wire_opt_list_opt_i64(values);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_of_ints__static_method__Series(arg0, arg1),
      parseSuccessData: _wire2api_series,
      constMeta: kOfIntsStaticMethodSeriesConstMeta,
      argValues: [name, values],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOfIntsStaticMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "of_ints__static_method__Series",
        argNames: ["name", "values"],
      );

  Series ofDurationsStaticMethodSeries(
      {required String name,
      List<Duration?>? values,
      TimeUnit unit = TimeUnit.Milliseconds,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    var arg1 = _platform.api2wire_opt_list_opt_Chrono_Duration(values);
    var arg2 = api2wire_time_unit(unit);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_of_durations__static_method__Series(arg0, arg1, arg2),
      parseSuccessData: _wire2api_series,
      constMeta: kOfDurationsStaticMethodSeriesConstMeta,
      argValues: [name, values, unit],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOfDurationsStaticMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "of_durations__static_method__Series",
        argNames: ["name", "values", "unit"],
      );

  Series ofDoublesStaticMethodSeries(
      {required String name, List<double?>? values, dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    var arg1 = _platform.api2wire_opt_list_opt_f64(values);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_of_doubles__static_method__Series(arg0, arg1),
      parseSuccessData: _wire2api_series,
      constMeta: kOfDoublesStaticMethodSeriesConstMeta,
      argValues: [name, values],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOfDoublesStaticMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "of_doubles__static_method__Series",
        argNames: ["name", "values"],
      );

  Future<void> appendMethodSeries(
      {required Series that, required Series other, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_series(other);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_append__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_unit(d),
      constMeta: kAppendMethodSeriesConstMeta,
      argValues: [that, other],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAppendMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "append__method__Series",
        argNames: ["that", "other"],
      );

  Future<Series> castMethodSeries(
      {required Series that,
      required DataType dtype,
      bool strict = true,
      dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_data_type(dtype);
    var arg2 = strict;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cast__method__Series(port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kCastMethodSeriesConstMeta,
      argValues: [that, dtype, strict],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCastMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cast__method__Series",
        argNames: ["that", "dtype", "strict"],
      );

  Future<List<String?>> asStringsMethodSeries(
      {required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_as_strings__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_list_opt_String(d),
      constMeta: kAsStringsMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsStringsMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "as_strings__method__Series",
        argNames: ["that"],
      );

  Future<List<int?>> asIntsMethodSeries(
      {required Series that, bool strict = true, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = strict;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_as_ints__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_list_opt_i64(d),
      constMeta: kAsIntsMethodSeriesConstMeta,
      argValues: [that, strict],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsIntsMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "as_ints__method__Series",
        argNames: ["that", "strict"],
      );

  Future<List<double?>> asDoublesMethodSeries(
      {required Series that, bool strict = true, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = strict;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_as_doubles__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_list_opt_f64(d),
      constMeta: kAsDoublesMethodSeriesConstMeta,
      argValues: [that, strict],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsDoublesMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "as_doubles__method__Series",
        argNames: ["that", "strict"],
      );

  Future<List<Duration?>> asDurationsMethodSeries(
      {required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_as_durations__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_list_opt_Chrono_Duration(d),
      constMeta: kAsDurationsMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsDurationsMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "as_durations__method__Series",
        argNames: ["that"],
      );

  Future<List<DateTime?>> asNaiveDatetimeMethodSeries(
      {required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_as_naive_datetime__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_list_opt_Chrono_Naive(d),
      constMeta: kAsNaiveDatetimeMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsNaiveDatetimeMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "as_naive_datetime__method__Series",
        argNames: ["that"],
      );

  Future<List<DateTime?>> asUtcDatetimeMethodSeries(
      {required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_as_utc_datetime__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_list_opt_Chrono_Utc(d),
      constMeta: kAsUtcDatetimeMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsUtcDatetimeMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "as_utc_datetime__method__Series",
        argNames: ["that"],
      );

  Future<List<DateTime?>> asLocalDatetimeMethodSeries(
      {required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_as_local_datetime__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_list_opt_Chrono_Local(d),
      constMeta: kAsLocalDatetimeMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsLocalDatetimeMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "as_local_datetime__method__Series",
        argNames: ["that"],
      );

  Future<Series> absMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_abs__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kAbsMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAbsMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "abs__method__Series",
        argNames: ["that"],
      );

  Future<Series> sortMethodSeries(
      {required Series that, bool reverse = false, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = reverse;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sort__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kSortMethodSeriesConstMeta,
      argValues: [that, reverse],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSortMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sort__method__Series",
        argNames: ["that", "reverse"],
      );

  Future<Series> shuffleMethodSeries(
      {required Series that, int? seed, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_opt_u64(seed);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_shuffle__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kShuffleMethodSeriesConstMeta,
      argValues: [that, seed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kShuffleMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "shuffle__method__Series",
        argNames: ["that", "seed"],
      );

  Future<double?> sumMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sum__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_opt_f64(d),
      constMeta: kSumMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSumMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sum__method__Series",
        argNames: ["that"],
      );

  Future<Series> sumAsSeriesMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sum_as_series__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kSumAsSeriesMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSumAsSeriesMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sum_as_series__method__Series",
        argNames: ["that"],
      );

  Future<double?> minMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_min__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_opt_f64(d),
      constMeta: kMinMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMinMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "min__method__Series",
        argNames: ["that"],
      );

  Future<double?> maxMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_max__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_opt_f64(d),
      constMeta: kMaxMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMaxMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "max__method__Series",
        argNames: ["that"],
      );

  Future<Series> explodeMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_explode__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kExplodeMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExplodeMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "explode__method__Series",
        argNames: ["that"],
      );

  Future<Series> explodeByOffsetsMethodSeries(
      {required Series that, required Int64List offsets, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_int_64_list(offsets);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_explode_by_offsets__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kExplodeByOffsetsMethodSeriesConstMeta,
      argValues: [that, offsets],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExplodeByOffsetsMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "explode_by_offsets__method__Series",
        argNames: ["that", "offsets"],
      );

  Future<Series> cummaxMethodSeries(
      {required Series that, bool reverse = false, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = reverse;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cummax__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kCummaxMethodSeriesConstMeta,
      argValues: [that, reverse],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCummaxMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cummax__method__Series",
        argNames: ["that", "reverse"],
      );

  Future<Series> cumminMethodSeries(
      {required Series that, bool reverse = false, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = reverse;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cummin__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kCumminMethodSeriesConstMeta,
      argValues: [that, reverse],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCumminMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cummin__method__Series",
        argNames: ["that", "reverse"],
      );

  Future<Series> cumprodMethodSeries(
      {required Series that, bool reverse = false, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = reverse;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cumprod__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kCumprodMethodSeriesConstMeta,
      argValues: [that, reverse],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCumprodMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cumprod__method__Series",
        argNames: ["that", "reverse"],
      );

  Future<Series> cumsumMethodSeries(
      {required Series that, bool reverse = false, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = reverse;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cumsum__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kCumsumMethodSeriesConstMeta,
      argValues: [that, reverse],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCumsumMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cumsum__method__Series",
        argNames: ["that", "reverse"],
      );

  Future<Series> productMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_product__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kProductMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kProductMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "product__method__Series",
        argNames: ["that"],
      );

  String? getStringMethodSeries(
      {required Series that, required int index, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = api2wire_usize(index);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_string__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_opt_String(d),
      constMeta: kGetStringMethodSeriesConstMeta,
      argValues: [that, index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetStringMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_string__method__Series",
        argNames: ["that", "index"],
      );

  double? getMethodSeries(
      {required Series that, required int index, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = api2wire_usize(index);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_opt_f64(d),
      constMeta: kGetMethodSeriesConstMeta,
      argValues: [that, index],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get__method__Series",
        argNames: ["that", "index"],
      );

  Series headMethodSeries({required Series that, int? length, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_opt_usize(length);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_head__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kHeadMethodSeriesConstMeta,
      argValues: [that, length],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHeadMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "head__method__Series",
        argNames: ["that", "length"],
      );

  Series tailMethodSeries({required Series that, int? length, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_opt_usize(length);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_tail__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kTailMethodSeriesConstMeta,
      argValues: [that, length],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTailMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tail__method__Series",
        argNames: ["that", "length"],
      );

  Future<double?> meanMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mean__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_opt_f64(d),
      constMeta: kMeanMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMeanMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mean__method__Series",
        argNames: ["that"],
      );

  Future<double?> medianMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_median__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_opt_f64(d),
      constMeta: kMedianMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMedianMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "median__method__Series",
        argNames: ["that"],
      );

  Future<Series> meanAsSeriesMethodSeries(
      {required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_mean_as_series__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kMeanAsSeriesMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMeanAsSeriesMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "mean_as_series__method__Series",
        argNames: ["that"],
      );

  Future<Series> medianAsSeriesMethodSeries(
      {required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_median_as_series__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kMedianAsSeriesMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMedianAsSeriesMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "median_as_series__method__Series",
        argNames: ["that"],
      );

  int estimatedSizeMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_estimated_size__method__Series(arg0),
      parseSuccessData: (d) => _wire2api_usize(d),
      constMeta: kEstimatedSizeMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEstimatedSizeMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "estimated_size__method__Series",
        argNames: ["that"],
      );

  Series addToMethodSeries(
      {required Series that, required Series other, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_series(other);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_add_to__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kAddToMethodSeriesConstMeta,
      argValues: [that, other],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddToMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_to__method__Series",
        argNames: ["that", "other"],
      );

  Series subtractMethodSeries(
      {required Series that, required Series other, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_series(other);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_subtract__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kSubtractMethodSeriesConstMeta,
      argValues: [that, other],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSubtractMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "subtract__method__Series",
        argNames: ["that", "other"],
      );

  Series multiplyMethodSeries(
      {required Series that, required Series other, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_series(other);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_multiply__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kMultiplyMethodSeriesConstMeta,
      argValues: [that, other],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMultiplyMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "multiply__method__Series",
        argNames: ["that", "other"],
      );

  Series divideMethodSeries(
      {required Series that, required Series other, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_series(other);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_divide__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kDivideMethodSeriesConstMeta,
      argValues: [that, other],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDivideMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "divide__method__Series",
        argNames: ["that", "other"],
      );

  Series remainderMethodSeries(
      {required Series that, required Series other, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_series(other);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_remainder__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kRemainderMethodSeriesConstMeta,
      argValues: [that, other],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemainderMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remainder__method__Series",
        argNames: ["that", "other"],
      );

  bool isBoolMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_bool__method__Series(arg0),
      parseSuccessData: (d) => _wire2api_bool(d),
      constMeta: kIsBoolMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsBoolMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_bool__method__Series",
        argNames: ["that"],
      );

  bool isUtf8MethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_utf8__method__Series(arg0),
      parseSuccessData: (d) => _wire2api_bool(d),
      constMeta: kIsUtf8MethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsUtf8MethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_utf8__method__Series",
        argNames: ["that"],
      );

  bool isNumericMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_numeric__method__Series(arg0),
      parseSuccessData: (d) => _wire2api_bool(d),
      constMeta: kIsNumericMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsNumericMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_numeric__method__Series",
        argNames: ["that"],
      );

  bool isTemporalMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_temporal__method__Series(arg0),
      parseSuccessData: (d) => _wire2api_bool(d),
      constMeta: kIsTemporalMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsTemporalMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_temporal__method__Series",
        argNames: ["that"],
      );

  Future<String> dumpMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_dump__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_String(d),
      constMeta: kDumpMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDumpMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dump__method__Series",
        argNames: ["that"],
      );

  void renameMethodSeries(
      {required Series that, required String name, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_String(name);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_rename__method__Series(arg0, arg1),
      parseSuccessData: (d) => _wire2api_unit(d),
      constMeta: kRenameMethodSeriesConstMeta,
      argValues: [that, name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRenameMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "rename__method__Series",
        argNames: ["that", "name"],
      );

  Future<Series> uniqueMethodSeries(
      {required Series that, bool stable = false, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = stable;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_unique__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kUniqueMethodSeriesConstMeta,
      argValues: [that, stable],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUniqueMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unique__method__Series",
        argNames: ["that", "stable"],
      );

  Future<bool> equalMethodSeries(
      {required Series that,
      required Series other,
      bool ignoreNull = false,
      dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_series(other);
    var arg2 = ignoreNull;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_equal__method__Series(port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_bool(d),
      constMeta: kEqualMethodSeriesConstMeta,
      argValues: [that, other, ignoreNull],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEqualMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "equal__method__Series",
        argNames: ["that", "other", "ignoreNull"],
      );

  Future<Series> applyScalarMethodSeries(
      {required Series that,
      required Operator op,
      required double value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = api2wire_operator(op);
    var arg2 = api2wire_f64(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_apply_scalar__method__Series(port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kApplyScalarMethodSeriesConstMeta,
      argValues: [that, op, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kApplyScalarMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "apply_scalar__method__Series",
        argNames: ["that", "op", "value"],
      );

  Future<Series> reshapeMethodSeries(
      {required Series that, required Int64List dims, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = _platform.api2wire_int_64_list(dims);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_reshape__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kReshapeMethodSeriesConstMeta,
      argValues: [that, dims],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReshapeMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reshape__method__Series",
        argNames: ["that", "dims"],
      );

  Future<Series> stdAsSeriesMethodSeries(
      {required Series that, required int ddof, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = api2wire_u8(ddof);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_std_as_series__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kStdAsSeriesMethodSeriesConstMeta,
      argValues: [that, ddof],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStdAsSeriesMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "std_as_series__method__Series",
        argNames: ["that", "ddof"],
      );

  Future<Series> varAsSeriesMethodSeries(
      {required Series that, required int ddof, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    var arg1 = api2wire_u8(ddof);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_var_as_series__method__Series(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_series(d),
      constMeta: kVarAsSeriesMethodSeriesConstMeta,
      argValues: [that, ddof],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVarAsSeriesMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "var_as_series__method__Series",
        argNames: ["that", "ddof"],
      );

  Future<List<dynamic>> toListMethodSeries(
      {required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_to_list__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_list_dartabi(d),
      constMeta: kToListMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kToListMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "to_list__method__Series",
        argNames: ["that"],
      );

  DataFrame intoFrameMethodTakeSelfSeries(
      {required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_into_frame__method__take_self__Series(arg0),
      parseSuccessData: (d) => _wire2api_data_frame(d),
      constMeta: kIntoFrameMethodTakeSelfSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIntoFrameMethodTakeSelfSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "into_frame__method__take_self__Series",
        argNames: ["that"],
      );

  Stream<dynamic> iterMethodSeries({required Series that, dynamic hint}) {
    var arg0 = _platform.api2wire_series(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_iter__method__Series(port_, arg0),
      parseSuccessData: (d) => _wire2api_dartabi(d),
      constMeta: kIterMethodSeriesConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIterMethodSeriesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "iter__method__Series",
        argNames: ["that"],
      );

  LazyFrame aggMethodTakeSelfLazyGroupBy(
      {required LazyGroupBy that, required List<Expr> exprs, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_group_by(that);
    var arg1 = _platform.api2wire_list_expr(exprs);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_agg__method__take_self__LazyGroupBy(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kAggMethodTakeSelfLazyGroupByConstMeta,
      argValues: [that, exprs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAggMethodTakeSelfLazyGroupByConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "agg__method__take_self__LazyGroupBy",
        argNames: ["that", "exprs"],
      );

  LazyFrame headMethodTakeSelfLazyGroupBy(
      {required LazyGroupBy that, int? n, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_group_by(that);
    var arg1 = _platform.api2wire_opt_usize(n);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_head__method__take_self__LazyGroupBy(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kHeadMethodTakeSelfLazyGroupByConstMeta,
      argValues: [that, n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHeadMethodTakeSelfLazyGroupByConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "head__method__take_self__LazyGroupBy",
        argNames: ["that", "n"],
      );

  LazyFrame tailMethodTakeSelfLazyGroupBy(
      {required LazyGroupBy that, int? n, dynamic hint}) {
    var arg0 = _platform.api2wire_lazy_group_by(that);
    var arg1 = _platform.api2wire_opt_usize(n);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_tail__method__take_self__LazyGroupBy(arg0, arg1),
      parseSuccessData: (d) => _wire2api_lazy_frame(d),
      constMeta: kTailMethodTakeSelfLazyGroupByConstMeta,
      argValues: [that, n],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTailMethodTakeSelfLazyGroupByConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tail__method__take_self__LazyGroupBy",
        argNames: ["that", "n"],
      );

  Schema ofStaticMethodSchema({required List<Field> fields, dynamic hint}) {
    var arg0 = _platform.api2wire_list_field(fields);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_of__static_method__Schema(arg0),
      parseSuccessData: _wire2api_schema,
      constMeta: kOfStaticMethodSchemaConstMeta,
      argValues: [fields],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOfStaticMethodSchemaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "of__static_method__Schema",
        argNames: ["fields"],
      );

  DropFnType get dropOpaqueRwLockPDataFrame =>
      _platform.inner.drop_opaque_RwLockPDataFrame;
  ShareFnType get shareOpaqueRwLockPDataFrame =>
      _platform.inner.share_opaque_RwLockPDataFrame;
  OpaqueTypeFinalizer get RwLockPDataFrameFinalizer =>
      _platform.RwLockPDataFrameFinalizer;

  DropFnType get dropOpaqueRwLockPLazyFrame =>
      _platform.inner.drop_opaque_RwLockPLazyFrame;
  ShareFnType get shareOpaqueRwLockPLazyFrame =>
      _platform.inner.share_opaque_RwLockPLazyFrame;
  OpaqueTypeFinalizer get RwLockPLazyFrameFinalizer =>
      _platform.RwLockPLazyFrameFinalizer;

  DropFnType get dropOpaqueRwLockPLazyGroupBy =>
      _platform.inner.drop_opaque_RwLockPLazyGroupBy;
  ShareFnType get shareOpaqueRwLockPLazyGroupBy =>
      _platform.inner.share_opaque_RwLockPLazyGroupBy;
  OpaqueTypeFinalizer get RwLockPLazyGroupByFinalizer =>
      _platform.RwLockPLazyGroupByFinalizer;

  DropFnType get dropOpaqueRwLockPSchema =>
      _platform.inner.drop_opaque_RwLockPSchema;
  ShareFnType get shareOpaqueRwLockPSchema =>
      _platform.inner.share_opaque_RwLockPSchema;
  OpaqueTypeFinalizer get RwLockPSchemaFinalizer =>
      _platform.RwLockPSchemaFinalizer;

  DropFnType get dropOpaqueRwLockPSeries =>
      _platform.inner.drop_opaque_RwLockPSeries;
  ShareFnType get shareOpaqueRwLockPSeries =>
      _platform.inner.share_opaque_RwLockPSeries;
  OpaqueTypeFinalizer get RwLockPSeriesFinalizer =>
      _platform.RwLockPSeriesFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  Duration _wire2api_Chrono_Duration(dynamic raw) {
    return wire2apiDuration(_wire2api_i64(raw));
  }

  DateTime _wire2api_Chrono_Local(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: false);
  }

  DateTime _wire2api_Chrono_Naive(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  DateTime _wire2api_Chrono_Utc(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  RwLockPDataFrame _wire2api_RwLockPDataFrame(dynamic raw) {
    return RwLockPDataFrame.fromRaw(raw[0], raw[1]);
  }

  RwLockPLazyFrame _wire2api_RwLockPLazyFrame(dynamic raw) {
    return RwLockPLazyFrame.fromRaw(raw[0], raw[1]);
  }

  RwLockPLazyGroupBy _wire2api_RwLockPLazyGroupBy(dynamic raw) {
    return RwLockPLazyGroupBy.fromRaw(raw[0], raw[1]);
  }

  RwLockPSchema _wire2api_RwLockPSchema(dynamic raw) {
    return RwLockPSchema.fromRaw(raw[0], raw[1]);
  }

  RwLockPSeries _wire2api_RwLockPSeries(dynamic raw) {
    return RwLockPSeries.fromRaw(raw[0], raw[1]);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  Duration _wire2api_box_autoadd_Chrono_Duration(dynamic raw) {
    return _wire2api_Chrono_Duration(raw);
  }

  DateTime _wire2api_box_autoadd_Chrono_Local(dynamic raw) {
    return _wire2api_Chrono_Local(raw);
  }

  DateTime _wire2api_box_autoadd_Chrono_Naive(dynamic raw) {
    return _wire2api_Chrono_Naive(raw);
  }

  DateTime _wire2api_box_autoadd_Chrono_Utc(dynamic raw) {
    return _wire2api_Chrono_Utc(raw);
  }

  double _wire2api_box_autoadd_f64(dynamic raw) {
    return raw as double;
  }

  int _wire2api_box_autoadd_i64(dynamic raw) {
    return _wire2api_i64(raw);
  }

  DataType _wire2api_box_data_type(dynamic raw) {
    return _wire2api_data_type(raw);
  }

  dynamic _wire2api_dartabi(dynamic raw) {
    return raw;
  }

  DataFrame _wire2api_data_frame(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DataFrame(
      field0: _wire2api_RwLockPDataFrame(arr[0]),
    );
  }

  DataType _wire2api_data_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DataType_Boolean();
      case 1:
        return DataType_UInt8();
      case 2:
        return DataType_UInt16();
      case 3:
        return DataType_UInt32();
      case 4:
        return DataType_UInt64();
      case 5:
        return DataType_Int8();
      case 6:
        return DataType_Int16();
      case 7:
        return DataType_Int32();
      case 8:
        return DataType_Int64();
      case 9:
        return DataType_Float32();
      case 10:
        return DataType_Float64();
      case 11:
        return DataType_Utf8();
      case 12:
        return DataType_Binary();
      case 13:
        return DataType_Date();
      case 14:
        return DataType_Datetime(
          _wire2api_time_unit(raw[1]),
          _wire2api_opt_String(raw[2]),
        );
      case 15:
        return DataType_Duration(
          _wire2api_time_unit(raw[1]),
        );
      case 16:
        return DataType_Time();
      case 17:
        return DataType_List(
          _wire2api_box_data_type(raw[1]),
        );
      case 18:
        return DataType_Struct(
          _wire2api_list_field(raw[1]),
        );
      case 19:
        return DataType_Unknown();
      default:
        throw Exception("unreachable");
    }
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  Field _wire2api_field(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Field(
      name: _wire2api_String(arr[0]),
      dtype: _wire2api_data_type(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  LazyFrame _wire2api_lazy_frame(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LazyFrame(
      field0: _wire2api_RwLockPLazyFrame(arr[0]),
    );
  }

  LazyGroupBy _wire2api_lazy_group_by(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LazyGroupBy(
      field0: _wire2api_RwLockPLazyGroupBy(arr[0]),
    );
  }

  List<dynamic> _wire2api_list_dartabi(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_dartabi).toList();
  }

  List<DataType> _wire2api_list_data_type(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_data_type).toList();
  }

  List<Field> _wire2api_list_field(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_field).toList();
  }

  List<Duration?> _wire2api_list_opt_Chrono_Duration(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opt_Chrono_Duration).toList();
  }

  List<DateTime?> _wire2api_list_opt_Chrono_Local(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opt_Chrono_Local).toList();
  }

  List<DateTime?> _wire2api_list_opt_Chrono_Naive(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opt_Chrono_Naive).toList();
  }

  List<DateTime?> _wire2api_list_opt_Chrono_Utc(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opt_Chrono_Utc).toList();
  }

  List<String?> _wire2api_list_opt_String(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opt_String).toList();
  }

  List<double?> _wire2api_list_opt_f64(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opt_f64).toList();
  }

  List<int?> _wire2api_list_opt_i64(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opt_i64).toList();
  }

  List<Series> _wire2api_list_series(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_series).toList();
  }

  Duration? _wire2api_opt_Chrono_Duration(dynamic raw) {
    return raw == null ? null : _wire2api_Chrono_Duration(raw);
  }

  DateTime? _wire2api_opt_Chrono_Local(dynamic raw) {
    return raw == null ? null : _wire2api_Chrono_Local(raw);
  }

  DateTime? _wire2api_opt_Chrono_Naive(dynamic raw) {
    return raw == null ? null : _wire2api_Chrono_Naive(raw);
  }

  DateTime? _wire2api_opt_Chrono_Utc(dynamic raw) {
    return raw == null ? null : _wire2api_Chrono_Utc(raw);
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  double? _wire2api_opt_f64(dynamic raw) {
    return raw == null ? null : _wire2api_f64(raw);
  }

  int? _wire2api_opt_i64(dynamic raw) {
    return raw == null ? null : _wire2api_i64(raw);
  }

  Schema _wire2api_schema(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Schema(
      field0: _wire2api_RwLockPSchema(arr[0]),
    );
  }

  Series _wire2api_series(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Series(
      field0: _wire2api_RwLockPSeries(arr[0]),
    );
  }

  Shape _wire2api_shape(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Shape(
      height: _wire2api_usize(arr[0]),
      width: _wire2api_usize(arr[1]),
    );
  }

  TimeUnit _wire2api_time_unit(dynamic raw) {
    return TimeUnit.values[raw as int];
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_char(String raw) {
  return raw.runes.single;
}

@protected
int api2wire_csv_encoding(CsvEncoding raw) {
  return api2wire_i32(raw.index);
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i16(int raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_i8(int raw) {
  return raw;
}

@protected
int api2wire_join_type(JoinType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_operator(Operator raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_quantile_interpol_options(QuantileInterpolOptions raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_time_unit(TimeUnit raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_unique_keep_strategy(UniqueKeepStrategy raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class PolarsWrapperPlatform extends FlutterRustBridgeBase<PolarsWrapperWire> {
  PolarsWrapperPlatform(ffi.DynamicLibrary dylib)
      : super(PolarsWrapperWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_ArcStr(String raw) {
    return api2wire_String(raw);
  }

  @protected
  int api2wire_Chrono_Duration(Duration raw) {
    return api2wire_i64(raw.inMicroseconds);
  }

  @protected
  int api2wire_Chrono_Naive(DateTime raw) {
    return api2wire_i64(raw.microsecondsSinceEpoch);
  }

  @protected
  wire_RwLockPDataFrame api2wire_RwLockPDataFrame(RwLockPDataFrame raw) {
    final ptr = inner.new_RwLockPDataFrame();
    _api_fill_to_wire_RwLockPDataFrame(raw, ptr);
    return ptr;
  }

  @protected
  wire_RwLockPLazyFrame api2wire_RwLockPLazyFrame(RwLockPLazyFrame raw) {
    final ptr = inner.new_RwLockPLazyFrame();
    _api_fill_to_wire_RwLockPLazyFrame(raw, ptr);
    return ptr;
  }

  @protected
  wire_RwLockPLazyGroupBy api2wire_RwLockPLazyGroupBy(RwLockPLazyGroupBy raw) {
    final ptr = inner.new_RwLockPLazyGroupBy();
    _api_fill_to_wire_RwLockPLazyGroupBy(raw, ptr);
    return ptr;
  }

  @protected
  wire_RwLockPSchema api2wire_RwLockPSchema(RwLockPSchema raw) {
    final ptr = inner.new_RwLockPSchema();
    _api_fill_to_wire_RwLockPSchema(raw, ptr);
    return ptr;
  }

  @protected
  wire_RwLockPSeries api2wire_RwLockPSeries(RwLockPSeries raw) {
    final ptr = inner.new_RwLockPSeries();
    _api_fill_to_wire_RwLockPSeries(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  wire_AggExpr api2wire_agg_expr(AggExpr raw) {
    final shell = inner.new_agg_expr_0();
    _api_fill_to_wire_agg_expr(raw, shell);
    return shell;
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_Chrono_Duration(Duration raw) {
    return inner
        .new_box_autoadd_Chrono_Duration_0(api2wire_Chrono_Duration(raw));
  }

  @protected
  ffi.Pointer<wire_AggExpr> api2wire_box_autoadd_agg_expr(AggExpr raw) {
    final ptr = inner.new_box_autoadd_agg_expr_0();
    _api_fill_to_wire_agg_expr(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_char(String raw) {
    return inner.new_box_autoadd_char_0(api2wire_char(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_csv_encoding(CsvEncoding raw) {
    return inner.new_box_autoadd_csv_encoding_0(api2wire_csv_encoding(raw));
  }

  @protected
  ffi.Pointer<wire_DataType> api2wire_box_autoadd_data_type(DataType raw) {
    final ptr = inner.new_box_autoadd_data_type_0();
    _api_fill_to_wire_data_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_box_autoadd_f64(double raw) {
    return inner.new_box_autoadd_f64_0(api2wire_f64(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_i32(int raw) {
    return inner.new_box_autoadd_i32_0(api2wire_i32(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<wire_LiteralValue> api2wire_box_autoadd_literal_value(
      LiteralValue raw) {
    final ptr = inner.new_box_autoadd_literal_value_0();
    _api_fill_to_wire_literal_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NullValues> api2wire_box_autoadd_null_values(
      NullValues raw) {
    final ptr = inner.new_box_autoadd_null_values_0();
    _api_fill_to_wire_null_values(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RowCount> api2wire_box_autoadd_row_count(RowCount raw) {
    final ptr = inner.new_box_autoadd_row_count_0();
    _api_fill_to_wire_row_count(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Schema> api2wire_box_autoadd_schema(Schema raw) {
    final ptr = inner.new_box_autoadd_schema_0();
    _api_fill_to_wire_schema(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SortOptions> api2wire_box_autoadd_sort_options(
      SortOptions raw) {
    final ptr = inner.new_box_autoadd_sort_options_0();
    _api_fill_to_wire_sort_options(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_box_autoadd_usize(int raw) {
    return inner.new_box_autoadd_usize_0(api2wire_usize(raw));
  }

  @protected
  ffi.Pointer<wire_DataType> api2wire_box_data_type(DataType raw) {
    final ptr = inner.new_box_data_type_0();
    _api_fill_to_wire_data_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Expr> api2wire_box_expr(Expr raw) {
    final ptr = inner.new_box_expr_0();
    _api_fill_to_wire_expr(raw, ptr.ref);
    return ptr;
  }

  @protected
  wire_DataFrame api2wire_data_frame(DataFrame raw) {
    final shell = inner.new_data_frame_0();
    _api_fill_to_wire_data_frame(raw, shell);
    return shell;
  }

  @protected
  wire_DataType api2wire_data_type(DataType raw) {
    final shell = inner.new_data_type_0();
    _api_fill_to_wire_data_type(raw, shell);
    return shell;
  }

  @protected
  wire_Excluded api2wire_excluded(Excluded raw) {
    final shell = inner.new_excluded_0();
    _api_fill_to_wire_excluded(raw, shell);
    return shell;
  }

  @protected
  wire_Expr api2wire_expr(Expr raw) {
    final shell = inner.new_expr_0();
    _api_fill_to_wire_expr(raw, shell);
    return shell;
  }

  @protected
  wire_Field api2wire_field(Field raw) {
    final shell = inner.new_field_0();
    _api_fill_to_wire_field(raw, shell);
    return shell;
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_float_64_list(Float64List raw) {
    final ans = inner.new_float_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_int_64_list(Int64List raw) {
    final ans = inner.new_int_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw.inner);
    return ans;
  }

  @protected
  wire_LazyFrame api2wire_lazy_frame(LazyFrame raw) {
    final shell = inner.new_lazy_frame_0();
    _api_fill_to_wire_lazy_frame(raw, shell);
    return shell;
  }

  @protected
  wire_LazyGroupBy api2wire_lazy_group_by(LazyGroupBy raw) {
    final shell = inner.new_lazy_group_by_0();
    _api_fill_to_wire_lazy_group_by(raw, shell);
    return shell;
  }

  @protected
  ffi.Pointer<wire_list_data_type> api2wire_list_data_type(List<DataType> raw) {
    final ans = inner.new_list_data_type_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_data_type(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_excluded> api2wire_list_excluded(List<Excluded> raw) {
    final ans = inner.new_list_excluded_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_excluded(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_expr> api2wire_list_expr(List<Expr> raw) {
    final ans = inner.new_list_expr_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_expr(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_field> api2wire_list_field(List<Field> raw) {
    final ans = inner.new_list_field_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_field(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_Chrono_Duration> api2wire_list_opt_Chrono_Duration(
      List<Duration?> raw) {
    final ans = inner.new_list_opt_Chrono_Duration_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      if (raw[i] != null) {
        ans.ref.ptr[i] = inner.new_box_autoadd_Chrono_Duration_0(
            api2wire_Chrono_Duration(raw[i]!));
      }
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_String> api2wire_list_opt_String(
      List<String?> raw) {
    final ans = inner.new_list_opt_String_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      if (raw[i] != null) ans.ref.ptr[i] = api2wire_String(raw[i]!);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_f64> api2wire_list_opt_f64(List<double?> raw) {
    final ans = inner.new_list_opt_f64_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      if (raw[i] != null) {
        ans.ref.ptr[i] = inner.new_box_autoadd_f64_0(api2wire_f64(raw[i]!));
      }
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_i32> api2wire_list_opt_i32(List<int?> raw) {
    final ans = inner.new_list_opt_i32_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      if (raw[i] != null) {
        ans.ref.ptr[i] = inner.new_box_autoadd_i32_0(api2wire_i32(raw[i]!));
      }
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_opt_i64> api2wire_list_opt_i64(List<int?> raw) {
    final ans = inner.new_list_opt_i64_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      if (raw[i] != null) {
        ans.ref.ptr[i] = inner.new_box_autoadd_i64_0(api2wire_i64(raw[i]!));
      }
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_series> api2wire_list_series(List<Series> raw) {
    final ans = inner.new_list_series_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_series(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  wire_LiteralValue api2wire_literal_value(LiteralValue raw) {
    final shell = inner.new_literal_value_0();
    _api_fill_to_wire_literal_value(raw, shell);
    return shell;
  }

  @protected
  wire_NullValues api2wire_null_values(NullValues raw) {
    final shell = inner.new_null_values_0();
    _api_fill_to_wire_null_values(raw, shell);
    return shell;
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_Chrono_Duration(Duration? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_opt_StringList(List<String>? raw) {
    return raw == null ? ffi.nullptr : api2wire_StringList(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_char(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_char(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_csv_encoding(CsvEncoding? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_csv_encoding(raw);
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_opt_f64(double? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_f64(raw);
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_opt_float_64_list(Float64List? raw) {
    return raw == null ? ffi.nullptr : api2wire_float_64_list(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_i32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i32(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  ffi.Pointer<wire_list_data_type> api2wire_opt_list_data_type(
      List<DataType>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_data_type(raw);
  }

  @protected
  ffi.Pointer<wire_list_expr> api2wire_opt_list_expr(List<Expr>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_expr(raw);
  }

  @protected
  ffi.Pointer<wire_list_opt_Chrono_Duration>
      api2wire_opt_list_opt_Chrono_Duration(List<Duration?>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_opt_Chrono_Duration(raw);
  }

  @protected
  ffi.Pointer<wire_list_opt_String> api2wire_opt_list_opt_String(
      List<String?>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_opt_String(raw);
  }

  @protected
  ffi.Pointer<wire_list_opt_f64> api2wire_opt_list_opt_f64(List<double?>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_opt_f64(raw);
  }

  @protected
  ffi.Pointer<wire_list_opt_i32> api2wire_opt_list_opt_i32(List<int?>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_opt_i32(raw);
  }

  @protected
  ffi.Pointer<wire_list_opt_i64> api2wire_opt_list_opt_i64(List<int?>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_opt_i64(raw);
  }

  @protected
  ffi.Pointer<wire_list_series> api2wire_opt_list_series(List<Series>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_series(raw);
  }

  @protected
  ffi.Pointer<wire_NullValues> api2wire_opt_null_values(NullValues? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_null_values(raw);
  }

  @protected
  ffi.Pointer<wire_RowCount> api2wire_opt_row_count(RowCount? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_row_count(raw);
  }

  @protected
  ffi.Pointer<wire_Schema> api2wire_opt_schema(Schema? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_schema(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  ffi.Pointer<wire_uint_32_list> api2wire_opt_uint_32_list(Uint32List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_32_list(raw);
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_opt_usize(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_usize(raw);
  }

  @protected
  wire_RowCount api2wire_row_count(RowCount raw) {
    final shell = inner.new_row_count_0();
    _api_fill_to_wire_row_count(raw, shell);
    return shell;
  }

  @protected
  wire_Schema api2wire_schema(Schema raw) {
    final shell = inner.new_schema_0();
    _api_fill_to_wire_schema(raw, shell);
    return shell;
  }

  @protected
  wire_Series api2wire_series(Series raw) {
    final shell = inner.new_series_0();
    _api_fill_to_wire_series(raw, shell);
    return shell;
  }

  @protected
  wire_SortOptions api2wire_sort_options(SortOptions raw) {
    final shell = inner.new_sort_options_0();
    _api_fill_to_wire_sort_options(raw, shell);
    return shell;
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_32_list> api2wire_uint_32_list(Uint32List raw) {
    final ans = inner.new_uint_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _RwLockPDataFrameFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPDataFramePtr);
  OpaqueTypeFinalizer get RwLockPDataFrameFinalizer =>
      _RwLockPDataFrameFinalizer;
  late final OpaqueTypeFinalizer _RwLockPLazyFrameFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPLazyFramePtr);
  OpaqueTypeFinalizer get RwLockPLazyFrameFinalizer =>
      _RwLockPLazyFrameFinalizer;
  late final OpaqueTypeFinalizer _RwLockPLazyGroupByFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPLazyGroupByPtr);
  OpaqueTypeFinalizer get RwLockPLazyGroupByFinalizer =>
      _RwLockPLazyGroupByFinalizer;
  late final OpaqueTypeFinalizer _RwLockPSchemaFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPSchemaPtr);
  OpaqueTypeFinalizer get RwLockPSchemaFinalizer => _RwLockPSchemaFinalizer;
  late final OpaqueTypeFinalizer _RwLockPSeriesFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPSeriesPtr);
  OpaqueTypeFinalizer get RwLockPSeriesFinalizer => _RwLockPSeriesFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_RwLockPDataFrame(
      RwLockPDataFrame apiObj, wire_RwLockPDataFrame wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockPLazyFrame(
      RwLockPLazyFrame apiObj, wire_RwLockPLazyFrame wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockPLazyGroupBy(
      RwLockPLazyGroupBy apiObj, wire_RwLockPLazyGroupBy wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockPSchema(
      RwLockPSchema apiObj, wire_RwLockPSchema wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockPSeries(
      RwLockPSeries apiObj, wire_RwLockPSeries wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_agg_expr(AggExpr apiObj, wire_AggExpr wireObj) {
    if (apiObj is AggExpr_Min) {
      var pre_input = api2wire_box_expr(apiObj.input);
      var pre_propagate_nans = api2wire_bool(apiObj.propagateNans);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_AggExpr_Min();
      wireObj.kind.ref.Min.ref.input = pre_input;
      wireObj.kind.ref.Min.ref.propagate_nans = pre_propagate_nans;
      return;
    }
    if (apiObj is AggExpr_Max) {
      var pre_input = api2wire_box_expr(apiObj.input);
      var pre_propagate_nans = api2wire_bool(apiObj.propagateNans);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_AggExpr_Max();
      wireObj.kind.ref.Max.ref.input = pre_input;
      wireObj.kind.ref.Max.ref.propagate_nans = pre_propagate_nans;
      return;
    }
    if (apiObj is AggExpr_Median) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_AggExpr_Median();
      wireObj.kind.ref.Median.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_NUnique) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_AggExpr_NUnique();
      wireObj.kind.ref.NUnique.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_First) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_AggExpr_First();
      wireObj.kind.ref.First.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Last) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_AggExpr_Last();
      wireObj.kind.ref.Last.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Mean) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind = inner.inflate_AggExpr_Mean();
      wireObj.kind.ref.Mean.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_List) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_AggExpr_List();
      wireObj.kind.ref.List.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Count) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_AggExpr_Count();
      wireObj.kind.ref.Count.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Quantile) {
      var pre_expr = api2wire_box_expr(apiObj.expr);
      var pre_quantile = api2wire_box_expr(apiObj.quantile);
      var pre_interpol = api2wire_quantile_interpol_options(apiObj.interpol);
      wireObj.tag = 9;
      wireObj.kind = inner.inflate_AggExpr_Quantile();
      wireObj.kind.ref.Quantile.ref.expr = pre_expr;
      wireObj.kind.ref.Quantile.ref.quantile = pre_quantile;
      wireObj.kind.ref.Quantile.ref.interpol = pre_interpol;
      return;
    }
    if (apiObj is AggExpr_Sum) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind = inner.inflate_AggExpr_Sum();
      wireObj.kind.ref.Sum.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_AggGroups) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 11;
      wireObj.kind = inner.inflate_AggExpr_AggGroups();
      wireObj.kind.ref.AggGroups.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Std) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      var pre_field1 = api2wire_u8(apiObj.field1);
      wireObj.tag = 12;
      wireObj.kind = inner.inflate_AggExpr_Std();
      wireObj.kind.ref.Std.ref.field0 = pre_field0;
      wireObj.kind.ref.Std.ref.field1 = pre_field1;
      return;
    }
  }

  void _api_fill_to_wire_box_autoadd_agg_expr(
      AggExpr apiObj, ffi.Pointer<wire_AggExpr> wireObj) {
    _api_fill_to_wire_agg_expr(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_data_type(
      DataType apiObj, ffi.Pointer<wire_DataType> wireObj) {
    _api_fill_to_wire_data_type(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_literal_value(
      LiteralValue apiObj, ffi.Pointer<wire_LiteralValue> wireObj) {
    _api_fill_to_wire_literal_value(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_null_values(
      NullValues apiObj, ffi.Pointer<wire_NullValues> wireObj) {
    _api_fill_to_wire_null_values(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_row_count(
      RowCount apiObj, ffi.Pointer<wire_RowCount> wireObj) {
    _api_fill_to_wire_row_count(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_schema(
      Schema apiObj, ffi.Pointer<wire_Schema> wireObj) {
    _api_fill_to_wire_schema(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sort_options(
      SortOptions apiObj, ffi.Pointer<wire_SortOptions> wireObj) {
    _api_fill_to_wire_sort_options(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_data_type(
      DataType apiObj, ffi.Pointer<wire_DataType> wireObj) {
    _api_fill_to_wire_data_type(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_expr(Expr apiObj, ffi.Pointer<wire_Expr> wireObj) {
    _api_fill_to_wire_expr(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_data_frame(DataFrame apiObj, wire_DataFrame wireObj) {
    wireObj.field0 = api2wire_RwLockPDataFrame(apiObj.field0);
  }

  void _api_fill_to_wire_data_type(DataType apiObj, wire_DataType wireObj) {
    if (apiObj is DataType_Boolean) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DataType_UInt8) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DataType_UInt16) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is DataType_UInt32) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is DataType_UInt64) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is DataType_Int8) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is DataType_Int16) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is DataType_Int32) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is DataType_Int64) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is DataType_Float32) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is DataType_Float64) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is DataType_Utf8) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is DataType_Binary) {
      wireObj.tag = 12;
      return;
    }
    if (apiObj is DataType_Date) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is DataType_Datetime) {
      var pre_field0 = api2wire_time_unit(apiObj.field0);
      var pre_field1 = api2wire_opt_String(apiObj.field1);
      wireObj.tag = 14;
      wireObj.kind = inner.inflate_DataType_Datetime();
      wireObj.kind.ref.Datetime.ref.field0 = pre_field0;
      wireObj.kind.ref.Datetime.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is DataType_Duration) {
      var pre_field0 = api2wire_time_unit(apiObj.field0);
      wireObj.tag = 15;
      wireObj.kind = inner.inflate_DataType_Duration();
      wireObj.kind.ref.Duration.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Time) {
      wireObj.tag = 16;
      return;
    }
    if (apiObj is DataType_List) {
      var pre_field0 = api2wire_box_data_type(apiObj.field0);
      wireObj.tag = 17;
      wireObj.kind = inner.inflate_DataType_List();
      wireObj.kind.ref.List.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Struct) {
      var pre_field0 = api2wire_list_field(apiObj.field0);
      wireObj.tag = 18;
      wireObj.kind = inner.inflate_DataType_Struct();
      wireObj.kind.ref.Struct.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Unknown) {
      wireObj.tag = 19;
      return;
    }
  }

  void _api_fill_to_wire_excluded(Excluded apiObj, wire_Excluded wireObj) {
    if (apiObj is Excluded_Name) {
      var pre_field0 = api2wire_ArcStr(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Excluded_Name();
      wireObj.kind.ref.Name.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Excluded_Dtype) {
      var pre_field0 = api2wire_box_autoadd_data_type(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Excluded_Dtype();
      wireObj.kind.ref.Dtype.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_expr(Expr apiObj, wire_Expr wireObj) {
    if (apiObj is Expr_Alias) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      var pre_field1 = api2wire_ArcStr(apiObj.field1);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Expr_Alias();
      wireObj.kind.ref.Alias.ref.field0 = pre_field0;
      wireObj.kind.ref.Alias.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is Expr_Column) {
      var pre_field0 = api2wire_ArcStr(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Expr_Column();
      wireObj.kind.ref.Column.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Columns) {
      var pre_field0 = api2wire_StringList(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_Expr_Columns();
      wireObj.kind.ref.Columns.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_DtypeColumn) {
      var pre_field0 = api2wire_list_data_type(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_Expr_DtypeColumn();
      wireObj.kind.ref.DtypeColumn.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Literal) {
      var pre_field0 = api2wire_box_autoadd_literal_value(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_Expr_Literal();
      wireObj.kind.ref.Literal.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_BinaryExpr) {
      var pre_left = api2wire_box_expr(apiObj.left);
      var pre_op = api2wire_operator(apiObj.op);
      var pre_right = api2wire_box_expr(apiObj.right);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_Expr_BinaryExpr();
      wireObj.kind.ref.BinaryExpr.ref.left = pre_left;
      wireObj.kind.ref.BinaryExpr.ref.op = pre_op;
      wireObj.kind.ref.BinaryExpr.ref.right = pre_right;
      return;
    }
    if (apiObj is Expr_Cast) {
      var pre_expr = api2wire_box_expr(apiObj.expr);
      var pre_data_type = api2wire_box_autoadd_data_type(apiObj.dataType);
      var pre_strict = api2wire_bool(apiObj.strict);
      wireObj.tag = 6;
      wireObj.kind = inner.inflate_Expr_Cast();
      wireObj.kind.ref.Cast.ref.expr = pre_expr;
      wireObj.kind.ref.Cast.ref.data_type = pre_data_type;
      wireObj.kind.ref.Cast.ref.strict = pre_strict;
      return;
    }
    if (apiObj is Expr_Sort) {
      var pre_expr = api2wire_box_expr(apiObj.expr);
      var pre_options = api2wire_box_autoadd_sort_options(apiObj.options);
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_Expr_Sort();
      wireObj.kind.ref.Sort.ref.expr = pre_expr;
      wireObj.kind.ref.Sort.ref.options = pre_options;
      return;
    }
    if (apiObj is Expr_Take) {
      var pre_expr = api2wire_box_expr(apiObj.expr);
      var pre_idx = api2wire_box_expr(apiObj.idx);
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_Expr_Take();
      wireObj.kind.ref.Take.ref.expr = pre_expr;
      wireObj.kind.ref.Take.ref.idx = pre_idx;
      return;
    }
    if (apiObj is Expr_Agg) {
      var pre_field0 = api2wire_box_autoadd_agg_expr(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind = inner.inflate_Expr_Agg();
      wireObj.kind.ref.Agg.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Ternary) {
      var pre_predicate = api2wire_box_expr(apiObj.predicate);
      var pre_truthy = api2wire_box_expr(apiObj.truthy);
      var pre_falsy = api2wire_box_expr(apiObj.falsy);
      wireObj.tag = 10;
      wireObj.kind = inner.inflate_Expr_Ternary();
      wireObj.kind.ref.Ternary.ref.predicate = pre_predicate;
      wireObj.kind.ref.Ternary.ref.truthy = pre_truthy;
      wireObj.kind.ref.Ternary.ref.falsy = pre_falsy;
      return;
    }
    if (apiObj is Expr_Explode) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 11;
      wireObj.kind = inner.inflate_Expr_Explode();
      wireObj.kind.ref.Explode.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Filter) {
      var pre_input = api2wire_box_expr(apiObj.input);
      var pre_by = api2wire_box_expr(apiObj.by);
      wireObj.tag = 12;
      wireObj.kind = inner.inflate_Expr_Filter();
      wireObj.kind.ref.Filter.ref.input = pre_input;
      wireObj.kind.ref.Filter.ref.by = pre_by;
      return;
    }
    if (apiObj is Expr_Wildcard) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is Expr_Slice) {
      var pre_input = api2wire_box_expr(apiObj.input);
      var pre_offset = api2wire_box_expr(apiObj.offset);
      var pre_length = api2wire_box_expr(apiObj.length);
      wireObj.tag = 14;
      wireObj.kind = inner.inflate_Expr_Slice();
      wireObj.kind.ref.Slice.ref.input = pre_input;
      wireObj.kind.ref.Slice.ref.offset = pre_offset;
      wireObj.kind.ref.Slice.ref.length = pre_length;
      return;
    }
    if (apiObj is Expr_Exclude) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      var pre_field1 = api2wire_list_excluded(apiObj.field1);
      wireObj.tag = 15;
      wireObj.kind = inner.inflate_Expr_Exclude();
      wireObj.kind.ref.Exclude.ref.field0 = pre_field0;
      wireObj.kind.ref.Exclude.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is Expr_KeepName) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 16;
      wireObj.kind = inner.inflate_Expr_KeepName();
      wireObj.kind.ref.KeepName.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Count) {
      wireObj.tag = 17;
      return;
    }
    if (apiObj is Expr_Nth) {
      var pre_field0 = api2wire_i64(apiObj.field0);
      wireObj.tag = 18;
      wireObj.kind = inner.inflate_Expr_Nth();
      wireObj.kind.ref.Nth.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_field(Field apiObj, wire_Field wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    _api_fill_to_wire_data_type(apiObj.dtype, wireObj.dtype);
  }

  void _api_fill_to_wire_float_64_list(
      Float64List apiObj, ffi.Pointer<wire_float_64_list> wireObj) {
    throw UnimplementedError();
  }

  void _api_fill_to_wire_int_64_list(
      Int64List apiObj, ffi.Pointer<wire_int_64_list> wireObj) {
    throw UnimplementedError();
  }

  void _api_fill_to_wire_lazy_frame(LazyFrame apiObj, wire_LazyFrame wireObj) {
    wireObj.field0 = api2wire_RwLockPLazyFrame(apiObj.field0);
  }

  void _api_fill_to_wire_lazy_group_by(
      LazyGroupBy apiObj, wire_LazyGroupBy wireObj) {
    wireObj.field0 = api2wire_RwLockPLazyGroupBy(apiObj.field0);
  }

  void _api_fill_to_wire_literal_value(
      LiteralValue apiObj, wire_LiteralValue wireObj) {
    if (apiObj is LiteralValue_Boolean) {
      var pre_field0 = api2wire_bool(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_LiteralValue_Boolean();
      wireObj.kind.ref.Boolean.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Utf8) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_LiteralValue_Utf8();
      wireObj.kind.ref.Utf8.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Binary) {
      var pre_field0 = api2wire_uint_8_list(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_LiteralValue_Binary();
      wireObj.kind.ref.Binary.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt8) {
      var pre_field0 = api2wire_u8(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_LiteralValue_UInt8();
      wireObj.kind.ref.UInt8.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt16) {
      var pre_field0 = api2wire_u16(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_LiteralValue_UInt16();
      wireObj.kind.ref.UInt16.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt32) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_LiteralValue_UInt32();
      wireObj.kind.ref.UInt32.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt64) {
      var pre_field0 = api2wire_u64(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind = inner.inflate_LiteralValue_UInt64();
      wireObj.kind.ref.UInt64.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int8) {
      var pre_field0 = api2wire_i8(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_LiteralValue_Int8();
      wireObj.kind.ref.Int8.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int16) {
      var pre_field0 = api2wire_i16(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_LiteralValue_Int16();
      wireObj.kind.ref.Int16.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int32) {
      var pre_field0 = api2wire_i32(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind = inner.inflate_LiteralValue_Int32();
      wireObj.kind.ref.Int32.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int64) {
      var pre_field0 = api2wire_i64(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind = inner.inflate_LiteralValue_Int64();
      wireObj.kind.ref.Int64.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Float32) {
      var pre_field0 = api2wire_f32(apiObj.field0);
      wireObj.tag = 11;
      wireObj.kind = inner.inflate_LiteralValue_Float32();
      wireObj.kind.ref.Float32.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Float64) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 12;
      wireObj.kind = inner.inflate_LiteralValue_Float64();
      wireObj.kind.ref.Float64.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Range) {
      var pre_low = api2wire_i64(apiObj.low);
      var pre_high = api2wire_i64(apiObj.high);
      var pre_data_type = api2wire_box_autoadd_data_type(apiObj.dataType);
      wireObj.tag = 13;
      wireObj.kind = inner.inflate_LiteralValue_Range();
      wireObj.kind.ref.Range.ref.low = pre_low;
      wireObj.kind.ref.Range.ref.high = pre_high;
      wireObj.kind.ref.Range.ref.data_type = pre_data_type;
      return;
    }
    if (apiObj is LiteralValue_DateTime) {
      var pre_field0 = api2wire_Chrono_Naive(apiObj.field0);
      var pre_field1 = api2wire_time_unit(apiObj.field1);
      wireObj.tag = 14;
      wireObj.kind = inner.inflate_LiteralValue_DateTime();
      wireObj.kind.ref.DateTime.ref.field0 = pre_field0;
      wireObj.kind.ref.DateTime.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is LiteralValue_Duration) {
      var pre_field0 = api2wire_Chrono_Duration(apiObj.field0);
      var pre_field1 = api2wire_time_unit(apiObj.field1);
      wireObj.tag = 15;
      wireObj.kind = inner.inflate_LiteralValue_Duration();
      wireObj.kind.ref.Duration.ref.field0 = pre_field0;
      wireObj.kind.ref.Duration.ref.field1 = pre_field1;
      return;
    }
  }

  void _api_fill_to_wire_null_values(
      NullValues apiObj, wire_NullValues wireObj) {
    if (apiObj is NullValues_AllColumnsSingle) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_NullValues_AllColumnsSingle();
      wireObj.kind.ref.AllColumnsSingle.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is NullValues_AllColumns) {
      var pre_field0 = api2wire_StringList(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_NullValues_AllColumns();
      wireObj.kind.ref.AllColumns.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_row_count(RowCount apiObj, wire_RowCount wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.offset = api2wire_u32(apiObj.offset);
  }

  void _api_fill_to_wire_schema(Schema apiObj, wire_Schema wireObj) {
    wireObj.field0 = api2wire_RwLockPSchema(apiObj.field0);
  }

  void _api_fill_to_wire_series(Series apiObj, wire_Series wireObj) {
    wireObj.field0 = api2wire_RwLockPSeries(apiObj.field0);
  }

  void _api_fill_to_wire_sort_options(
      SortOptions apiObj, wire_SortOptions wireObj) {
    wireObj.descending = api2wire_bool(apiObj.descending);
    wireObj.nulls_last = api2wire_bool(apiObj.nullsLast);
  }

  void _api_fill_to_wire_uint_32_list(
      Uint32List apiObj, ffi.Pointer<wire_uint_32_list> wireObj) {
    throw UnimplementedError();
  }

  void _api_fill_to_wire_uint_8_list(
      Uint8List apiObj, ffi.Pointer<wire_uint_8_list> wireObj) {
    throw UnimplementedError();
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class PolarsWrapperWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PolarsWrapperWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PolarsWrapperWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_read_csv(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_Schema> dtypes,
    ffi.Pointer<wire_list_data_type> dtypes_slice,
    ffi.Pointer<ffi.Bool> has_header,
    ffi.Pointer<wire_StringList> columns,
    ffi.Pointer<ffi.Uint32> delimiter,
    ffi.Pointer<ffi.Uint32> comment_char,
    ffi.Pointer<ffi.Uint32> eol_char,
    ffi.Pointer<ffi.UintPtr> chunk_size,
    ffi.Pointer<ffi.UintPtr> sample_size,
    ffi.Pointer<wire_RowCount> row_count,
    ffi.Pointer<ffi.Int32> encoding,
    ffi.Pointer<ffi.UintPtr> n_rows,
    ffi.Pointer<ffi.UintPtr> n_threads,
    ffi.Pointer<wire_NullValues> null_values,
    ffi.Pointer<wire_uint_32_list> projection,
    ffi.Pointer<ffi.Uint32> quote_char,
    int skip_rows,
    int skip_rows_after_header,
    bool ignore_parser_errors,
    bool rechunk,
    bool parse_dates,
    bool low_memory,
  ) {
    return _wire_read_csv(
      port_,
      path,
      dtypes,
      dtypes_slice,
      has_header,
      columns,
      delimiter,
      comment_char,
      eol_char,
      chunk_size,
      sample_size,
      row_count,
      encoding,
      n_rows,
      n_threads,
      null_values,
      projection,
      quote_char,
      skip_rows,
      skip_rows_after_header,
      ignore_parser_errors,
      rechunk,
      parse_dates,
      low_memory,
    );
  }

  late final _wire_read_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Schema>,
              ffi.Pointer<wire_list_data_type>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_RowCount>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_NullValues>,
              ffi.Pointer<wire_uint_32_list>,
              ffi.Pointer<ffi.Uint32>,
              ffi.UintPtr,
              ffi.UintPtr,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool)>>('wire_read_csv');
  late final _wire_read_csv = _wire_read_csvPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_Schema>,
          ffi.Pointer<wire_list_data_type>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<wire_StringList>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_RowCount>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_NullValues>,
          ffi.Pointer<wire_uint_32_list>,
          ffi.Pointer<ffi.Uint32>,
          int,
          int,
          bool,
          bool,
          bool,
          bool)>();

  void wire_scan_csv(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_Schema> dtype_overwrite,
    ffi.Pointer<ffi.Bool> has_header,
    ffi.Pointer<ffi.Uint32> delimiter,
    ffi.Pointer<ffi.Uint32> comment_char,
    ffi.Pointer<ffi.Uint32> eol_char,
    ffi.Pointer<ffi.Uint32> quote_char,
    int skip_rows,
    int skip_rows_after_header,
    ffi.Pointer<wire_RowCount> row_count,
    ffi.Pointer<ffi.Int32> encoding,
    ffi.Pointer<ffi.UintPtr> n_rows,
    ffi.Pointer<wire_NullValues> null_values,
    bool ignore_parser_errors,
    bool rechunk,
    bool parse_dates,
    ffi.Pointer<ffi.UintPtr> infer_schema_length,
    bool cache,
  ) {
    return _wire_scan_csv(
      port_,
      path,
      dtype_overwrite,
      has_header,
      delimiter,
      comment_char,
      eol_char,
      quote_char,
      skip_rows,
      skip_rows_after_header,
      row_count,
      encoding,
      n_rows,
      null_values,
      ignore_parser_errors,
      rechunk,
      parse_dates,
      infer_schema_length,
      cache,
    );
  }

  late final _wire_scan_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Schema>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.UintPtr,
              ffi.UintPtr,
              ffi.Pointer<wire_RowCount>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_NullValues>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Bool)>>('wire_scan_csv');
  late final _wire_scan_csv = _wire_scan_csvPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_Schema>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          int,
          int,
          ffi.Pointer<wire_RowCount>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_NullValues>,
          bool,
          bool,
          bool,
          ffi.Pointer<ffi.UintPtr>,
          bool)>();

  void wire_read_json(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_Schema> schema,
    ffi.Pointer<ffi.UintPtr> batch_size,
    ffi.Pointer<wire_StringList> projection,
  ) {
    return _wire_read_json(
      port_,
      path,
      schema,
      batch_size,
      projection,
    );
  }

  late final _wire_read_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Schema>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_StringList>)>>('wire_read_json');
  late final _wire_read_json = _wire_read_jsonPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_Schema>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_StringList>)>();

  WireSyncReturn wire_of__static_method__DataFrame(
    ffi.Pointer<wire_list_series> series,
  ) {
    return _wire_of__static_method__DataFrame(
      series,
    );
  }

  late final _wire_of__static_method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_list_series>)>>(
      'wire_of__static_method__DataFrame');
  late final _wire_of__static_method__DataFrame =
      _wire_of__static_method__DataFramePtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_list_series>)>();

  void wire_iter__method__DataFrame(
    int port_,
    wire_DataFrame that,
  ) {
    return _wire_iter__method__DataFrame(
      port_,
      that,
    );
  }

  late final _wire_iter__method__DataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DataFrame)>>(
          'wire_iter__method__DataFrame');
  late final _wire_iter__method__DataFrame = _wire_iter__method__DataFramePtr
      .asFunction<void Function(int, wire_DataFrame)>();

  WireSyncReturn wire_column__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_uint_8_list> column,
  ) {
    return _wire_column__method__DataFrame(
      that,
      column,
    );
  }

  late final _wire_column__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_column__method__DataFrame');
  late final _wire_column__method__DataFrame =
      _wire_column__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_columns__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_StringList> columns,
  ) {
    return _wire_columns__method__DataFrame(
      that,
      columns,
    );
  }

  late final _wire_columns__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_DataFrame, ffi.Pointer<wire_StringList>)>>(
      'wire_columns__method__DataFrame');
  late final _wire_columns__method__DataFrame =
      _wire_columns__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_StringList>)>();

  WireSyncReturn wire_column_at__method__DataFrame(
    wire_DataFrame that,
    int index,
  ) {
    return _wire_column_at__method__DataFrame(
      that,
      index,
    );
  }

  late final _wire_column_at__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_DataFrame,
              ffi.UintPtr)>>('wire_column_at__method__DataFrame');
  late final _wire_column_at__method__DataFrame =
      _wire_column_at__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame, int)>();

  void wire_dump__method__DataFrame(
    int port_,
    wire_DataFrame that,
  ) {
    return _wire_dump__method__DataFrame(
      port_,
      that,
    );
  }

  late final _wire_dump__method__DataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DataFrame)>>(
          'wire_dump__method__DataFrame');
  late final _wire_dump__method__DataFrame = _wire_dump__method__DataFramePtr
      .asFunction<void Function(int, wire_DataFrame)>();

  WireSyncReturn wire_estimated_size__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_estimated_size__method__DataFrame(
      that,
    );
  }

  late final _wire_estimated_size__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_estimated_size__method__DataFrame');
  late final _wire_estimated_size__method__DataFrame =
      _wire_estimated_size__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  void wire_with_row_count__method__DataFrame(
    int port_,
    wire_DataFrame that,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _wire_with_row_count__method__DataFrame(
      port_,
      that,
      name,
      offset,
    );
  }

  late final _wire_with_row_count__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, wire_DataFrame,
                  ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Uint32>)>>(
      'wire_with_row_count__method__DataFrame');
  late final _wire_with_row_count__method__DataFrame =
      _wire_with_row_count__method__DataFramePtr.asFunction<
          void Function(int, wire_DataFrame, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Uint32>)>();

  WireSyncReturn wire_get_column_names__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_get_column_names__method__DataFrame(
      that,
    );
  }

  late final _wire_get_column_names__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_get_column_names__method__DataFrame');
  late final _wire_get_column_names__method__DataFrame =
      _wire_get_column_names__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  void wire_get_columns__method__DataFrame(
    int port_,
    wire_DataFrame that,
  ) {
    return _wire_get_columns__method__DataFrame(
      port_,
      that,
    );
  }

  late final _wire_get_columns__method__DataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DataFrame)>>(
          'wire_get_columns__method__DataFrame');
  late final _wire_get_columns__method__DataFrame =
      _wire_get_columns__method__DataFramePtr
          .asFunction<void Function(int, wire_DataFrame)>();

  WireSyncReturn wire_width__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_width__method__DataFrame(
      that,
    );
  }

  late final _wire_width__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_width__method__DataFrame');
  late final _wire_width__method__DataFrame = _wire_width__method__DataFramePtr
      .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  WireSyncReturn wire_height__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_height__method__DataFrame(
      that,
    );
  }

  late final _wire_height__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_height__method__DataFrame');
  late final _wire_height__method__DataFrame =
      _wire_height__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  WireSyncReturn wire_is_empty__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_is_empty__method__DataFrame(
      that,
    );
  }

  late final _wire_is_empty__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_is_empty__method__DataFrame');
  late final _wire_is_empty__method__DataFrame =
      _wire_is_empty__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  void wire_sample__method__DataFrame(
    int port_,
    wire_DataFrame that,
    int n,
    bool with_replacement,
    bool shuffle,
    ffi.Pointer<ffi.Uint64> seed,
  ) {
    return _wire_sample__method__DataFrame(
      port_,
      that,
      n,
      with_replacement,
      shuffle,
      seed,
    );
  }

  late final _wire_sample__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              wire_DataFrame,
              ffi.UintPtr,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.Uint64>)>>('wire_sample__method__DataFrame');
  late final _wire_sample__method__DataFrame =
      _wire_sample__method__DataFramePtr.asFunction<
          void Function(
              int, wire_DataFrame, int, bool, bool, ffi.Pointer<ffi.Uint64>)>();

  WireSyncReturn wire_select__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_StringList> columns,
  ) {
    return _wire_select__method__DataFrame(
      that,
      columns,
    );
  }

  late final _wire_select__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_DataFrame,
              ffi.Pointer<wire_StringList>)>>('wire_select__method__DataFrame');
  late final _wire_select__method__DataFrame =
      _wire_select__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_StringList>)>();

  WireSyncReturn wire_head__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_head__method__DataFrame(
      that,
      length,
    );
  }

  late final _wire_head__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_DataFrame,
              ffi.Pointer<ffi.UintPtr>)>>('wire_head__method__DataFrame');
  late final _wire_head__method__DataFrame =
      _wire_head__method__DataFramePtr.asFunction<
          WireSyncReturn Function(wire_DataFrame, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncReturn wire_tail__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_tail__method__DataFrame(
      that,
      length,
    );
  }

  late final _wire_tail__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_DataFrame,
              ffi.Pointer<ffi.UintPtr>)>>('wire_tail__method__DataFrame');
  late final _wire_tail__method__DataFrame =
      _wire_tail__method__DataFramePtr.asFunction<
          WireSyncReturn Function(wire_DataFrame, ffi.Pointer<ffi.UintPtr>)>();

  void wire_describe__method__DataFrame(
    int port_,
    wire_DataFrame that,
    ffi.Pointer<wire_float_64_list> percentiles,
  ) {
    return _wire_describe__method__DataFrame(
      port_,
      that,
      percentiles,
    );
  }

  late final _wire_describe__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, wire_DataFrame, ffi.Pointer<wire_float_64_list>)>>(
      'wire_describe__method__DataFrame');
  late final _wire_describe__method__DataFrame =
      _wire_describe__method__DataFramePtr.asFunction<
          void Function(
              int, wire_DataFrame, ffi.Pointer<wire_float_64_list>)>();

  WireSyncReturn wire_drop__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_uint_8_list> column,
  ) {
    return _wire_drop__method__DataFrame(
      that,
      column,
    );
  }

  late final _wire_drop__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_DataFrame,
              ffi.Pointer<wire_uint_8_list>)>>('wire_drop__method__DataFrame');
  late final _wire_drop__method__DataFrame =
      _wire_drop__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_drop_in_place__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_uint_8_list> column,
  ) {
    return _wire_drop_in_place__method__DataFrame(
      that,
      column,
    );
  }

  late final _wire_drop_in_place__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_drop_in_place__method__DataFrame');
  late final _wire_drop_in_place__method__DataFrame =
      _wire_drop_in_place__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_reverse__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_reverse__method__DataFrame(
      that,
    );
  }

  late final _wire_reverse__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_reverse__method__DataFrame');
  late final _wire_reverse__method__DataFrame =
      _wire_reverse__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  WireSyncReturn wire_shape__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_shape__method__DataFrame(
      that,
    );
  }

  late final _wire_shape__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_shape__method__DataFrame');
  late final _wire_shape__method__DataFrame = _wire_shape__method__DataFramePtr
      .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  void wire_max__method__DataFrame(
    int port_,
    wire_DataFrame that,
  ) {
    return _wire_max__method__DataFrame(
      port_,
      that,
    );
  }

  late final _wire_max__method__DataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DataFrame)>>(
          'wire_max__method__DataFrame');
  late final _wire_max__method__DataFrame = _wire_max__method__DataFramePtr
      .asFunction<void Function(int, wire_DataFrame)>();

  void wire_get_row__method__DataFrame(
    int port_,
    wire_DataFrame that,
    int index,
  ) {
    return _wire_get_row__method__DataFrame(
      port_,
      that,
      index,
    );
  }

  late final _wire_get_row__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_DataFrame,
              ffi.UintPtr)>>('wire_get_row__method__DataFrame');
  late final _wire_get_row__method__DataFrame =
      _wire_get_row__method__DataFramePtr
          .asFunction<void Function(int, wire_DataFrame, int)>();

  WireSyncReturn wire_schema__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_schema__method__DataFrame(
      that,
    );
  }

  late final _wire_schema__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_schema__method__DataFrame');
  late final _wire_schema__method__DataFrame =
      _wire_schema__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  WireSyncReturn wire_dtypes__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_dtypes__method__DataFrame(
      that,
    );
  }

  late final _wire_dtypes__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_dtypes__method__DataFrame');
  late final _wire_dtypes__method__DataFrame =
      _wire_dtypes__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  WireSyncReturn wire_lazy__method__take_self__DataFrame(
    wire_DataFrame that,
    bool allow_copy,
    ffi.Pointer<ffi.Bool> projection_pushdown,
    ffi.Pointer<ffi.Bool> predicate_pushdown,
    ffi.Pointer<ffi.Bool> type_coercion,
    ffi.Pointer<ffi.Bool> simplify_expressions,
    ffi.Pointer<ffi.Bool> slice_pushdown,
    ffi.Pointer<ffi.Bool> streaming,
  ) {
    return _wire_lazy__method__take_self__DataFrame(
      that,
      allow_copy,
      projection_pushdown,
      predicate_pushdown,
      type_coercion,
      simplify_expressions,
      slice_pushdown,
      streaming,
    );
  }

  late final _wire_lazy__method__take_self__DataFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_DataFrame,
                  ffi.Bool,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>)>>(
      'wire_lazy__method__take_self__DataFrame');
  late final _wire_lazy__method__take_self__DataFrame =
      _wire_lazy__method__take_self__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame,
              bool,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>();

  WireSyncReturn wire_select__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> exprs,
  ) {
    return _wire_select__method__take_self__LazyFrame(
      that,
      exprs,
    );
  }

  late final _wire_select__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame, ffi.Pointer<wire_list_expr>)>>(
      'wire_select__method__take_self__LazyFrame');
  late final _wire_select__method__take_self__LazyFrame =
      _wire_select__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_filter__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_Expr pred,
  ) {
    return _wire_filter__method__take_self__LazyFrame(
      that,
      pred,
    );
  }

  late final _wire_filter__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              wire_Expr)>>('wire_filter__method__take_self__LazyFrame');
  late final _wire_filter__method__take_self__LazyFrame =
      _wire_filter__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, wire_Expr)>();

  WireSyncReturn wire_groupby__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> exprs,
    bool stable,
  ) {
    return _wire_groupby__method__take_self__LazyFrame(
      that,
      exprs,
      stable,
    );
  }

  late final _wire_groupby__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, ffi.Pointer<wire_list_expr>,
              ffi.Bool)>>('wire_groupby__method__take_self__LazyFrame');
  late final _wire_groupby__method__take_self__LazyFrame =
      _wire_groupby__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>, bool)>();

  WireSyncReturn wire_reverse__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_reverse__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_reverse__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_reverse__method__take_self__LazyFrame');
  late final _wire_reverse__method__take_self__LazyFrame =
      _wire_reverse__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_with_column__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_Expr expr,
  ) {
    return _wire_with_column__method__take_self__LazyFrame(
      that,
      expr,
    );
  }

  late final _wire_with_column__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              wire_Expr)>>('wire_with_column__method__take_self__LazyFrame');
  late final _wire_with_column__method__take_self__LazyFrame =
      _wire_with_column__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, wire_Expr)>();

  WireSyncReturn wire_with_columns__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> expr,
  ) {
    return _wire_with_columns__method__take_self__LazyFrame(
      that,
      expr,
    );
  }

  late final _wire_with_columns__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame, ffi.Pointer<wire_list_expr>)>>(
      'wire_with_columns__method__take_self__LazyFrame');
  late final _wire_with_columns__method__take_self__LazyFrame =
      _wire_with_columns__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_cache__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_cache__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_cache__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_cache__method__take_self__LazyFrame');
  late final _wire_cache__method__take_self__LazyFrame =
      _wire_cache__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  void wire_collect__method__take_self__LazyFrame(
    int port_,
    wire_LazyFrame that,
  ) {
    return _wire_collect__method__take_self__LazyFrame(
      port_,
      that,
    );
  }

  late final _wire_collect__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LazyFrame)>>(
          'wire_collect__method__take_self__LazyFrame');
  late final _wire_collect__method__take_self__LazyFrame =
      _wire_collect__method__take_self__LazyFramePtr
          .asFunction<void Function(int, wire_LazyFrame)>();

  WireSyncReturn wire_cross_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
  ) {
    return _wire_cross_join__method__take_self__LazyFrame(
      that,
      other,
    );
  }

  late final _wire_cross_join__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame)>>(
      'wire_cross_join__method__take_self__LazyFrame');
  late final _wire_cross_join__method__take_self__LazyFrame =
      _wire_cross_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame)>();

  WireSyncReturn wire_left_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
    wire_Expr left_on,
    wire_Expr right_on,
  ) {
    return _wire_left_join__method__take_self__LazyFrame(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_left_join__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame, wire_Expr,
              wire_Expr)>>('wire_left_join__method__take_self__LazyFrame');
  late final _wire_left_join__method__take_self__LazyFrame =
      _wire_left_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, wire_LazyFrame, wire_Expr, wire_Expr)>();

  WireSyncReturn wire_outer_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
    wire_Expr left_on,
    wire_Expr right_on,
  ) {
    return _wire_outer_join__method__take_self__LazyFrame(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_outer_join__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame, wire_Expr,
              wire_Expr)>>('wire_outer_join__method__take_self__LazyFrame');
  late final _wire_outer_join__method__take_self__LazyFrame =
      _wire_outer_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, wire_LazyFrame, wire_Expr, wire_Expr)>();

  WireSyncReturn wire_inner_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
    wire_Expr left_on,
    wire_Expr right_on,
  ) {
    return _wire_inner_join__method__take_self__LazyFrame(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_inner_join__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame, wire_Expr,
              wire_Expr)>>('wire_inner_join__method__take_self__LazyFrame');
  late final _wire_inner_join__method__take_self__LazyFrame =
      _wire_inner_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, wire_LazyFrame, wire_Expr, wire_Expr)>();

  WireSyncReturn wire_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
    ffi.Pointer<wire_list_expr> on1,
    ffi.Pointer<wire_list_expr> left_on,
    ffi.Pointer<wire_list_expr> right_on,
    ffi.Pointer<wire_uint_8_list> suffix,
    int how,
    bool allow_parallel,
    bool force_parallel,
  ) {
    return _wire_join__method__take_self__LazyFrame(
      that,
      other,
      on1,
      left_on,
      right_on,
      suffix,
      how,
      allow_parallel,
      force_parallel,
    );
  }

  late final _wire_join__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_LazyFrame,
              wire_LazyFrame,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool)>>('wire_join__method__take_self__LazyFrame');
  late final _wire_join__method__take_self__LazyFrame =
      _wire_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame,
              wire_LazyFrame,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              bool,
              bool)>();

  WireSyncReturn wire_max__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_max__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_max__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_max__method__take_self__LazyFrame');
  late final _wire_max__method__take_self__LazyFrame =
      _wire_max__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_min__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_min__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_min__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_min__method__take_self__LazyFrame');
  late final _wire_min__method__take_self__LazyFrame =
      _wire_min__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_sum__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_sum__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_sum__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_sum__method__take_self__LazyFrame');
  late final _wire_sum__method__take_self__LazyFrame =
      _wire_sum__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_mean__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_mean__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_mean__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_mean__method__take_self__LazyFrame');
  late final _wire_mean__method__take_self__LazyFrame =
      _wire_mean__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_median__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_median__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_median__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_median__method__take_self__LazyFrame');
  late final _wire_median__method__take_self__LazyFrame =
      _wire_median__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_quantile__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_Expr quantile,
    int interpol,
  ) {
    return _wire_quantile__method__take_self__LazyFrame(
      that,
      quantile,
      interpol,
    );
  }

  late final _wire_quantile__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_Expr,
              ffi.Int32)>>('wire_quantile__method__take_self__LazyFrame');
  late final _wire_quantile__method__take_self__LazyFrame =
      _wire_quantile__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_Expr, int)>();

  WireSyncReturn wire_std__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int ddof,
  ) {
    return _wire_std__method__take_self__LazyFrame(
      that,
      ddof,
    );
  }

  late final _wire_std__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              ffi.Uint8)>>('wire_std__method__take_self__LazyFrame');
  late final _wire_std__method__take_self__LazyFrame =
      _wire_std__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int)>();

  WireSyncReturn wire_variance__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int ddof,
  ) {
    return _wire_variance__method__take_self__LazyFrame(
      that,
      ddof,
    );
  }

  late final _wire_variance__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              ffi.Uint8)>>('wire_variance__method__take_self__LazyFrame');
  late final _wire_variance__method__take_self__LazyFrame =
      _wire_variance__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int)>();

  WireSyncReturn wire_explode__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> columns,
  ) {
    return _wire_explode__method__take_self__LazyFrame(
      that,
      columns,
    );
  }

  late final _wire_explode__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame, ffi.Pointer<wire_list_expr>)>>(
      'wire_explode__method__take_self__LazyFrame');
  late final _wire_explode__method__take_self__LazyFrame =
      _wire_explode__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_unique__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_StringList> subset,
    int keep_strategy,
  ) {
    return _wire_unique__method__take_self__LazyFrame(
      that,
      subset,
      keep_strategy,
    );
  }

  late final _wire_unique__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, ffi.Pointer<wire_StringList>,
              ffi.Int32)>>('wire_unique__method__take_self__LazyFrame');
  late final _wire_unique__method__take_self__LazyFrame =
      _wire_unique__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_StringList>, int)>();

  WireSyncReturn wire_drop_nulls__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> subset,
  ) {
    return _wire_drop_nulls__method__take_self__LazyFrame(
      that,
      subset,
    );
  }

  late final _wire_drop_nulls__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame, ffi.Pointer<wire_list_expr>)>>(
      'wire_drop_nulls__method__take_self__LazyFrame');
  late final _wire_drop_nulls__method__take_self__LazyFrame =
      _wire_drop_nulls__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_slice__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int offset,
    int len,
  ) {
    return _wire_slice__method__take_self__LazyFrame(
      that,
      offset,
      len,
    );
  }

  late final _wire_slice__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, ffi.Int64,
              ffi.Uint32)>>('wire_slice__method__take_self__LazyFrame');
  late final _wire_slice__method__take_self__LazyFrame =
      _wire_slice__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int, int)>();

  WireSyncReturn wire_first__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_first__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_first__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_first__method__take_self__LazyFrame');
  late final _wire_first__method__take_self__LazyFrame =
      _wire_first__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_last__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_last__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_last__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_last__method__take_self__LazyFrame');
  late final _wire_last__method__take_self__LazyFrame =
      _wire_last__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_tail__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int n,
  ) {
    return _wire_tail__method__take_self__LazyFrame(
      that,
      n,
    );
  }

  late final _wire_tail__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              ffi.Uint32)>>('wire_tail__method__take_self__LazyFrame');
  late final _wire_tail__method__take_self__LazyFrame =
      _wire_tail__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int)>();

  WireSyncReturn wire_melt__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_StringList> id_vars,
    ffi.Pointer<wire_StringList> value_vars,
    ffi.Pointer<wire_uint_8_list> variable_name,
    ffi.Pointer<wire_uint_8_list> value_name,
  ) {
    return _wire_melt__method__take_self__LazyFrame(
      that,
      id_vars,
      value_vars,
      variable_name,
      value_name,
    );
  }

  late final _wire_melt__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame,
                  ffi.Pointer<wire_StringList>,
                  ffi.Pointer<wire_StringList>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_melt__method__take_self__LazyFrame');
  late final _wire_melt__method__take_self__LazyFrame =
      _wire_melt__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_limit__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int n,
  ) {
    return _wire_limit__method__take_self__LazyFrame(
      that,
      n,
    );
  }

  late final _wire_limit__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              ffi.Uint32)>>('wire_limit__method__take_self__LazyFrame');
  late final _wire_limit__method__take_self__LazyFrame =
      _wire_limit__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int)>();

  void wire_fetch__method__take_self__LazyFrame(
    int port_,
    wire_LazyFrame that,
    int n_rows,
  ) {
    return _wire_fetch__method__take_self__LazyFrame(
      port_,
      that,
      n_rows,
    );
  }

  late final _wire_fetch__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_LazyFrame,
              ffi.UintPtr)>>('wire_fetch__method__take_self__LazyFrame');
  late final _wire_fetch__method__take_self__LazyFrame =
      _wire_fetch__method__take_self__LazyFramePtr
          .asFunction<void Function(int, wire_LazyFrame, int)>();

  WireSyncReturn wire_with_row_count__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _wire_with_row_count__method__take_self__LazyFrame(
      that,
      name,
      offset,
    );
  }

  late final _wire_with_row_count__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_LazyFrame,
                  ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Uint32>)>>(
      'wire_with_row_count__method__take_self__LazyFrame');
  late final _wire_with_row_count__method__take_self__LazyFrame =
      _wire_with_row_count__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(wire_LazyFrame, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Uint32>)>();

  WireSyncReturn wire_of_strings__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_list_opt_String> values,
  ) {
    return _wire_of_strings__static_method__Series(
      name,
      values,
    );
  }

  late final _wire_of_strings__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_list_opt_String>)>>(
      'wire_of_strings__static_method__Series');
  late final _wire_of_strings__static_method__Series =
      _wire_of_strings__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_list_opt_String>)>();

  WireSyncReturn wire_of_i32__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_list_opt_i32> values,
  ) {
    return _wire_of_i32__static_method__Series(
      name,
      values,
    );
  }

  late final _wire_of_i32__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_list_opt_i32>)>>(
      'wire_of_i32__static_method__Series');
  late final _wire_of_i32__static_method__Series =
      _wire_of_i32__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_list_opt_i32>)>();

  WireSyncReturn wire_of_ints__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_list_opt_i64> values,
  ) {
    return _wire_of_ints__static_method__Series(
      name,
      values,
    );
  }

  late final _wire_of_ints__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_list_opt_i64>)>>(
      'wire_of_ints__static_method__Series');
  late final _wire_of_ints__static_method__Series =
      _wire_of_ints__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_list_opt_i64>)>();

  WireSyncReturn wire_of_durations__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_list_opt_Chrono_Duration> values,
    int unit,
  ) {
    return _wire_of_durations__static_method__Series(
      name,
      values,
      unit,
    );
  }

  late final _wire_of_durations__static_method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_list_opt_Chrono_Duration>,
              ffi.Int32)>>('wire_of_durations__static_method__Series');
  late final _wire_of_durations__static_method__Series =
      _wire_of_durations__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_list_opt_Chrono_Duration>, int)>();

  WireSyncReturn wire_of_doubles__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_list_opt_f64> values,
  ) {
    return _wire_of_doubles__static_method__Series(
      name,
      values,
    );
  }

  late final _wire_of_doubles__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_list_opt_f64>)>>(
      'wire_of_doubles__static_method__Series');
  late final _wire_of_doubles__static_method__Series =
      _wire_of_doubles__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_list_opt_f64>)>();

  void wire_append__method__Series(
    int port_,
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_append__method__Series(
      port_,
      that,
      other,
    );
  }

  late final _wire_append__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              wire_Series)>>('wire_append__method__Series');
  late final _wire_append__method__Series = _wire_append__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, wire_Series)>();

  void wire_cast__method__Series(
    int port_,
    wire_Series that,
    wire_DataType dtype,
    bool strict,
  ) {
    return _wire_cast__method__Series(
      port_,
      that,
      dtype,
      strict,
    );
  }

  late final _wire_cast__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series, wire_DataType,
              ffi.Bool)>>('wire_cast__method__Series');
  late final _wire_cast__method__Series = _wire_cast__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, wire_DataType, bool)>();

  void wire_as_strings__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_strings__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_strings__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_strings__method__Series');
  late final _wire_as_strings__method__Series =
      _wire_as_strings__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_as_ints__method__Series(
    int port_,
    wire_Series that,
    bool strict,
  ) {
    return _wire_as_ints__method__Series(
      port_,
      that,
      strict,
    );
  }

  late final _wire_as_ints__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_as_ints__method__Series');
  late final _wire_as_ints__method__Series = _wire_as_ints__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_as_doubles__method__Series(
    int port_,
    wire_Series that,
    bool strict,
  ) {
    return _wire_as_doubles__method__Series(
      port_,
      that,
      strict,
    );
  }

  late final _wire_as_doubles__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_as_doubles__method__Series');
  late final _wire_as_doubles__method__Series =
      _wire_as_doubles__method__SeriesPtr
          .asFunction<void Function(int, wire_Series, bool)>();

  void wire_as_durations__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_durations__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_durations__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_durations__method__Series');
  late final _wire_as_durations__method__Series =
      _wire_as_durations__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_as_naive_datetime__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_naive_datetime__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_naive_datetime__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_naive_datetime__method__Series');
  late final _wire_as_naive_datetime__method__Series =
      _wire_as_naive_datetime__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_as_utc_datetime__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_utc_datetime__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_utc_datetime__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_utc_datetime__method__Series');
  late final _wire_as_utc_datetime__method__Series =
      _wire_as_utc_datetime__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_as_local_datetime__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_local_datetime__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_local_datetime__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_local_datetime__method__Series');
  late final _wire_as_local_datetime__method__Series =
      _wire_as_local_datetime__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_abs__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_abs__method__Series(
      port_,
      that,
    );
  }

  late final _wire_abs__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_abs__method__Series');
  late final _wire_abs__method__Series = _wire_abs__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_sort__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_sort__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_sort__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, wire_Series, ffi.Bool)>>('wire_sort__method__Series');
  late final _wire_sort__method__Series = _wire_sort__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_shuffle__method__Series(
    int port_,
    wire_Series that,
    ffi.Pointer<ffi.Uint64> seed,
  ) {
    return _wire_shuffle__method__Series(
      port_,
      that,
      seed,
    );
  }

  late final _wire_shuffle__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Pointer<ffi.Uint64>)>>('wire_shuffle__method__Series');
  late final _wire_shuffle__method__Series = _wire_shuffle__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, ffi.Pointer<ffi.Uint64>)>();

  void wire_sum__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_sum__method__Series(
      port_,
      that,
    );
  }

  late final _wire_sum__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_sum__method__Series');
  late final _wire_sum__method__Series = _wire_sum__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_sum_as_series__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_sum_as_series__method__Series(
      port_,
      that,
    );
  }

  late final _wire_sum_as_series__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_sum_as_series__method__Series');
  late final _wire_sum_as_series__method__Series =
      _wire_sum_as_series__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_min__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_min__method__Series(
      port_,
      that,
    );
  }

  late final _wire_min__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_min__method__Series');
  late final _wire_min__method__Series = _wire_min__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_max__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_max__method__Series(
      port_,
      that,
    );
  }

  late final _wire_max__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_max__method__Series');
  late final _wire_max__method__Series = _wire_max__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_explode__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_explode__method__Series(
      port_,
      that,
    );
  }

  late final _wire_explode__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_explode__method__Series');
  late final _wire_explode__method__Series = _wire_explode__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_explode_by_offsets__method__Series(
    int port_,
    wire_Series that,
    ffi.Pointer<wire_int_64_list> offsets,
  ) {
    return _wire_explode_by_offsets__method__Series(
      port_,
      that,
      offsets,
    );
  }

  late final _wire_explode_by_offsets__method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, wire_Series, ffi.Pointer<wire_int_64_list>)>>(
      'wire_explode_by_offsets__method__Series');
  late final _wire_explode_by_offsets__method__Series =
      _wire_explode_by_offsets__method__SeriesPtr.asFunction<
          void Function(int, wire_Series, ffi.Pointer<wire_int_64_list>)>();

  void wire_cummax__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_cummax__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_cummax__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_cummax__method__Series');
  late final _wire_cummax__method__Series = _wire_cummax__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_cummin__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_cummin__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_cummin__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_cummin__method__Series');
  late final _wire_cummin__method__Series = _wire_cummin__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_cumprod__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_cumprod__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_cumprod__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_cumprod__method__Series');
  late final _wire_cumprod__method__Series = _wire_cumprod__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_cumsum__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_cumsum__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_cumsum__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_cumsum__method__Series');
  late final _wire_cumsum__method__Series = _wire_cumsum__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_product__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_product__method__Series(
      port_,
      that,
    );
  }

  late final _wire_product__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_product__method__Series');
  late final _wire_product__method__Series = _wire_product__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  WireSyncReturn wire_get_string__method__Series(
    wire_Series that,
    int index,
  ) {
    return _wire_get_string__method__Series(
      that,
      index,
    );
  }

  late final _wire_get_string__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, ffi.UintPtr)>>('wire_get_string__method__Series');
  late final _wire_get_string__method__Series =
      _wire_get_string__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series, int)>();

  WireSyncReturn wire_get__method__Series(
    wire_Series that,
    int index,
  ) {
    return _wire_get__method__Series(
      that,
      index,
    );
  }

  late final _wire_get__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, ffi.UintPtr)>>('wire_get__method__Series');
  late final _wire_get__method__Series = _wire_get__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, int)>();

  WireSyncReturn wire_head__method__Series(
    wire_Series that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_head__method__Series(
      that,
      length,
    );
  }

  late final _wire_head__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_Series,
              ffi.Pointer<ffi.UintPtr>)>>('wire_head__method__Series');
  late final _wire_head__method__Series =
      _wire_head__method__SeriesPtr.asFunction<
          WireSyncReturn Function(wire_Series, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncReturn wire_tail__method__Series(
    wire_Series that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_tail__method__Series(
      that,
      length,
    );
  }

  late final _wire_tail__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_Series,
              ffi.Pointer<ffi.UintPtr>)>>('wire_tail__method__Series');
  late final _wire_tail__method__Series =
      _wire_tail__method__SeriesPtr.asFunction<
          WireSyncReturn Function(wire_Series, ffi.Pointer<ffi.UintPtr>)>();

  void wire_mean__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_mean__method__Series(
      port_,
      that,
    );
  }

  late final _wire_mean__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_mean__method__Series');
  late final _wire_mean__method__Series = _wire_mean__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_median__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_median__method__Series(
      port_,
      that,
    );
  }

  late final _wire_median__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_median__method__Series');
  late final _wire_median__method__Series = _wire_median__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_mean_as_series__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_mean_as_series__method__Series(
      port_,
      that,
    );
  }

  late final _wire_mean_as_series__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_mean_as_series__method__Series');
  late final _wire_mean_as_series__method__Series =
      _wire_mean_as_series__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_median_as_series__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_median_as_series__method__Series(
      port_,
      that,
    );
  }

  late final _wire_median_as_series__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_median_as_series__method__Series');
  late final _wire_median_as_series__method__Series =
      _wire_median_as_series__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  WireSyncReturn wire_estimated_size__method__Series(
    wire_Series that,
  ) {
    return _wire_estimated_size__method__Series(
      that,
    );
  }

  late final _wire_estimated_size__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_estimated_size__method__Series');
  late final _wire_estimated_size__method__Series =
      _wire_estimated_size__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series)>();

  WireSyncReturn wire_add_to__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_add_to__method__Series(
      that,
      other,
    );
  }

  late final _wire_add_to__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_add_to__method__Series');
  late final _wire_add_to__method__Series = _wire_add_to__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_subtract__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_subtract__method__Series(
      that,
      other,
    );
  }

  late final _wire_subtract__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_subtract__method__Series');
  late final _wire_subtract__method__Series = _wire_subtract__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_multiply__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_multiply__method__Series(
      that,
      other,
    );
  }

  late final _wire_multiply__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_multiply__method__Series');
  late final _wire_multiply__method__Series = _wire_multiply__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_divide__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_divide__method__Series(
      that,
      other,
    );
  }

  late final _wire_divide__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_divide__method__Series');
  late final _wire_divide__method__Series = _wire_divide__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_remainder__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_remainder__method__Series(
      that,
      other,
    );
  }

  late final _wire_remainder__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_remainder__method__Series');
  late final _wire_remainder__method__Series =
      _wire_remainder__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_is_bool__method__Series(
    wire_Series that,
  ) {
    return _wire_is_bool__method__Series(
      that,
    );
  }

  late final _wire_is_bool__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_is_bool__method__Series');
  late final _wire_is_bool__method__Series = _wire_is_bool__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series)>();

  WireSyncReturn wire_is_utf8__method__Series(
    wire_Series that,
  ) {
    return _wire_is_utf8__method__Series(
      that,
    );
  }

  late final _wire_is_utf8__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_is_utf8__method__Series');
  late final _wire_is_utf8__method__Series = _wire_is_utf8__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series)>();

  WireSyncReturn wire_is_numeric__method__Series(
    wire_Series that,
  ) {
    return _wire_is_numeric__method__Series(
      that,
    );
  }

  late final _wire_is_numeric__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_is_numeric__method__Series');
  late final _wire_is_numeric__method__Series =
      _wire_is_numeric__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series)>();

  WireSyncReturn wire_is_temporal__method__Series(
    wire_Series that,
  ) {
    return _wire_is_temporal__method__Series(
      that,
    );
  }

  late final _wire_is_temporal__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_is_temporal__method__Series');
  late final _wire_is_temporal__method__Series =
      _wire_is_temporal__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series)>();

  void wire_dump__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_dump__method__Series(
      port_,
      that,
    );
  }

  late final _wire_dump__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_dump__method__Series');
  late final _wire_dump__method__Series = _wire_dump__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  WireSyncReturn wire_rename__method__Series(
    wire_Series that,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_rename__method__Series(
      that,
      name,
    );
  }

  late final _wire_rename__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_Series,
              ffi.Pointer<wire_uint_8_list>)>>('wire_rename__method__Series');
  late final _wire_rename__method__Series =
      _wire_rename__method__SeriesPtr.asFunction<
          WireSyncReturn Function(
              wire_Series, ffi.Pointer<wire_uint_8_list>)>();

  void wire_unique__method__Series(
    int port_,
    wire_Series that,
    bool stable,
  ) {
    return _wire_unique__method__Series(
      port_,
      that,
      stable,
    );
  }

  late final _wire_unique__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_unique__method__Series');
  late final _wire_unique__method__Series = _wire_unique__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_equal__method__Series(
    int port_,
    wire_Series that,
    wire_Series other,
    bool ignore_null,
  ) {
    return _wire_equal__method__Series(
      port_,
      that,
      other,
      ignore_null,
    );
  }

  late final _wire_equal__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series, wire_Series,
              ffi.Bool)>>('wire_equal__method__Series');
  late final _wire_equal__method__Series = _wire_equal__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, wire_Series, bool)>();

  void wire_apply_scalar__method__Series(
    int port_,
    wire_Series that,
    int op,
    double value,
  ) {
    return _wire_apply_scalar__method__Series(
      port_,
      that,
      op,
      value,
    );
  }

  late final _wire_apply_scalar__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series, ffi.Int32,
              ffi.Double)>>('wire_apply_scalar__method__Series');
  late final _wire_apply_scalar__method__Series =
      _wire_apply_scalar__method__SeriesPtr
          .asFunction<void Function(int, wire_Series, int, double)>();

  void wire_reshape__method__Series(
    int port_,
    wire_Series that,
    ffi.Pointer<wire_int_64_list> dims,
  ) {
    return _wire_reshape__method__Series(
      port_,
      that,
      dims,
    );
  }

  late final _wire_reshape__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Pointer<wire_int_64_list>)>>('wire_reshape__method__Series');
  late final _wire_reshape__method__Series =
      _wire_reshape__method__SeriesPtr.asFunction<
          void Function(int, wire_Series, ffi.Pointer<wire_int_64_list>)>();

  void wire_std_as_series__method__Series(
    int port_,
    wire_Series that,
    int ddof,
  ) {
    return _wire_std_as_series__method__Series(
      port_,
      that,
      ddof,
    );
  }

  late final _wire_std_as_series__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Uint8)>>('wire_std_as_series__method__Series');
  late final _wire_std_as_series__method__Series =
      _wire_std_as_series__method__SeriesPtr
          .asFunction<void Function(int, wire_Series, int)>();

  void wire_var_as_series__method__Series(
    int port_,
    wire_Series that,
    int ddof,
  ) {
    return _wire_var_as_series__method__Series(
      port_,
      that,
      ddof,
    );
  }

  late final _wire_var_as_series__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Uint8)>>('wire_var_as_series__method__Series');
  late final _wire_var_as_series__method__Series =
      _wire_var_as_series__method__SeriesPtr
          .asFunction<void Function(int, wire_Series, int)>();

  void wire_to_list__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_to_list__method__Series(
      port_,
      that,
    );
  }

  late final _wire_to_list__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_to_list__method__Series');
  late final _wire_to_list__method__Series = _wire_to_list__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  WireSyncReturn wire_into_frame__method__take_self__Series(
    wire_Series that,
  ) {
    return _wire_into_frame__method__take_self__Series(
      that,
    );
  }

  late final _wire_into_frame__method__take_self__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_into_frame__method__take_self__Series');
  late final _wire_into_frame__method__take_self__Series =
      _wire_into_frame__method__take_self__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series)>();

  void wire_iter__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_iter__method__Series(
      port_,
      that,
    );
  }

  late final _wire_iter__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_iter__method__Series');
  late final _wire_iter__method__Series = _wire_iter__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  WireSyncReturn wire_agg__method__take_self__LazyGroupBy(
    wire_LazyGroupBy that,
    ffi.Pointer<wire_list_expr> exprs,
  ) {
    return _wire_agg__method__take_self__LazyGroupBy(
      that,
      exprs,
    );
  }

  late final _wire_agg__method__take_self__LazyGroupByPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyGroupBy, ffi.Pointer<wire_list_expr>)>>(
      'wire_agg__method__take_self__LazyGroupBy');
  late final _wire_agg__method__take_self__LazyGroupBy =
      _wire_agg__method__take_self__LazyGroupByPtr.asFunction<
          WireSyncReturn Function(
              wire_LazyGroupBy, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_head__method__take_self__LazyGroupBy(
    wire_LazyGroupBy that,
    ffi.Pointer<ffi.UintPtr> n,
  ) {
    return _wire_head__method__take_self__LazyGroupBy(
      that,
      n,
    );
  }

  late final _wire_head__method__take_self__LazyGroupByPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyGroupBy, ffi.Pointer<ffi.UintPtr>)>>(
      'wire_head__method__take_self__LazyGroupBy');
  late final _wire_head__method__take_self__LazyGroupBy =
      _wire_head__method__take_self__LazyGroupByPtr.asFunction<
          WireSyncReturn Function(
              wire_LazyGroupBy, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncReturn wire_tail__method__take_self__LazyGroupBy(
    wire_LazyGroupBy that,
    ffi.Pointer<ffi.UintPtr> n,
  ) {
    return _wire_tail__method__take_self__LazyGroupBy(
      that,
      n,
    );
  }

  late final _wire_tail__method__take_self__LazyGroupByPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyGroupBy, ffi.Pointer<ffi.UintPtr>)>>(
      'wire_tail__method__take_self__LazyGroupBy');
  late final _wire_tail__method__take_self__LazyGroupBy =
      _wire_tail__method__take_self__LazyGroupByPtr.asFunction<
          WireSyncReturn Function(
              wire_LazyGroupBy, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncReturn wire_of__static_method__Schema(
    ffi.Pointer<wire_list_field> fields,
  ) {
    return _wire_of__static_method__Schema(
      fields,
    );
  }

  late final _wire_of__static_method__SchemaPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_list_field>)>>('wire_of__static_method__Schema');
  late final _wire_of__static_method__Schema =
      _wire_of__static_method__SchemaPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_list_field>)>();

  wire_RwLockPDataFrame new_RwLockPDataFrame() {
    return _new_RwLockPDataFrame();
  }

  late final _new_RwLockPDataFramePtr =
      _lookup<ffi.NativeFunction<wire_RwLockPDataFrame Function()>>(
          'new_RwLockPDataFrame');
  late final _new_RwLockPDataFrame =
      _new_RwLockPDataFramePtr.asFunction<wire_RwLockPDataFrame Function()>();

  wire_RwLockPLazyFrame new_RwLockPLazyFrame() {
    return _new_RwLockPLazyFrame();
  }

  late final _new_RwLockPLazyFramePtr =
      _lookup<ffi.NativeFunction<wire_RwLockPLazyFrame Function()>>(
          'new_RwLockPLazyFrame');
  late final _new_RwLockPLazyFrame =
      _new_RwLockPLazyFramePtr.asFunction<wire_RwLockPLazyFrame Function()>();

  wire_RwLockPLazyGroupBy new_RwLockPLazyGroupBy() {
    return _new_RwLockPLazyGroupBy();
  }

  late final _new_RwLockPLazyGroupByPtr =
      _lookup<ffi.NativeFunction<wire_RwLockPLazyGroupBy Function()>>(
          'new_RwLockPLazyGroupBy');
  late final _new_RwLockPLazyGroupBy = _new_RwLockPLazyGroupByPtr
      .asFunction<wire_RwLockPLazyGroupBy Function()>();

  wire_RwLockPSchema new_RwLockPSchema() {
    return _new_RwLockPSchema();
  }

  late final _new_RwLockPSchemaPtr =
      _lookup<ffi.NativeFunction<wire_RwLockPSchema Function()>>(
          'new_RwLockPSchema');
  late final _new_RwLockPSchema =
      _new_RwLockPSchemaPtr.asFunction<wire_RwLockPSchema Function()>();

  wire_RwLockPSeries new_RwLockPSeries() {
    return _new_RwLockPSeries();
  }

  late final _new_RwLockPSeriesPtr =
      _lookup<ffi.NativeFunction<wire_RwLockPSeries Function()>>(
          'new_RwLockPSeries');
  late final _new_RwLockPSeries =
      _new_RwLockPSeriesPtr.asFunction<wire_RwLockPSeries Function()>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  wire_AggExpr new_agg_expr_0() {
    return _new_agg_expr_0();
  }

  late final _new_agg_expr_0Ptr =
      _lookup<ffi.NativeFunction<wire_AggExpr Function()>>('new_agg_expr_0');
  late final _new_agg_expr_0 =
      _new_agg_expr_0Ptr.asFunction<wire_AggExpr Function()>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_Chrono_Duration_0(
    int value,
  ) {
    return _new_box_autoadd_Chrono_Duration_0(
      value,
    );
  }

  late final _new_box_autoadd_Chrono_Duration_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'new_box_autoadd_Chrono_Duration_0');
  late final _new_box_autoadd_Chrono_Duration_0 =
      _new_box_autoadd_Chrono_Duration_0Ptr
          .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_AggExpr> new_box_autoadd_agg_expr_0() {
    return _new_box_autoadd_agg_expr_0();
  }

  late final _new_box_autoadd_agg_expr_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_AggExpr> Function()>>(
          'new_box_autoadd_agg_expr_0');
  late final _new_box_autoadd_agg_expr_0 = _new_box_autoadd_agg_expr_0Ptr
      .asFunction<ffi.Pointer<wire_AggExpr> Function()>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
          'new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 = _new_box_autoadd_bool_0Ptr
      .asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_char_0(
    int value,
  ) {
    return _new_box_autoadd_char_0(
      value,
    );
  }

  late final _new_box_autoadd_char_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_char_0');
  late final _new_box_autoadd_char_0 = _new_box_autoadd_char_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_csv_encoding_0(
    int value,
  ) {
    return _new_box_autoadd_csv_encoding_0(
      value,
    );
  }

  late final _new_box_autoadd_csv_encoding_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'new_box_autoadd_csv_encoding_0');
  late final _new_box_autoadd_csv_encoding_0 =
      _new_box_autoadd_csv_encoding_0Ptr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_DataType> new_box_autoadd_data_type_0() {
    return _new_box_autoadd_data_type_0();
  }

  late final _new_box_autoadd_data_type_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DataType> Function()>>(
          'new_box_autoadd_data_type_0');
  late final _new_box_autoadd_data_type_0 = _new_box_autoadd_data_type_0Ptr
      .asFunction<ffi.Pointer<wire_DataType> Function()>();

  ffi.Pointer<ffi.Double> new_box_autoadd_f64_0(
    double value,
  ) {
    return _new_box_autoadd_f64_0(
      value,
    );
  }

  late final _new_box_autoadd_f64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>(
          'new_box_autoadd_f64_0');
  late final _new_box_autoadd_f64_0 = _new_box_autoadd_f64_0Ptr
      .asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_i32_0(
    int value,
  ) {
    return _new_box_autoadd_i32_0(
      value,
    );
  }

  late final _new_box_autoadd_i32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'new_box_autoadd_i32_0');
  late final _new_box_autoadd_i32_0 = _new_box_autoadd_i32_0Ptr
      .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 = _new_box_autoadd_i64_0Ptr
      .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_LiteralValue> new_box_autoadd_literal_value_0() {
    return _new_box_autoadd_literal_value_0();
  }

  late final _new_box_autoadd_literal_value_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LiteralValue> Function()>>(
          'new_box_autoadd_literal_value_0');
  late final _new_box_autoadd_literal_value_0 =
      _new_box_autoadd_literal_value_0Ptr
          .asFunction<ffi.Pointer<wire_LiteralValue> Function()>();

  ffi.Pointer<wire_NullValues> new_box_autoadd_null_values_0() {
    return _new_box_autoadd_null_values_0();
  }

  late final _new_box_autoadd_null_values_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NullValues> Function()>>(
          'new_box_autoadd_null_values_0');
  late final _new_box_autoadd_null_values_0 = _new_box_autoadd_null_values_0Ptr
      .asFunction<ffi.Pointer<wire_NullValues> Function()>();

  ffi.Pointer<wire_RowCount> new_box_autoadd_row_count_0() {
    return _new_box_autoadd_row_count_0();
  }

  late final _new_box_autoadd_row_count_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RowCount> Function()>>(
          'new_box_autoadd_row_count_0');
  late final _new_box_autoadd_row_count_0 = _new_box_autoadd_row_count_0Ptr
      .asFunction<ffi.Pointer<wire_RowCount> Function()>();

  ffi.Pointer<wire_Schema> new_box_autoadd_schema_0() {
    return _new_box_autoadd_schema_0();
  }

  late final _new_box_autoadd_schema_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Schema> Function()>>(
          'new_box_autoadd_schema_0');
  late final _new_box_autoadd_schema_0 = _new_box_autoadd_schema_0Ptr
      .asFunction<ffi.Pointer<wire_Schema> Function()>();

  ffi.Pointer<wire_SortOptions> new_box_autoadd_sort_options_0() {
    return _new_box_autoadd_sort_options_0();
  }

  late final _new_box_autoadd_sort_options_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SortOptions> Function()>>(
          'new_box_autoadd_sort_options_0');
  late final _new_box_autoadd_sort_options_0 =
      _new_box_autoadd_sort_options_0Ptr
          .asFunction<ffi.Pointer<wire_SortOptions> Function()>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.UintPtr> new_box_autoadd_usize_0(
    int value,
  ) {
    return _new_box_autoadd_usize_0(
      value,
    );
  }

  late final _new_box_autoadd_usize_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>>(
      'new_box_autoadd_usize_0');
  late final _new_box_autoadd_usize_0 = _new_box_autoadd_usize_0Ptr
      .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<wire_DataType> new_box_data_type_0() {
    return _new_box_data_type_0();
  }

  late final _new_box_data_type_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DataType> Function()>>(
          'new_box_data_type_0');
  late final _new_box_data_type_0 = _new_box_data_type_0Ptr
      .asFunction<ffi.Pointer<wire_DataType> Function()>();

  ffi.Pointer<wire_Expr> new_box_expr_0() {
    return _new_box_expr_0();
  }

  late final _new_box_expr_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Expr> Function()>>(
          'new_box_expr_0');
  late final _new_box_expr_0 =
      _new_box_expr_0Ptr.asFunction<ffi.Pointer<wire_Expr> Function()>();

  wire_DataFrame new_data_frame_0() {
    return _new_data_frame_0();
  }

  late final _new_data_frame_0Ptr =
      _lookup<ffi.NativeFunction<wire_DataFrame Function()>>(
          'new_data_frame_0');
  late final _new_data_frame_0 =
      _new_data_frame_0Ptr.asFunction<wire_DataFrame Function()>();

  wire_DataType new_data_type_0() {
    return _new_data_type_0();
  }

  late final _new_data_type_0Ptr =
      _lookup<ffi.NativeFunction<wire_DataType Function()>>('new_data_type_0');
  late final _new_data_type_0 =
      _new_data_type_0Ptr.asFunction<wire_DataType Function()>();

  wire_Excluded new_excluded_0() {
    return _new_excluded_0();
  }

  late final _new_excluded_0Ptr =
      _lookup<ffi.NativeFunction<wire_Excluded Function()>>('new_excluded_0');
  late final _new_excluded_0 =
      _new_excluded_0Ptr.asFunction<wire_Excluded Function()>();

  wire_Expr new_expr_0() {
    return _new_expr_0();
  }

  late final _new_expr_0Ptr =
      _lookup<ffi.NativeFunction<wire_Expr Function()>>('new_expr_0');
  late final _new_expr_0 = _new_expr_0Ptr.asFunction<wire_Expr Function()>();

  wire_Field new_field_0() {
    return _new_field_0();
  }

  late final _new_field_0Ptr =
      _lookup<ffi.NativeFunction<wire_Field Function()>>('new_field_0');
  late final _new_field_0 = _new_field_0Ptr.asFunction<wire_Field Function()>();

  ffi.Pointer<wire_float_64_list> new_float_64_list_0(
    int len,
  ) {
    return _new_float_64_list_0(
      len,
    );
  }

  late final _new_float_64_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_float_64_list> Function(
              ffi.Int32)>>('new_float_64_list_0');
  late final _new_float_64_list_0 = _new_float_64_list_0Ptr
      .asFunction<ffi.Pointer<wire_float_64_list> Function(int)>();

  ffi.Pointer<wire_int_64_list> new_int_64_list_0(
    int len,
  ) {
    return _new_int_64_list_0(
      len,
    );
  }

  late final _new_int_64_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_int_64_list> Function(
              ffi.Int32)>>('new_int_64_list_0');
  late final _new_int_64_list_0 = _new_int_64_list_0Ptr
      .asFunction<ffi.Pointer<wire_int_64_list> Function(int)>();

  wire_LazyFrame new_lazy_frame_0() {
    return _new_lazy_frame_0();
  }

  late final _new_lazy_frame_0Ptr =
      _lookup<ffi.NativeFunction<wire_LazyFrame Function()>>(
          'new_lazy_frame_0');
  late final _new_lazy_frame_0 =
      _new_lazy_frame_0Ptr.asFunction<wire_LazyFrame Function()>();

  wire_LazyGroupBy new_lazy_group_by_0() {
    return _new_lazy_group_by_0();
  }

  late final _new_lazy_group_by_0Ptr =
      _lookup<ffi.NativeFunction<wire_LazyGroupBy Function()>>(
          'new_lazy_group_by_0');
  late final _new_lazy_group_by_0 =
      _new_lazy_group_by_0Ptr.asFunction<wire_LazyGroupBy Function()>();

  ffi.Pointer<wire_list_data_type> new_list_data_type_0(
    int len,
  ) {
    return _new_list_data_type_0(
      len,
    );
  }

  late final _new_list_data_type_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_data_type> Function(
              ffi.Int32)>>('new_list_data_type_0');
  late final _new_list_data_type_0 = _new_list_data_type_0Ptr
      .asFunction<ffi.Pointer<wire_list_data_type> Function(int)>();

  ffi.Pointer<wire_list_excluded> new_list_excluded_0(
    int len,
  ) {
    return _new_list_excluded_0(
      len,
    );
  }

  late final _new_list_excluded_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_excluded> Function(
              ffi.Int32)>>('new_list_excluded_0');
  late final _new_list_excluded_0 = _new_list_excluded_0Ptr
      .asFunction<ffi.Pointer<wire_list_excluded> Function(int)>();

  ffi.Pointer<wire_list_expr> new_list_expr_0(
    int len,
  ) {
    return _new_list_expr_0(
      len,
    );
  }

  late final _new_list_expr_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_list_expr> Function(ffi.Int32)>>(
      'new_list_expr_0');
  late final _new_list_expr_0 = _new_list_expr_0Ptr
      .asFunction<ffi.Pointer<wire_list_expr> Function(int)>();

  ffi.Pointer<wire_list_field> new_list_field_0(
    int len,
  ) {
    return _new_list_field_0(
      len,
    );
  }

  late final _new_list_field_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_list_field> Function(ffi.Int32)>>(
      'new_list_field_0');
  late final _new_list_field_0 = _new_list_field_0Ptr
      .asFunction<ffi.Pointer<wire_list_field> Function(int)>();

  ffi.Pointer<wire_list_opt_Chrono_Duration> new_list_opt_Chrono_Duration_0(
    int len,
  ) {
    return _new_list_opt_Chrono_Duration_0(
      len,
    );
  }

  late final _new_list_opt_Chrono_Duration_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_opt_Chrono_Duration> Function(
              ffi.Int32)>>('new_list_opt_Chrono_Duration_0');
  late final _new_list_opt_Chrono_Duration_0 =
      _new_list_opt_Chrono_Duration_0Ptr.asFunction<
          ffi.Pointer<wire_list_opt_Chrono_Duration> Function(int)>();

  ffi.Pointer<wire_list_opt_String> new_list_opt_String_0(
    int len,
  ) {
    return _new_list_opt_String_0(
      len,
    );
  }

  late final _new_list_opt_String_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_opt_String> Function(
              ffi.Int32)>>('new_list_opt_String_0');
  late final _new_list_opt_String_0 = _new_list_opt_String_0Ptr
      .asFunction<ffi.Pointer<wire_list_opt_String> Function(int)>();

  ffi.Pointer<wire_list_opt_f64> new_list_opt_f64_0(
    int len,
  ) {
    return _new_list_opt_f64_0(
      len,
    );
  }

  late final _new_list_opt_f64_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_opt_f64> Function(
              ffi.Int32)>>('new_list_opt_f64_0');
  late final _new_list_opt_f64_0 = _new_list_opt_f64_0Ptr
      .asFunction<ffi.Pointer<wire_list_opt_f64> Function(int)>();

  ffi.Pointer<wire_list_opt_i32> new_list_opt_i32_0(
    int len,
  ) {
    return _new_list_opt_i32_0(
      len,
    );
  }

  late final _new_list_opt_i32_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_opt_i32> Function(
              ffi.Int32)>>('new_list_opt_i32_0');
  late final _new_list_opt_i32_0 = _new_list_opt_i32_0Ptr
      .asFunction<ffi.Pointer<wire_list_opt_i32> Function(int)>();

  ffi.Pointer<wire_list_opt_i64> new_list_opt_i64_0(
    int len,
  ) {
    return _new_list_opt_i64_0(
      len,
    );
  }

  late final _new_list_opt_i64_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_opt_i64> Function(
              ffi.Int32)>>('new_list_opt_i64_0');
  late final _new_list_opt_i64_0 = _new_list_opt_i64_0Ptr
      .asFunction<ffi.Pointer<wire_list_opt_i64> Function(int)>();

  ffi.Pointer<wire_list_series> new_list_series_0(
    int len,
  ) {
    return _new_list_series_0(
      len,
    );
  }

  late final _new_list_series_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_series> Function(
              ffi.Int32)>>('new_list_series_0');
  late final _new_list_series_0 = _new_list_series_0Ptr
      .asFunction<ffi.Pointer<wire_list_series> Function(int)>();

  wire_LiteralValue new_literal_value_0() {
    return _new_literal_value_0();
  }

  late final _new_literal_value_0Ptr =
      _lookup<ffi.NativeFunction<wire_LiteralValue Function()>>(
          'new_literal_value_0');
  late final _new_literal_value_0 =
      _new_literal_value_0Ptr.asFunction<wire_LiteralValue Function()>();

  wire_NullValues new_null_values_0() {
    return _new_null_values_0();
  }

  late final _new_null_values_0Ptr =
      _lookup<ffi.NativeFunction<wire_NullValues Function()>>(
          'new_null_values_0');
  late final _new_null_values_0 =
      _new_null_values_0Ptr.asFunction<wire_NullValues Function()>();

  wire_RowCount new_row_count_0() {
    return _new_row_count_0();
  }

  late final _new_row_count_0Ptr =
      _lookup<ffi.NativeFunction<wire_RowCount Function()>>('new_row_count_0');
  late final _new_row_count_0 =
      _new_row_count_0Ptr.asFunction<wire_RowCount Function()>();

  wire_Schema new_schema_0() {
    return _new_schema_0();
  }

  late final _new_schema_0Ptr =
      _lookup<ffi.NativeFunction<wire_Schema Function()>>('new_schema_0');
  late final _new_schema_0 =
      _new_schema_0Ptr.asFunction<wire_Schema Function()>();

  wire_Series new_series_0() {
    return _new_series_0();
  }

  late final _new_series_0Ptr =
      _lookup<ffi.NativeFunction<wire_Series Function()>>('new_series_0');
  late final _new_series_0 =
      _new_series_0Ptr.asFunction<wire_Series Function()>();

  wire_SortOptions new_sort_options_0() {
    return _new_sort_options_0();
  }

  late final _new_sort_options_0Ptr =
      _lookup<ffi.NativeFunction<wire_SortOptions Function()>>(
          'new_sort_options_0');
  late final _new_sort_options_0 =
      _new_sort_options_0Ptr.asFunction<wire_SortOptions Function()>();

  ffi.Pointer<wire_uint_32_list> new_uint_32_list_0(
    int len,
  ) {
    return _new_uint_32_list_0(
      len,
    );
  }

  late final _new_uint_32_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_32_list> Function(
              ffi.Int32)>>('new_uint_32_list_0');
  late final _new_uint_32_list_0 = _new_uint_32_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_32_list> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_RwLockPDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPDataFrame(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPDataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPDataFrame');
  late final _drop_opaque_RwLockPDataFrame = _drop_opaque_RwLockPDataFramePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPDataFrame(
      ptr,
    );
  }

  late final _share_opaque_RwLockPDataFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPDataFrame');
  late final _share_opaque_RwLockPDataFrame = _share_opaque_RwLockPDataFramePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockPLazyFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPLazyFrame(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPLazyFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPLazyFrame');
  late final _drop_opaque_RwLockPLazyFrame = _drop_opaque_RwLockPLazyFramePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPLazyFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPLazyFrame(
      ptr,
    );
  }

  late final _share_opaque_RwLockPLazyFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPLazyFrame');
  late final _share_opaque_RwLockPLazyFrame = _share_opaque_RwLockPLazyFramePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockPLazyGroupBy(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPLazyGroupBy(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPLazyGroupByPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPLazyGroupBy');
  late final _drop_opaque_RwLockPLazyGroupBy =
      _drop_opaque_RwLockPLazyGroupByPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPLazyGroupBy(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPLazyGroupBy(
      ptr,
    );
  }

  late final _share_opaque_RwLockPLazyGroupByPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPLazyGroupBy');
  late final _share_opaque_RwLockPLazyGroupBy =
      _share_opaque_RwLockPLazyGroupByPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockPSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPSchema(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPSchemaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPSchema');
  late final _drop_opaque_RwLockPSchema = _drop_opaque_RwLockPSchemaPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPSchema(
      ptr,
    );
  }

  late final _share_opaque_RwLockPSchemaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPSchema');
  late final _share_opaque_RwLockPSchema = _share_opaque_RwLockPSchemaPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockPSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPSeries(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPSeries');
  late final _drop_opaque_RwLockPSeries = _drop_opaque_RwLockPSeriesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPSeries(
      ptr,
    );
  }

  late final _share_opaque_RwLockPSeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPSeries');
  late final _share_opaque_RwLockPSeries = _share_opaque_RwLockPSeriesPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Min() {
    return _inflate_AggExpr_Min();
  }

  late final _inflate_AggExpr_MinPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Min');
  late final _inflate_AggExpr_Min =
      _inflate_AggExpr_MinPtr.asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Max() {
    return _inflate_AggExpr_Max();
  }

  late final _inflate_AggExpr_MaxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Max');
  late final _inflate_AggExpr_Max =
      _inflate_AggExpr_MaxPtr.asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Median() {
    return _inflate_AggExpr_Median();
  }

  late final _inflate_AggExpr_MedianPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Median');
  late final _inflate_AggExpr_Median = _inflate_AggExpr_MedianPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_NUnique() {
    return _inflate_AggExpr_NUnique();
  }

  late final _inflate_AggExpr_NUniquePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_NUnique');
  late final _inflate_AggExpr_NUnique = _inflate_AggExpr_NUniquePtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_First() {
    return _inflate_AggExpr_First();
  }

  late final _inflate_AggExpr_FirstPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_First');
  late final _inflate_AggExpr_First = _inflate_AggExpr_FirstPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Last() {
    return _inflate_AggExpr_Last();
  }

  late final _inflate_AggExpr_LastPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Last');
  late final _inflate_AggExpr_Last = _inflate_AggExpr_LastPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Mean() {
    return _inflate_AggExpr_Mean();
  }

  late final _inflate_AggExpr_MeanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Mean');
  late final _inflate_AggExpr_Mean = _inflate_AggExpr_MeanPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_List() {
    return _inflate_AggExpr_List();
  }

  late final _inflate_AggExpr_ListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_List');
  late final _inflate_AggExpr_List = _inflate_AggExpr_ListPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Count() {
    return _inflate_AggExpr_Count();
  }

  late final _inflate_AggExpr_CountPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Count');
  late final _inflate_AggExpr_Count = _inflate_AggExpr_CountPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Quantile() {
    return _inflate_AggExpr_Quantile();
  }

  late final _inflate_AggExpr_QuantilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Quantile');
  late final _inflate_AggExpr_Quantile = _inflate_AggExpr_QuantilePtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Sum() {
    return _inflate_AggExpr_Sum();
  }

  late final _inflate_AggExpr_SumPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Sum');
  late final _inflate_AggExpr_Sum =
      _inflate_AggExpr_SumPtr.asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_AggGroups() {
    return _inflate_AggExpr_AggGroups();
  }

  late final _inflate_AggExpr_AggGroupsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_AggGroups');
  late final _inflate_AggExpr_AggGroups = _inflate_AggExpr_AggGroupsPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Std() {
    return _inflate_AggExpr_Std();
  }

  late final _inflate_AggExpr_StdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Std');
  late final _inflate_AggExpr_Std =
      _inflate_AggExpr_StdPtr.asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<DataTypeKind> inflate_DataType_Datetime() {
    return _inflate_DataType_Datetime();
  }

  late final _inflate_DataType_DatetimePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'inflate_DataType_Datetime');
  late final _inflate_DataType_Datetime = _inflate_DataType_DatetimePtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<DataTypeKind> inflate_DataType_Duration() {
    return _inflate_DataType_Duration();
  }

  late final _inflate_DataType_DurationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'inflate_DataType_Duration');
  late final _inflate_DataType_Duration = _inflate_DataType_DurationPtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<DataTypeKind> inflate_DataType_List() {
    return _inflate_DataType_List();
  }

  late final _inflate_DataType_ListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'inflate_DataType_List');
  late final _inflate_DataType_List = _inflate_DataType_ListPtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<DataTypeKind> inflate_DataType_Struct() {
    return _inflate_DataType_Struct();
  }

  late final _inflate_DataType_StructPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'inflate_DataType_Struct');
  late final _inflate_DataType_Struct = _inflate_DataType_StructPtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<ExcludedKind> inflate_Excluded_Name() {
    return _inflate_Excluded_Name();
  }

  late final _inflate_Excluded_NamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExcludedKind> Function()>>(
          'inflate_Excluded_Name');
  late final _inflate_Excluded_Name = _inflate_Excluded_NamePtr
      .asFunction<ffi.Pointer<ExcludedKind> Function()>();

  ffi.Pointer<ExcludedKind> inflate_Excluded_Dtype() {
    return _inflate_Excluded_Dtype();
  }

  late final _inflate_Excluded_DtypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExcludedKind> Function()>>(
          'inflate_Excluded_Dtype');
  late final _inflate_Excluded_Dtype = _inflate_Excluded_DtypePtr
      .asFunction<ffi.Pointer<ExcludedKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Alias() {
    return _inflate_Expr_Alias();
  }

  late final _inflate_Expr_AliasPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Alias');
  late final _inflate_Expr_Alias =
      _inflate_Expr_AliasPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Column() {
    return _inflate_Expr_Column();
  }

  late final _inflate_Expr_ColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Column');
  late final _inflate_Expr_Column =
      _inflate_Expr_ColumnPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Columns() {
    return _inflate_Expr_Columns();
  }

  late final _inflate_Expr_ColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Columns');
  late final _inflate_Expr_Columns =
      _inflate_Expr_ColumnsPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_DtypeColumn() {
    return _inflate_Expr_DtypeColumn();
  }

  late final _inflate_Expr_DtypeColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_DtypeColumn');
  late final _inflate_Expr_DtypeColumn = _inflate_Expr_DtypeColumnPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Literal() {
    return _inflate_Expr_Literal();
  }

  late final _inflate_Expr_LiteralPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Literal');
  late final _inflate_Expr_Literal =
      _inflate_Expr_LiteralPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_BinaryExpr() {
    return _inflate_Expr_BinaryExpr();
  }

  late final _inflate_Expr_BinaryExprPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_BinaryExpr');
  late final _inflate_Expr_BinaryExpr = _inflate_Expr_BinaryExprPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Cast() {
    return _inflate_Expr_Cast();
  }

  late final _inflate_Expr_CastPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Cast');
  late final _inflate_Expr_Cast =
      _inflate_Expr_CastPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Sort() {
    return _inflate_Expr_Sort();
  }

  late final _inflate_Expr_SortPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Sort');
  late final _inflate_Expr_Sort =
      _inflate_Expr_SortPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Take() {
    return _inflate_Expr_Take();
  }

  late final _inflate_Expr_TakePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Take');
  late final _inflate_Expr_Take =
      _inflate_Expr_TakePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Agg() {
    return _inflate_Expr_Agg();
  }

  late final _inflate_Expr_AggPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Agg');
  late final _inflate_Expr_Agg =
      _inflate_Expr_AggPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Ternary() {
    return _inflate_Expr_Ternary();
  }

  late final _inflate_Expr_TernaryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Ternary');
  late final _inflate_Expr_Ternary =
      _inflate_Expr_TernaryPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Explode() {
    return _inflate_Expr_Explode();
  }

  late final _inflate_Expr_ExplodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Explode');
  late final _inflate_Expr_Explode =
      _inflate_Expr_ExplodePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Filter() {
    return _inflate_Expr_Filter();
  }

  late final _inflate_Expr_FilterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Filter');
  late final _inflate_Expr_Filter =
      _inflate_Expr_FilterPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Slice() {
    return _inflate_Expr_Slice();
  }

  late final _inflate_Expr_SlicePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Slice');
  late final _inflate_Expr_Slice =
      _inflate_Expr_SlicePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Exclude() {
    return _inflate_Expr_Exclude();
  }

  late final _inflate_Expr_ExcludePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Exclude');
  late final _inflate_Expr_Exclude =
      _inflate_Expr_ExcludePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_KeepName() {
    return _inflate_Expr_KeepName();
  }

  late final _inflate_Expr_KeepNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_KeepName');
  late final _inflate_Expr_KeepName =
      _inflate_Expr_KeepNamePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Nth() {
    return _inflate_Expr_Nth();
  }

  late final _inflate_Expr_NthPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Nth');
  late final _inflate_Expr_Nth =
      _inflate_Expr_NthPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Boolean() {
    return _inflate_LiteralValue_Boolean();
  }

  late final _inflate_LiteralValue_BooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Boolean');
  late final _inflate_LiteralValue_Boolean = _inflate_LiteralValue_BooleanPtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Utf8() {
    return _inflate_LiteralValue_Utf8();
  }

  late final _inflate_LiteralValue_Utf8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Utf8');
  late final _inflate_LiteralValue_Utf8 = _inflate_LiteralValue_Utf8Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Binary() {
    return _inflate_LiteralValue_Binary();
  }

  late final _inflate_LiteralValue_BinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Binary');
  late final _inflate_LiteralValue_Binary = _inflate_LiteralValue_BinaryPtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_UInt8() {
    return _inflate_LiteralValue_UInt8();
  }

  late final _inflate_LiteralValue_UInt8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_UInt8');
  late final _inflate_LiteralValue_UInt8 = _inflate_LiteralValue_UInt8Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_UInt16() {
    return _inflate_LiteralValue_UInt16();
  }

  late final _inflate_LiteralValue_UInt16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_UInt16');
  late final _inflate_LiteralValue_UInt16 = _inflate_LiteralValue_UInt16Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_UInt32() {
    return _inflate_LiteralValue_UInt32();
  }

  late final _inflate_LiteralValue_UInt32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_UInt32');
  late final _inflate_LiteralValue_UInt32 = _inflate_LiteralValue_UInt32Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_UInt64() {
    return _inflate_LiteralValue_UInt64();
  }

  late final _inflate_LiteralValue_UInt64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_UInt64');
  late final _inflate_LiteralValue_UInt64 = _inflate_LiteralValue_UInt64Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Int8() {
    return _inflate_LiteralValue_Int8();
  }

  late final _inflate_LiteralValue_Int8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Int8');
  late final _inflate_LiteralValue_Int8 = _inflate_LiteralValue_Int8Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Int16() {
    return _inflate_LiteralValue_Int16();
  }

  late final _inflate_LiteralValue_Int16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Int16');
  late final _inflate_LiteralValue_Int16 = _inflate_LiteralValue_Int16Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Int32() {
    return _inflate_LiteralValue_Int32();
  }

  late final _inflate_LiteralValue_Int32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Int32');
  late final _inflate_LiteralValue_Int32 = _inflate_LiteralValue_Int32Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Int64() {
    return _inflate_LiteralValue_Int64();
  }

  late final _inflate_LiteralValue_Int64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Int64');
  late final _inflate_LiteralValue_Int64 = _inflate_LiteralValue_Int64Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Float32() {
    return _inflate_LiteralValue_Float32();
  }

  late final _inflate_LiteralValue_Float32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Float32');
  late final _inflate_LiteralValue_Float32 = _inflate_LiteralValue_Float32Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Float64() {
    return _inflate_LiteralValue_Float64();
  }

  late final _inflate_LiteralValue_Float64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Float64');
  late final _inflate_LiteralValue_Float64 = _inflate_LiteralValue_Float64Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Range() {
    return _inflate_LiteralValue_Range();
  }

  late final _inflate_LiteralValue_RangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Range');
  late final _inflate_LiteralValue_Range = _inflate_LiteralValue_RangePtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_DateTime() {
    return _inflate_LiteralValue_DateTime();
  }

  late final _inflate_LiteralValue_DateTimePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_DateTime');
  late final _inflate_LiteralValue_DateTime = _inflate_LiteralValue_DateTimePtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Duration() {
    return _inflate_LiteralValue_Duration();
  }

  late final _inflate_LiteralValue_DurationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Duration');
  late final _inflate_LiteralValue_Duration = _inflate_LiteralValue_DurationPtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<NullValuesKind> inflate_NullValues_AllColumnsSingle() {
    return _inflate_NullValues_AllColumnsSingle();
  }

  late final _inflate_NullValues_AllColumnsSinglePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NullValuesKind> Function()>>(
          'inflate_NullValues_AllColumnsSingle');
  late final _inflate_NullValues_AllColumnsSingle =
      _inflate_NullValues_AllColumnsSinglePtr
          .asFunction<ffi.Pointer<NullValuesKind> Function()>();

  ffi.Pointer<NullValuesKind> inflate_NullValues_AllColumns() {
    return _inflate_NullValues_AllColumns();
  }

  late final _inflate_NullValues_AllColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NullValuesKind> Function()>>(
          'inflate_NullValues_AllColumns');
  late final _inflate_NullValues_AllColumns = _inflate_NullValues_AllColumnsPtr
      .asFunction<ffi.Pointer<NullValuesKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPSchema extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_Schema extends ffi.Struct {
  external wire_RwLockPSchema field0;
}

class wire_DataType_Boolean extends ffi.Opaque {}

class wire_DataType_UInt8 extends ffi.Opaque {}

class wire_DataType_UInt16 extends ffi.Opaque {}

class wire_DataType_UInt32 extends ffi.Opaque {}

class wire_DataType_UInt64 extends ffi.Opaque {}

class wire_DataType_Int8 extends ffi.Opaque {}

class wire_DataType_Int16 extends ffi.Opaque {}

class wire_DataType_Int32 extends ffi.Opaque {}

class wire_DataType_Int64 extends ffi.Opaque {}

class wire_DataType_Float32 extends ffi.Opaque {}

class wire_DataType_Float64 extends ffi.Opaque {}

class wire_DataType_Utf8 extends ffi.Opaque {}

class wire_DataType_Binary extends ffi.Opaque {}

class wire_DataType_Date extends ffi.Opaque {}

class wire_DataType_Datetime extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  external ffi.Pointer<wire_uint_8_list> field1;
}

class wire_DataType_Duration extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class wire_DataType_Time extends ffi.Opaque {}

class wire_DataType_List extends ffi.Struct {
  external ffi.Pointer<wire_DataType> field0;
}

class wire_DataType extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DataTypeKind> kind;
}

class DataTypeKind extends ffi.Union {
  external ffi.Pointer<wire_DataType_Boolean> Boolean;

  external ffi.Pointer<wire_DataType_UInt8> UInt8;

  external ffi.Pointer<wire_DataType_UInt16> UInt16;

  external ffi.Pointer<wire_DataType_UInt32> UInt32;

  external ffi.Pointer<wire_DataType_UInt64> UInt64;

  external ffi.Pointer<wire_DataType_Int8> Int8;

  external ffi.Pointer<wire_DataType_Int16> Int16;

  external ffi.Pointer<wire_DataType_Int32> Int32;

  external ffi.Pointer<wire_DataType_Int64> Int64;

  external ffi.Pointer<wire_DataType_Float32> Float32;

  external ffi.Pointer<wire_DataType_Float64> Float64;

  external ffi.Pointer<wire_DataType_Utf8> Utf8;

  external ffi.Pointer<wire_DataType_Binary> Binary;

  external ffi.Pointer<wire_DataType_Date> Date;

  external ffi.Pointer<wire_DataType_Datetime> Datetime;

  external ffi.Pointer<wire_DataType_Duration> Duration;

  external ffi.Pointer<wire_DataType_Time> Time;

  external ffi.Pointer<wire_DataType_List> List;

  external ffi.Pointer<wire_DataType_Struct> Struct;

  external ffi.Pointer<wire_DataType_Unknown> Unknown;
}

class wire_DataType_Struct extends ffi.Struct {
  external ffi.Pointer<wire_list_field> field0;
}

class wire_list_field extends ffi.Struct {
  external ffi.Pointer<wire_Field> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Field extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external wire_DataType dtype;
}

class wire_DataType_Unknown extends ffi.Opaque {}

class wire_list_data_type extends ffi.Struct {
  external ffi.Pointer<wire_DataType> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RowCount extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  @ffi.Uint32()
  external int offset;
}

class wire_NullValues_AllColumnsSingle extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_NullValues_AllColumns extends ffi.Struct {
  external ffi.Pointer<wire_StringList> field0;
}

class NullValuesKind extends ffi.Union {
  external ffi.Pointer<wire_NullValues_AllColumnsSingle> AllColumnsSingle;

  external ffi.Pointer<wire_NullValues_AllColumns> AllColumns;
}

class wire_NullValues extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<NullValuesKind> kind;
}

class wire_uint_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint32> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPSeries extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_Series extends ffi.Struct {
  external wire_RwLockPSeries field0;
}

class wire_list_series extends ffi.Struct {
  external ffi.Pointer<wire_Series> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPDataFrame extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_DataFrame extends ffi.Struct {
  external wire_RwLockPDataFrame field0;
}

class wire_float_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPLazyFrame extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_LazyFrame extends ffi.Struct {
  external wire_RwLockPLazyFrame field0;
}

class wire_Expr_Alias extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;

  external ffi.Pointer<wire_uint_8_list> field1;
}

class wire_Expr extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ExprKind> kind;
}

class ExprKind extends ffi.Union {
  external ffi.Pointer<wire_Expr_Alias> Alias;

  external ffi.Pointer<wire_Expr_Column> Column;

  external ffi.Pointer<wire_Expr_Columns> Columns;

  external ffi.Pointer<wire_Expr_DtypeColumn> DtypeColumn;

  external ffi.Pointer<wire_Expr_Literal> Literal;

  external ffi.Pointer<wire_Expr_BinaryExpr> BinaryExpr;

  external ffi.Pointer<wire_Expr_Cast> Cast;

  external ffi.Pointer<wire_Expr_Sort> Sort;

  external ffi.Pointer<wire_Expr_Take> Take;

  external ffi.Pointer<wire_Expr_Agg> Agg;

  external ffi.Pointer<wire_Expr_Ternary> Ternary;

  external ffi.Pointer<wire_Expr_Explode> Explode;

  external ffi.Pointer<wire_Expr_Filter> Filter;

  external ffi.Pointer<wire_Expr_Wildcard> Wildcard;

  external ffi.Pointer<wire_Expr_Slice> Slice;

  external ffi.Pointer<wire_Expr_Exclude> Exclude;

  external ffi.Pointer<wire_Expr_KeepName> KeepName;

  external ffi.Pointer<wire_Expr_Count> Count;

  external ffi.Pointer<wire_Expr_Nth> Nth;
}

class wire_Expr_Column extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_Expr_Columns extends ffi.Struct {
  external ffi.Pointer<wire_StringList> field0;
}

class wire_Expr_DtypeColumn extends ffi.Struct {
  external ffi.Pointer<wire_list_data_type> field0;
}

class wire_Expr_Literal extends ffi.Struct {
  external ffi.Pointer<wire_LiteralValue> field0;
}

class wire_LiteralValue extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<LiteralValueKind> kind;
}

class LiteralValueKind extends ffi.Union {
  external ffi.Pointer<wire_LiteralValue_Boolean> Boolean;

  external ffi.Pointer<wire_LiteralValue_Utf8> Utf8;

  external ffi.Pointer<wire_LiteralValue_Binary> Binary;

  external ffi.Pointer<wire_LiteralValue_UInt8> UInt8;

  external ffi.Pointer<wire_LiteralValue_UInt16> UInt16;

  external ffi.Pointer<wire_LiteralValue_UInt32> UInt32;

  external ffi.Pointer<wire_LiteralValue_UInt64> UInt64;

  external ffi.Pointer<wire_LiteralValue_Int8> Int8;

  external ffi.Pointer<wire_LiteralValue_Int16> Int16;

  external ffi.Pointer<wire_LiteralValue_Int32> Int32;

  external ffi.Pointer<wire_LiteralValue_Int64> Int64;

  external ffi.Pointer<wire_LiteralValue_Float32> Float32;

  external ffi.Pointer<wire_LiteralValue_Float64> Float64;

  external ffi.Pointer<wire_LiteralValue_Range> Range;

  external ffi.Pointer<wire_LiteralValue_DateTime> DateTime;

  external ffi.Pointer<wire_LiteralValue_Duration> Duration;
}

class wire_LiteralValue_Boolean extends ffi.Struct {
  @ffi.Bool()
  external bool field0;
}

class wire_LiteralValue_Utf8 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_LiteralValue_Binary extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_LiteralValue_UInt8 extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

class wire_LiteralValue_UInt16 extends ffi.Struct {
  @ffi.Uint16()
  external int field0;
}

class wire_LiteralValue_UInt32 extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

class wire_LiteralValue_UInt64 extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

class wire_LiteralValue_Int8 extends ffi.Struct {
  @ffi.Int8()
  external int field0;
}

class wire_LiteralValue_Int16 extends ffi.Struct {
  @ffi.Int16()
  external int field0;
}

class wire_LiteralValue_Int32 extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class wire_LiteralValue_Int64 extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

class wire_LiteralValue_Float32 extends ffi.Struct {
  @ffi.Float()
  external double field0;
}

class wire_LiteralValue_Float64 extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

class wire_LiteralValue_Range extends ffi.Struct {
  @ffi.Int64()
  external int low;

  @ffi.Int64()
  external int high;

  external ffi.Pointer<wire_DataType> data_type;
}

class wire_LiteralValue_DateTime extends ffi.Struct {
  @ffi.Int64()
  external int field0;

  @ffi.Int32()
  external int field1;
}

class wire_LiteralValue_Duration extends ffi.Struct {
  @ffi.Int64()
  external int field0;

  @ffi.Int32()
  external int field1;
}

class wire_Expr_BinaryExpr extends ffi.Struct {
  external ffi.Pointer<wire_Expr> left;

  @ffi.Int32()
  external int op;

  external ffi.Pointer<wire_Expr> right;
}

class wire_Expr_Cast extends ffi.Struct {
  external ffi.Pointer<wire_Expr> expr;

  external ffi.Pointer<wire_DataType> data_type;

  @ffi.Bool()
  external bool strict;
}

class wire_Expr_Sort extends ffi.Struct {
  external ffi.Pointer<wire_Expr> expr;

  external ffi.Pointer<wire_SortOptions> options;
}

class wire_SortOptions extends ffi.Struct {
  @ffi.Bool()
  external bool descending;

  @ffi.Bool()
  external bool nulls_last;
}

class wire_Expr_Take extends ffi.Struct {
  external ffi.Pointer<wire_Expr> expr;

  external ffi.Pointer<wire_Expr> idx;
}

class wire_Expr_Agg extends ffi.Struct {
  external ffi.Pointer<wire_AggExpr> field0;
}

class wire_AggExpr extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<AggExprKind> kind;
}

class AggExprKind extends ffi.Union {
  external ffi.Pointer<wire_AggExpr_Min> Min;

  external ffi.Pointer<wire_AggExpr_Max> Max;

  external ffi.Pointer<wire_AggExpr_Median> Median;

  external ffi.Pointer<wire_AggExpr_NUnique> NUnique;

  external ffi.Pointer<wire_AggExpr_First> First;

  external ffi.Pointer<wire_AggExpr_Last> Last;

  external ffi.Pointer<wire_AggExpr_Mean> Mean;

  external ffi.Pointer<wire_AggExpr_List> List;

  external ffi.Pointer<wire_AggExpr_Count> Count;

  external ffi.Pointer<wire_AggExpr_Quantile> Quantile;

  external ffi.Pointer<wire_AggExpr_Sum> Sum;

  external ffi.Pointer<wire_AggExpr_AggGroups> AggGroups;

  external ffi.Pointer<wire_AggExpr_Std> Std;
}

class wire_AggExpr_Min extends ffi.Struct {
  external ffi.Pointer<wire_Expr> input;

  @ffi.Bool()
  external bool propagate_nans;
}

class wire_AggExpr_Max extends ffi.Struct {
  external ffi.Pointer<wire_Expr> input;

  @ffi.Bool()
  external bool propagate_nans;
}

class wire_AggExpr_Median extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_NUnique extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_First extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Last extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Mean extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_List extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Count extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Quantile extends ffi.Struct {
  external ffi.Pointer<wire_Expr> expr;

  external ffi.Pointer<wire_Expr> quantile;

  @ffi.Int32()
  external int interpol;
}

class wire_AggExpr_Sum extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_AggGroups extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Std extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;

  @ffi.Uint8()
  external int field1;
}

class wire_Expr_Ternary extends ffi.Struct {
  external ffi.Pointer<wire_Expr> predicate;

  external ffi.Pointer<wire_Expr> truthy;

  external ffi.Pointer<wire_Expr> falsy;
}

class wire_Expr_Explode extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_Expr_Filter extends ffi.Struct {
  external ffi.Pointer<wire_Expr> input;

  external ffi.Pointer<wire_Expr> by;
}

class wire_Expr_Wildcard extends ffi.Opaque {}

class wire_Expr_Slice extends ffi.Struct {
  external ffi.Pointer<wire_Expr> input;

  external ffi.Pointer<wire_Expr> offset;

  external ffi.Pointer<wire_Expr> length;
}

class wire_Expr_Exclude extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;

  external ffi.Pointer<wire_list_excluded> field1;
}

class wire_list_excluded extends ffi.Struct {
  external ffi.Pointer<wire_Excluded> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Excluded extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ExcludedKind> kind;
}

class ExcludedKind extends ffi.Union {
  external ffi.Pointer<wire_Excluded_Name> Name;

  external ffi.Pointer<wire_Excluded_Dtype> Dtype;
}

class wire_Excluded_Name extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_Excluded_Dtype extends ffi.Struct {
  external ffi.Pointer<wire_DataType> field0;
}

class wire_Expr_KeepName extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_Expr_Count extends ffi.Opaque {}

class wire_Expr_Nth extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

class wire_list_expr extends ffi.Struct {
  external ffi.Pointer<wire_Expr> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_opt_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_opt_i32 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int32>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_opt_i64 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int64>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_opt_Chrono_Duration extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int64>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_list_opt_f64 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Double>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_int_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int64> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPLazyGroupBy extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_LazyGroupBy extends ffi.Struct {
  external wire_RwLockPLazyGroupBy field0;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
