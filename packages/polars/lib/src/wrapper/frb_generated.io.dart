// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.3.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'wrapper.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SeriesPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeriesPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SchemaPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchemaPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SeriesPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeriesPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DataFramePtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFramePtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LazyFramePtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFramePtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LazyGroupByPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupByPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SchemaPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchemaPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SeriesPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeriesPtr;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  Series
      dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
          dynamic raw);

  @protected
  Schema dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
      dynamic raw);

  @protected
  Series dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
      dynamic raw);

  @protected
  DataFrame dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      dynamic raw);

  @protected
  LazyFrame dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
      dynamic raw);

  @protected
  LazyGroupBy
      dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
          dynamic raw);

  @protected
  Schema dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperSchema(
      dynamic raw);

  @protected
  Series dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperSeries(
      dynamic raw);

  @protected
  DataFrame
      dco_decode_Auto_RefMut_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
          dynamic raw);

  @protected
  DataFrame dco_decode_Auto_Ref_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      dynamic raw);

  @protected
  Series dco_decode_Auto_Ref_RustOpaque_stdsyncRwLockcratewrapperSeries(
      dynamic raw);

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw);

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw);

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw);

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw);

  @protected
  Series dco_decode_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
      dynamic raw);

  @protected
  Schema dco_decode_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
      dynamic raw);

  @protected
  Series dco_decode_RustOpaque_stdsyncRwLockVeccratewrapperSeries(dynamic raw);

  @protected
  DataFrame dco_decode_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      dynamic raw);

  @protected
  LazyFrame dco_decode_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
      dynamic raw);

  @protected
  LazyGroupBy dco_decode_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
      dynamic raw);

  @protected
  Schema dco_decode_RustOpaque_stdsyncRwLockcratewrapperSchema(dynamic raw);

  @protected
  Series dco_decode_RustOpaque_stdsyncRwLockcratewrapperSeries(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AggExpr dco_decode_agg_expr(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  Duration dco_decode_box_autoadd_Chrono_Duration(dynamic raw);

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Local(dynamic raw);

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Naive(dynamic raw);

  @protected
  DateTime dco_decode_box_autoadd_Chrono_Utc(dynamic raw);

  @protected
  AggExpr dco_decode_box_autoadd_agg_expr(dynamic raw);

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw);

  @protected
  CsvEncoding dco_decode_box_autoadd_csv_encoding(dynamic raw);

  @protected
  DataType dco_decode_box_autoadd_data_type(dynamic raw);

  @protected
  Expr dco_decode_box_autoadd_expr(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw);

  @protected
  int dco_decode_box_autoadd_i_32(dynamic raw);

  @protected
  int dco_decode_box_autoadd_i_64(dynamic raw);

  @protected
  LiteralValue dco_decode_box_autoadd_literal_value(dynamic raw);

  @protected
  NullValues dco_decode_box_autoadd_null_values(dynamic raw);

  @protected
  RowCount dco_decode_box_autoadd_row_count(dynamic raw);

  @protected
  SortOptions dco_decode_box_autoadd_sort_options(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  int dco_decode_box_autoadd_usize(dynamic raw);

  @protected
  WindowType dco_decode_box_autoadd_window_type(dynamic raw);

  @protected
  DataType dco_decode_box_data_type(dynamic raw);

  @protected
  Expr dco_decode_box_expr(dynamic raw);

  @protected
  CsvEncoding dco_decode_csv_encoding(dynamic raw);

  @protected
  dynamic dco_decode_dartabi(dynamic raw);

  @protected
  DataType dco_decode_data_type(dynamic raw);

  @protected
  Excluded dco_decode_excluded(dynamic raw);

  @protected
  Expr dco_decode_expr(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  Field dco_decode_field(dynamic raw);

  @protected
  int dco_decode_i_16(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  int dco_decode_i_8(dynamic raw);

  @protected
  JoinType dco_decode_join_type(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<bool> dco_decode_list_bool(dynamic raw);

  @protected
  List<dynamic> dco_decode_list_dartabi(dynamic raw);

  @protected
  List<DataType> dco_decode_list_data_type(dynamic raw);

  @protected
  List<Excluded> dco_decode_list_excluded(dynamic raw);

  @protected
  List<Expr> dco_decode_list_expr(dynamic raw);

  @protected
  List<Field> dco_decode_list_field(dynamic raw);

  @protected
  List<String?> dco_decode_list_opt_String(dynamic raw);

  @protected
  List<Duration?> dco_decode_list_opt_box_autoadd_Chrono_Duration(dynamic raw);

  @protected
  List<DateTime?> dco_decode_list_opt_box_autoadd_Chrono_Local(dynamic raw);

  @protected
  List<DateTime?> dco_decode_list_opt_box_autoadd_Chrono_Naive(dynamic raw);

  @protected
  List<DateTime?> dco_decode_list_opt_box_autoadd_Chrono_Utc(dynamic raw);

  @protected
  List<double?> dco_decode_list_opt_box_autoadd_f_64(dynamic raw);

  @protected
  List<int?> dco_decode_list_opt_box_autoadd_i_32(dynamic raw);

  @protected
  List<int?> dco_decode_list_opt_box_autoadd_i_64(dynamic raw);

  @protected
  Float64List dco_decode_list_prim_f_64(dynamic raw);

  @protected
  Int64List dco_decode_list_prim_i_64(dynamic raw);

  @protected
  Uint32List dco_decode_list_prim_u_32(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw);

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw);

  @protected
  LiteralValue dco_decode_literal_value(dynamic raw);

  @protected
  NullValues dco_decode_null_values(dynamic raw);

  @protected
  Operator dco_decode_operator(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  Duration? dco_decode_opt_box_autoadd_Chrono_Duration(dynamic raw);

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Local(dynamic raw);

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Naive(dynamic raw);

  @protected
  DateTime? dco_decode_opt_box_autoadd_Chrono_Utc(dynamic raw);

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw);

  @protected
  CsvEncoding? dco_decode_opt_box_autoadd_csv_encoding(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_i_32(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_i_64(dynamic raw);

  @protected
  NullValues? dco_decode_opt_box_autoadd_null_values(dynamic raw);

  @protected
  RowCount? dco_decode_opt_box_autoadd_row_count(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_usize(dynamic raw);

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw);

  @protected
  List<bool>? dco_decode_opt_list_bool(dynamic raw);

  @protected
  List<DataType>? dco_decode_opt_list_data_type(dynamic raw);

  @protected
  List<Expr>? dco_decode_opt_list_expr(dynamic raw);

  @protected
  List<String?>? dco_decode_opt_list_opt_String(dynamic raw);

  @protected
  List<Duration?>? dco_decode_opt_list_opt_box_autoadd_Chrono_Duration(
      dynamic raw);

  @protected
  List<double?>? dco_decode_opt_list_opt_box_autoadd_f_64(dynamic raw);

  @protected
  List<int?>? dco_decode_opt_list_opt_box_autoadd_i_32(dynamic raw);

  @protected
  List<int?>? dco_decode_opt_list_opt_box_autoadd_i_64(dynamic raw);

  @protected
  Float64List? dco_decode_opt_list_prim_f_64(dynamic raw);

  @protected
  Uint32List? dco_decode_opt_list_prim_u_32(dynamic raw);

  @protected
  QuantileInterpolOptions dco_decode_quantile_interpol_options(dynamic raw);

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw);

  @protected
  RowCount dco_decode_row_count(dynamic raw);

  @protected
  Shape dco_decode_shape(dynamic raw);

  @protected
  SortOptions dco_decode_sort_options(dynamic raw);

  @protected
  TimeUnit dco_decode_time_unit(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  UniqueKeepStrategy dco_decode_unique_keep_strategy(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  WindowMapping dco_decode_window_mapping(dynamic raw);

  @protected
  WindowType dco_decode_window_type(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  Series
      sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
          SseDeserializer deserializer);

  @protected
  Schema sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
      SseDeserializer deserializer);

  @protected
  Series sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
      SseDeserializer deserializer);

  @protected
  DataFrame sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      SseDeserializer deserializer);

  @protected
  LazyFrame sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
      SseDeserializer deserializer);

  @protected
  LazyGroupBy
      sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
          SseDeserializer deserializer);

  @protected
  Schema sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperSchema(
      SseDeserializer deserializer);

  @protected
  Series sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperSeries(
      SseDeserializer deserializer);

  @protected
  DataFrame
      sse_decode_Auto_RefMut_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
          SseDeserializer deserializer);

  @protected
  DataFrame sse_decode_Auto_Ref_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      SseDeserializer deserializer);

  @protected
  Series sse_decode_Auto_Ref_RustOpaque_stdsyncRwLockcratewrapperSeries(
      SseDeserializer deserializer);

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer);

  @protected
  Series sse_decode_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
      SseDeserializer deserializer);

  @protected
  Schema sse_decode_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
      SseDeserializer deserializer);

  @protected
  Series sse_decode_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
      SseDeserializer deserializer);

  @protected
  DataFrame sse_decode_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      SseDeserializer deserializer);

  @protected
  LazyFrame sse_decode_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
      SseDeserializer deserializer);

  @protected
  LazyGroupBy sse_decode_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
      SseDeserializer deserializer);

  @protected
  Schema sse_decode_RustOpaque_stdsyncRwLockcratewrapperSchema(
      SseDeserializer deserializer);

  @protected
  Series sse_decode_RustOpaque_stdsyncRwLockcratewrapperSeries(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AggExpr sse_decode_agg_expr(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  Duration sse_decode_box_autoadd_Chrono_Duration(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Local(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Naive(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_box_autoadd_Chrono_Utc(SseDeserializer deserializer);

  @protected
  AggExpr sse_decode_box_autoadd_agg_expr(SseDeserializer deserializer);

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  CsvEncoding sse_decode_box_autoadd_csv_encoding(SseDeserializer deserializer);

  @protected
  DataType sse_decode_box_autoadd_data_type(SseDeserializer deserializer);

  @protected
  Expr sse_decode_box_autoadd_expr(SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  LiteralValue sse_decode_box_autoadd_literal_value(
      SseDeserializer deserializer);

  @protected
  NullValues sse_decode_box_autoadd_null_values(SseDeserializer deserializer);

  @protected
  RowCount sse_decode_box_autoadd_row_count(SseDeserializer deserializer);

  @protected
  SortOptions sse_decode_box_autoadd_sort_options(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_usize(SseDeserializer deserializer);

  @protected
  WindowType sse_decode_box_autoadd_window_type(SseDeserializer deserializer);

  @protected
  DataType sse_decode_box_data_type(SseDeserializer deserializer);

  @protected
  Expr sse_decode_box_expr(SseDeserializer deserializer);

  @protected
  CsvEncoding sse_decode_csv_encoding(SseDeserializer deserializer);

  @protected
  dynamic sse_decode_dartabi(SseDeserializer deserializer);

  @protected
  DataType sse_decode_data_type(SseDeserializer deserializer);

  @protected
  Excluded sse_decode_excluded(SseDeserializer deserializer);

  @protected
  Expr sse_decode_expr(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  Field sse_decode_field(SseDeserializer deserializer);

  @protected
  int sse_decode_i_16(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_8(SseDeserializer deserializer);

  @protected
  JoinType sse_decode_join_type(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<bool> sse_decode_list_bool(SseDeserializer deserializer);

  @protected
  List<dynamic> sse_decode_list_dartabi(SseDeserializer deserializer);

  @protected
  List<DataType> sse_decode_list_data_type(SseDeserializer deserializer);

  @protected
  List<Excluded> sse_decode_list_excluded(SseDeserializer deserializer);

  @protected
  List<Expr> sse_decode_list_expr(SseDeserializer deserializer);

  @protected
  List<Field> sse_decode_list_field(SseDeserializer deserializer);

  @protected
  List<String?> sse_decode_list_opt_String(SseDeserializer deserializer);

  @protected
  List<Duration?> sse_decode_list_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer);

  @protected
  List<DateTime?> sse_decode_list_opt_box_autoadd_Chrono_Local(
      SseDeserializer deserializer);

  @protected
  List<DateTime?> sse_decode_list_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer);

  @protected
  List<DateTime?> sse_decode_list_opt_box_autoadd_Chrono_Utc(
      SseDeserializer deserializer);

  @protected
  List<double?> sse_decode_list_opt_box_autoadd_f_64(
      SseDeserializer deserializer);

  @protected
  List<int?> sse_decode_list_opt_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  List<int?> sse_decode_list_opt_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  Float64List sse_decode_list_prim_f_64(SseDeserializer deserializer);

  @protected
  Int64List sse_decode_list_prim_i_64(SseDeserializer deserializer);

  @protected
  Uint32List sse_decode_list_prim_u_32(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer);

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer);

  @protected
  LiteralValue sse_decode_literal_value(SseDeserializer deserializer);

  @protected
  NullValues sse_decode_null_values(SseDeserializer deserializer);

  @protected
  Operator sse_decode_operator(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  Duration? sse_decode_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer);

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Local(
      SseDeserializer deserializer);

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Naive(
      SseDeserializer deserializer);

  @protected
  DateTime? sse_decode_opt_box_autoadd_Chrono_Utc(SseDeserializer deserializer);

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  CsvEncoding? sse_decode_opt_box_autoadd_csv_encoding(
      SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  NullValues? sse_decode_opt_box_autoadd_null_values(
      SseDeserializer deserializer);

  @protected
  RowCount? sse_decode_opt_box_autoadd_row_count(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer);

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer);

  @protected
  List<bool>? sse_decode_opt_list_bool(SseDeserializer deserializer);

  @protected
  List<DataType>? sse_decode_opt_list_data_type(SseDeserializer deserializer);

  @protected
  List<Expr>? sse_decode_opt_list_expr(SseDeserializer deserializer);

  @protected
  List<String?>? sse_decode_opt_list_opt_String(SseDeserializer deserializer);

  @protected
  List<Duration?>? sse_decode_opt_list_opt_box_autoadd_Chrono_Duration(
      SseDeserializer deserializer);

  @protected
  List<double?>? sse_decode_opt_list_opt_box_autoadd_f_64(
      SseDeserializer deserializer);

  @protected
  List<int?>? sse_decode_opt_list_opt_box_autoadd_i_32(
      SseDeserializer deserializer);

  @protected
  List<int?>? sse_decode_opt_list_opt_box_autoadd_i_64(
      SseDeserializer deserializer);

  @protected
  Float64List? sse_decode_opt_list_prim_f_64(SseDeserializer deserializer);

  @protected
  Uint32List? sse_decode_opt_list_prim_u_32(SseDeserializer deserializer);

  @protected
  QuantileInterpolOptions sse_decode_quantile_interpol_options(
      SseDeserializer deserializer);

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer);

  @protected
  RowCount sse_decode_row_count(SseDeserializer deserializer);

  @protected
  Shape sse_decode_shape(SseDeserializer deserializer);

  @protected
  SortOptions sse_decode_sort_options(SseDeserializer deserializer);

  @protected
  TimeUnit sse_decode_time_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  UniqueKeepStrategy sse_decode_unique_keep_strategy(
      SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  WindowMapping sse_decode_window_mapping(SseDeserializer deserializer);

  @protected
  WindowType sse_decode_window_type(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_AnyhowException(
      AnyhowException raw) {
    throw UnimplementedError();
  }

  @protected
  int cst_encode_Chrono_Duration(Duration raw) {
    return cst_encode_i_64(raw.inMicroseconds);
  }

  @protected
  int cst_encode_Chrono_Local(DateTime raw) {
    return cst_encode_i_64(raw.microsecondsSinceEpoch);
  }

  @protected
  int cst_encode_Chrono_Naive(DateTime raw) {
    return cst_encode_i_64(raw.microsecondsSinceEpoch);
  }

  @protected
  int cst_encode_Chrono_Utc(DateTime raw) {
    return cst_encode_i_64(raw.microsecondsSinceEpoch);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_String(String raw) {
    return cst_encode_list_prim_u_8(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_box_autoadd_Chrono_Duration(Duration raw) {
    return wire
        .cst_new_box_autoadd_Chrono_Duration(cst_encode_Chrono_Duration(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_box_autoadd_Chrono_Local(DateTime raw) {
    return wire.cst_new_box_autoadd_Chrono_Local(cst_encode_Chrono_Local(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_box_autoadd_Chrono_Naive(DateTime raw) {
    return wire.cst_new_box_autoadd_Chrono_Naive(cst_encode_Chrono_Naive(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_box_autoadd_Chrono_Utc(DateTime raw) {
    return wire.cst_new_box_autoadd_Chrono_Utc(cst_encode_Chrono_Utc(raw));
  }

  @protected
  ffi.Pointer<wire_cst_agg_expr> cst_encode_box_autoadd_agg_expr(AggExpr raw) {
    final ptr = wire.cst_new_box_autoadd_agg_expr();
    cst_api_fill_to_wire_agg_expr(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_box_autoadd_bool(bool raw) {
    return wire.cst_new_box_autoadd_bool(cst_encode_bool(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_csv_encoding(CsvEncoding raw) {
    return wire.cst_new_box_autoadd_csv_encoding(cst_encode_csv_encoding(raw));
  }

  @protected
  ffi.Pointer<wire_cst_data_type> cst_encode_box_autoadd_data_type(
      DataType raw) {
    final ptr = wire.cst_new_box_autoadd_data_type();
    cst_api_fill_to_wire_data_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_expr> cst_encode_box_autoadd_expr(Expr raw) {
    final ptr = wire.cst_new_box_autoadd_expr();
    cst_api_fill_to_wire_expr(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Double> cst_encode_box_autoadd_f_64(double raw) {
    return wire.cst_new_box_autoadd_f_64(cst_encode_f_64(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_box_autoadd_i_32(int raw) {
    return wire.cst_new_box_autoadd_i_32(cst_encode_i_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_box_autoadd_i_64(int raw) {
    return wire.cst_new_box_autoadd_i_64(cst_encode_i_64(raw));
  }

  @protected
  ffi.Pointer<wire_cst_literal_value> cst_encode_box_autoadd_literal_value(
      LiteralValue raw) {
    final ptr = wire.cst_new_box_autoadd_literal_value();
    cst_api_fill_to_wire_literal_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_null_values> cst_encode_box_autoadd_null_values(
      NullValues raw) {
    final ptr = wire.cst_new_box_autoadd_null_values();
    cst_api_fill_to_wire_null_values(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_row_count> cst_encode_box_autoadd_row_count(
      RowCount raw) {
    final ptr = wire.cst_new_box_autoadd_row_count();
    cst_api_fill_to_wire_row_count(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sort_options> cst_encode_box_autoadd_sort_options(
      SortOptions raw) {
    final ptr = wire.cst_new_box_autoadd_sort_options();
    cst_api_fill_to_wire_sort_options(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_box_autoadd_u_32(int raw) {
    return wire.cst_new_box_autoadd_u_32(cst_encode_u_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(int raw) {
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  ffi.Pointer<ffi.UintPtr> cst_encode_box_autoadd_usize(int raw) {
    return wire.cst_new_box_autoadd_usize(cst_encode_usize(raw));
  }

  @protected
  ffi.Pointer<wire_cst_window_type> cst_encode_box_autoadd_window_type(
      WindowType raw) {
    final ptr = wire.cst_new_box_autoadd_window_type();
    cst_api_fill_to_wire_window_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_data_type> cst_encode_box_data_type(DataType raw) {
    final ptr = wire.cst_new_box_data_type();
    cst_api_fill_to_wire_data_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_expr> cst_encode_box_expr(Expr raw) {
    final ptr = wire.cst_new_box_expr();
    cst_api_fill_to_wire_expr(raw, ptr.ref);
    return ptr;
  }

  @protected
  int cst_encode_i_64(int raw) {
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_list_String(List<String> raw) {
    final ans = wire.cst_new_list_String(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_bool> cst_encode_list_bool(List<bool> raw) {
    final ans = wire.cst_new_list_bool(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_bool(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_dartabi> cst_encode_list_dartabi(
      List<dynamic> raw) {
    final ans = wire.cst_new_list_dartabi(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_dartabi(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_data_type> cst_encode_list_data_type(
      List<DataType> raw) {
    final ans = wire.cst_new_list_data_type(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_data_type(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_excluded> cst_encode_list_excluded(
      List<Excluded> raw) {
    final ans = wire.cst_new_list_excluded(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_excluded(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_expr> cst_encode_list_expr(List<Expr> raw) {
    final ans = wire.cst_new_list_expr(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_expr(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_field> cst_encode_list_field(List<Field> raw) {
    final ans = wire.cst_new_list_field(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_field(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_String> cst_encode_list_opt_String(
      List<String?> raw) {
    final ans = wire.cst_new_list_opt_String(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>
      cst_encode_list_opt_box_autoadd_Chrono_Duration(List<Duration?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_Chrono_Duration(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_Chrono_Duration(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Local>
      cst_encode_list_opt_box_autoadd_Chrono_Local(List<DateTime?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_Chrono_Local(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_Chrono_Local(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Naive>
      cst_encode_list_opt_box_autoadd_Chrono_Naive(List<DateTime?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_Chrono_Naive(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_Chrono_Naive(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Utc>
      cst_encode_list_opt_box_autoadd_Chrono_Utc(List<DateTime?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_Chrono_Utc(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_Chrono_Utc(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>
      cst_encode_list_opt_box_autoadd_f_64(List<double?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_f_64(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_f_64(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>
      cst_encode_list_opt_box_autoadd_i_32(List<int?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_i_32(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_i_32(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>
      cst_encode_list_opt_box_autoadd_i_64(List<int?> raw) {
    final ans = wire.cst_new_list_opt_box_autoadd_i_64(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_opt_box_autoadd_i_64(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_f_64> cst_encode_list_prim_f_64(
      Float64List raw) {
    final ans = wire.cst_new_list_prim_f_64(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_i_64> cst_encode_list_prim_i_64(
      Int64List raw) {
    final ans = wire.cst_new_list_prim_i_64(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw.inner);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_32> cst_encode_list_prim_u_32(
      Uint32List raw) {
    final ans = wire.cst_new_list_prim_u_32(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_list_prim_u_8(Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_record_string_string>
      cst_encode_list_record_string_string(List<(String, String)> raw) {
    final ans = wire.cst_new_list_record_string_string(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_record_string_string(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_opt_box_autoadd_Chrono_Duration(
      Duration? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_opt_box_autoadd_Chrono_Local(
      DateTime? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_Chrono_Local(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_opt_box_autoadd_Chrono_Naive(
      DateTime? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_Chrono_Naive(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_opt_box_autoadd_Chrono_Utc(DateTime? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_Chrono_Utc(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_csv_encoding(
      CsvEncoding? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_csv_encoding(raw);
  }

  @protected
  ffi.Pointer<ffi.Double> cst_encode_opt_box_autoadd_f_64(double? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_f_64(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> cst_encode_opt_box_autoadd_i_32(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_i_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_opt_box_autoadd_i_64(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_i_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_null_values> cst_encode_opt_box_autoadd_null_values(
      NullValues? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_null_values(raw);
  }

  @protected
  ffi.Pointer<wire_cst_row_count> cst_encode_opt_box_autoadd_row_count(
      RowCount? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_row_count(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_opt_box_autoadd_u_32(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  ffi.Pointer<ffi.UintPtr> cst_encode_opt_box_autoadd_usize(int? raw) {
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_usize(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_opt_list_String(
      List<String>? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_bool> cst_encode_opt_list_bool(List<bool>? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_bool(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_data_type> cst_encode_opt_list_data_type(
      List<DataType>? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_data_type(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_expr> cst_encode_opt_list_expr(List<Expr>? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_expr(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_String> cst_encode_opt_list_opt_String(
      List<String?>? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_opt_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>
      cst_encode_opt_list_opt_box_autoadd_Chrono_Duration(
          List<Duration?>? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_list_opt_box_autoadd_Chrono_Duration(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>
      cst_encode_opt_list_opt_box_autoadd_f_64(List<double?>? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_list_opt_box_autoadd_f_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>
      cst_encode_opt_list_opt_box_autoadd_i_32(List<int?>? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_list_opt_box_autoadd_i_32(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>
      cst_encode_opt_list_opt_box_autoadd_i_64(List<int?>? raw) {
    return raw == null
        ? ffi.nullptr
        : cst_encode_list_opt_box_autoadd_i_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_f_64> cst_encode_opt_list_prim_f_64(
      Float64List? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_prim_f_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_32> cst_encode_opt_list_prim_u_32(
      Uint32List? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_prim_u_32(raw);
  }

  @protected
  int cst_encode_u_64(int raw) {
    return raw.toInt();
  }

  @protected
  void cst_api_fill_to_wire_agg_expr(
      AggExpr apiObj, wire_cst_agg_expr wireObj) {
    if (apiObj is AggExpr_Min) {
      var pre_input = cst_encode_box_expr(apiObj.input);
      var pre_propagate_nans = cst_encode_bool(apiObj.propagateNans);
      wireObj.tag = 0;
      wireObj.kind = wire.cst_inflate_AggExpr_Min();
      wireObj.kind.ref.Min.ref.input = pre_input;
      wireObj.kind.ref.Min.ref.propagate_nans = pre_propagate_nans;
      return;
    }
    if (apiObj is AggExpr_Max) {
      var pre_input = cst_encode_box_expr(apiObj.input);
      var pre_propagate_nans = cst_encode_bool(apiObj.propagateNans);
      wireObj.tag = 1;
      wireObj.kind = wire.cst_inflate_AggExpr_Max();
      wireObj.kind.ref.Max.ref.input = pre_input;
      wireObj.kind.ref.Max.ref.propagate_nans = pre_propagate_nans;
      return;
    }
    if (apiObj is AggExpr_Median) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = wire.cst_inflate_AggExpr_Median();
      wireObj.kind.ref.Median.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_NUnique) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = wire.cst_inflate_AggExpr_NUnique();
      wireObj.kind.ref.NUnique.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_First) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = wire.cst_inflate_AggExpr_First();
      wireObj.kind.ref.First.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Last) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = wire.cst_inflate_AggExpr_Last();
      wireObj.kind.ref.Last.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Mean) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind = wire.cst_inflate_AggExpr_Mean();
      wireObj.kind.ref.Mean.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Count) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind = wire.cst_inflate_AggExpr_Count();
      wireObj.kind.ref.Count.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Quantile) {
      var pre_expr = cst_encode_box_expr(apiObj.expr);
      var pre_quantile = cst_encode_box_expr(apiObj.quantile);
      var pre_interpol = cst_encode_quantile_interpol_options(apiObj.interpol);
      wireObj.tag = 8;
      wireObj.kind = wire.cst_inflate_AggExpr_Quantile();
      wireObj.kind.ref.Quantile.ref.expr = pre_expr;
      wireObj.kind.ref.Quantile.ref.quantile = pre_quantile;
      wireObj.kind.ref.Quantile.ref.interpol = pre_interpol;
      return;
    }
    if (apiObj is AggExpr_Sum) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind = wire.cst_inflate_AggExpr_Sum();
      wireObj.kind.ref.Sum.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_AggGroups) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind = wire.cst_inflate_AggExpr_AggGroups();
      wireObj.kind.ref.AggGroups.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Std) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      var pre_field1 = cst_encode_u_8(apiObj.field1);
      wireObj.tag = 11;
      wireObj.kind = wire.cst_inflate_AggExpr_Std();
      wireObj.kind.ref.Std.ref.field0 = pre_field0;
      wireObj.kind.ref.Std.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is AggExpr_Var) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      var pre_field1 = cst_encode_u_8(apiObj.field1);
      wireObj.tag = 12;
      wireObj.kind = wire.cst_inflate_AggExpr_Var();
      wireObj.kind.ref.Var.ref.field0 = pre_field0;
      wireObj.kind.ref.Var.ref.field1 = pre_field1;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_agg_expr(
      AggExpr apiObj, ffi.Pointer<wire_cst_agg_expr> wireObj) {
    cst_api_fill_to_wire_agg_expr(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_data_type(
      DataType apiObj, ffi.Pointer<wire_cst_data_type> wireObj) {
    cst_api_fill_to_wire_data_type(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_expr(
      Expr apiObj, ffi.Pointer<wire_cst_expr> wireObj) {
    cst_api_fill_to_wire_expr(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_literal_value(
      LiteralValue apiObj, ffi.Pointer<wire_cst_literal_value> wireObj) {
    cst_api_fill_to_wire_literal_value(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_null_values(
      NullValues apiObj, ffi.Pointer<wire_cst_null_values> wireObj) {
    cst_api_fill_to_wire_null_values(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_row_count(
      RowCount apiObj, ffi.Pointer<wire_cst_row_count> wireObj) {
    cst_api_fill_to_wire_row_count(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sort_options(
      SortOptions apiObj, ffi.Pointer<wire_cst_sort_options> wireObj) {
    cst_api_fill_to_wire_sort_options(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_window_type(
      WindowType apiObj, ffi.Pointer<wire_cst_window_type> wireObj) {
    cst_api_fill_to_wire_window_type(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_data_type(
      DataType apiObj, ffi.Pointer<wire_cst_data_type> wireObj) {
    cst_api_fill_to_wire_data_type(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_expr(
      Expr apiObj, ffi.Pointer<wire_cst_expr> wireObj) {
    cst_api_fill_to_wire_expr(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_data_type(
      DataType apiObj, wire_cst_data_type wireObj) {
    if (apiObj is DataType_Boolean) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DataType_UInt8) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DataType_UInt16) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is DataType_UInt32) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is DataType_UInt64) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is DataType_Int8) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is DataType_Int16) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is DataType_Int32) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is DataType_Int64) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is DataType_Float32) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is DataType_Float64) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is DataType_Utf8) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is DataType_Binary) {
      wireObj.tag = 12;
      return;
    }
    if (apiObj is DataType_Date) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is DataType_Datetime) {
      var pre_field0 = cst_encode_time_unit(apiObj.field0);
      var pre_field1 = cst_encode_opt_String(apiObj.field1);
      wireObj.tag = 14;
      wireObj.kind = wire.cst_inflate_DataType_Datetime();
      wireObj.kind.ref.Datetime.ref.field0 = pre_field0;
      wireObj.kind.ref.Datetime.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is DataType_Duration) {
      var pre_field0 = cst_encode_time_unit(apiObj.field0);
      wireObj.tag = 15;
      wireObj.kind = wire.cst_inflate_DataType_Duration();
      wireObj.kind.ref.Duration.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Time) {
      wireObj.tag = 16;
      return;
    }
    if (apiObj is DataType_List) {
      var pre_field0 = cst_encode_box_data_type(apiObj.field0);
      wireObj.tag = 17;
      wireObj.kind = wire.cst_inflate_DataType_List();
      wireObj.kind.ref.List.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Null) {
      wireObj.tag = 18;
      return;
    }
    if (apiObj is DataType_Struct) {
      var pre_field0 = cst_encode_list_field(apiObj.field0);
      wireObj.tag = 19;
      wireObj.kind = wire.cst_inflate_DataType_Struct();
      wireObj.kind.ref.Struct.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Unknown) {
      wireObj.tag = 20;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_excluded(
      Excluded apiObj, wire_cst_excluded wireObj) {
    if (apiObj is Excluded_Name) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = wire.cst_inflate_Excluded_Name();
      wireObj.kind.ref.Name.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Excluded_Dtype) {
      var pre_field0 = cst_encode_box_autoadd_data_type(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = wire.cst_inflate_Excluded_Dtype();
      wireObj.kind.ref.Dtype.ref.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_expr(Expr apiObj, wire_cst_expr wireObj) {
    if (apiObj is Expr_Alias) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      var pre_field1 = cst_encode_String(apiObj.field1);
      wireObj.tag = 0;
      wireObj.kind = wire.cst_inflate_Expr_Alias();
      wireObj.kind.ref.Alias.ref.field0 = pre_field0;
      wireObj.kind.ref.Alias.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is Expr_Column) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = wire.cst_inflate_Expr_Column();
      wireObj.kind.ref.Column.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Columns) {
      var pre_field0 = cst_encode_list_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = wire.cst_inflate_Expr_Columns();
      wireObj.kind.ref.Columns.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_DtypeColumn) {
      var pre_field0 = cst_encode_list_data_type(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = wire.cst_inflate_Expr_DtypeColumn();
      wireObj.kind.ref.DtypeColumn.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Literal) {
      var pre_field0 = cst_encode_box_autoadd_literal_value(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = wire.cst_inflate_Expr_Literal();
      wireObj.kind.ref.Literal.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_BinaryExpr) {
      var pre_left = cst_encode_box_expr(apiObj.left);
      var pre_op = cst_encode_operator(apiObj.op);
      var pre_right = cst_encode_box_expr(apiObj.right);
      wireObj.tag = 5;
      wireObj.kind = wire.cst_inflate_Expr_BinaryExpr();
      wireObj.kind.ref.BinaryExpr.ref.left = pre_left;
      wireObj.kind.ref.BinaryExpr.ref.op = pre_op;
      wireObj.kind.ref.BinaryExpr.ref.right = pre_right;
      return;
    }
    if (apiObj is Expr_Cast) {
      var pre_expr = cst_encode_box_expr(apiObj.expr);
      var pre_data_type = cst_encode_box_autoadd_data_type(apiObj.dataType);
      var pre_strict = cst_encode_bool(apiObj.strict);
      wireObj.tag = 6;
      wireObj.kind = wire.cst_inflate_Expr_Cast();
      wireObj.kind.ref.Cast.ref.expr = pre_expr;
      wireObj.kind.ref.Cast.ref.data_type = pre_data_type;
      wireObj.kind.ref.Cast.ref.strict = pre_strict;
      return;
    }
    if (apiObj is Expr_Sort) {
      var pre_expr = cst_encode_box_expr(apiObj.expr);
      var pre_options = cst_encode_box_autoadd_sort_options(apiObj.options);
      wireObj.tag = 7;
      wireObj.kind = wire.cst_inflate_Expr_Sort();
      wireObj.kind.ref.Sort.ref.expr = pre_expr;
      wireObj.kind.ref.Sort.ref.options = pre_options;
      return;
    }
    if (apiObj is Expr_Gather) {
      var pre_expr = cst_encode_box_expr(apiObj.expr);
      var pre_idx = cst_encode_box_expr(apiObj.idx);
      var pre_returns_scalar = cst_encode_bool(apiObj.returnsScalar);
      wireObj.tag = 8;
      wireObj.kind = wire.cst_inflate_Expr_Gather();
      wireObj.kind.ref.Gather.ref.expr = pre_expr;
      wireObj.kind.ref.Gather.ref.idx = pre_idx;
      wireObj.kind.ref.Gather.ref.returns_scalar = pre_returns_scalar;
      return;
    }
    if (apiObj is Expr_SortBy) {
      var pre_expr = cst_encode_box_expr(apiObj.expr);
      var pre_by = cst_encode_list_expr(apiObj.by);
      var pre_descending = cst_encode_list_bool(apiObj.descending);
      wireObj.tag = 9;
      wireObj.kind = wire.cst_inflate_Expr_SortBy();
      wireObj.kind.ref.SortBy.ref.expr = pre_expr;
      wireObj.kind.ref.SortBy.ref.by = pre_by;
      wireObj.kind.ref.SortBy.ref.descending = pre_descending;
      return;
    }
    if (apiObj is Expr_Agg) {
      var pre_field0 = cst_encode_box_autoadd_agg_expr(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind = wire.cst_inflate_Expr_Agg();
      wireObj.kind.ref.Agg.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Ternary) {
      var pre_predicate = cst_encode_box_expr(apiObj.predicate);
      var pre_truthy = cst_encode_box_expr(apiObj.truthy);
      var pre_falsy = cst_encode_box_expr(apiObj.falsy);
      wireObj.tag = 11;
      wireObj.kind = wire.cst_inflate_Expr_Ternary();
      wireObj.kind.ref.Ternary.ref.predicate = pre_predicate;
      wireObj.kind.ref.Ternary.ref.truthy = pre_truthy;
      wireObj.kind.ref.Ternary.ref.falsy = pre_falsy;
      return;
    }
    if (apiObj is Expr_Explode) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 12;
      wireObj.kind = wire.cst_inflate_Expr_Explode();
      wireObj.kind.ref.Explode.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Filter) {
      var pre_input = cst_encode_box_expr(apiObj.input);
      var pre_by = cst_encode_box_expr(apiObj.by);
      wireObj.tag = 13;
      wireObj.kind = wire.cst_inflate_Expr_Filter();
      wireObj.kind.ref.Filter.ref.input = pre_input;
      wireObj.kind.ref.Filter.ref.by = pre_by;
      return;
    }
    if (apiObj is Expr_Window) {
      var pre_function = cst_encode_box_expr(apiObj.function);
      var pre_partition_by = cst_encode_list_expr(apiObj.partitionBy);
      var pre_options = cst_encode_box_autoadd_window_type(apiObj.options);
      wireObj.tag = 14;
      wireObj.kind = wire.cst_inflate_Expr_Window();
      wireObj.kind.ref.Window.ref.function = pre_function;
      wireObj.kind.ref.Window.ref.partition_by = pre_partition_by;
      wireObj.kind.ref.Window.ref.options = pre_options;
      return;
    }
    if (apiObj is Expr_Wildcard) {
      wireObj.tag = 15;
      return;
    }
    if (apiObj is Expr_Slice) {
      var pre_input = cst_encode_box_expr(apiObj.input);
      var pre_offset = cst_encode_box_expr(apiObj.offset);
      var pre_length = cst_encode_box_expr(apiObj.length);
      wireObj.tag = 16;
      wireObj.kind = wire.cst_inflate_Expr_Slice();
      wireObj.kind.ref.Slice.ref.input = pre_input;
      wireObj.kind.ref.Slice.ref.offset = pre_offset;
      wireObj.kind.ref.Slice.ref.length = pre_length;
      return;
    }
    if (apiObj is Expr_Exclude) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      var pre_field1 = cst_encode_list_excluded(apiObj.field1);
      wireObj.tag = 17;
      wireObj.kind = wire.cst_inflate_Expr_Exclude();
      wireObj.kind.ref.Exclude.ref.field0 = pre_field0;
      wireObj.kind.ref.Exclude.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is Expr_KeepName) {
      var pre_field0 = cst_encode_box_expr(apiObj.field0);
      wireObj.tag = 18;
      wireObj.kind = wire.cst_inflate_Expr_KeepName();
      wireObj.kind.ref.KeepName.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Count) {
      wireObj.tag = 19;
      return;
    }
    if (apiObj is Expr_Nth) {
      var pre_field0 = cst_encode_i_64(apiObj.field0);
      wireObj.tag = 20;
      wireObj.kind = wire.cst_inflate_Expr_Nth();
      wireObj.kind.ref.Nth.ref.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_field(Field apiObj, wire_cst_field wireObj) {
    wireObj.name = cst_encode_String(apiObj.name);
    cst_api_fill_to_wire_data_type(apiObj.dtype, wireObj.dtype);
  }

  @protected
  void cst_api_fill_to_wire_literal_value(
      LiteralValue apiObj, wire_cst_literal_value wireObj) {
    if (apiObj is LiteralValue_Null) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is LiteralValue_Boolean) {
      var pre_field0 = cst_encode_bool(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = wire.cst_inflate_LiteralValue_Boolean();
      wireObj.kind.ref.Boolean.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Utf8) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = wire.cst_inflate_LiteralValue_Utf8();
      wireObj.kind.ref.Utf8.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Binary) {
      var pre_field0 = cst_encode_list_prim_u_8(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = wire.cst_inflate_LiteralValue_Binary();
      wireObj.kind.ref.Binary.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt8) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = wire.cst_inflate_LiteralValue_UInt8();
      wireObj.kind.ref.UInt8.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt16) {
      var pre_field0 = cst_encode_u_16(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = wire.cst_inflate_LiteralValue_UInt16();
      wireObj.kind.ref.UInt16.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt32) {
      var pre_field0 = cst_encode_u_32(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind = wire.cst_inflate_LiteralValue_UInt32();
      wireObj.kind.ref.UInt32.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt64) {
      var pre_field0 = cst_encode_u_64(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind = wire.cst_inflate_LiteralValue_UInt64();
      wireObj.kind.ref.UInt64.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int8) {
      var pre_field0 = cst_encode_i_8(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind = wire.cst_inflate_LiteralValue_Int8();
      wireObj.kind.ref.Int8.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int16) {
      var pre_field0 = cst_encode_i_16(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind = wire.cst_inflate_LiteralValue_Int16();
      wireObj.kind.ref.Int16.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int32) {
      var pre_field0 = cst_encode_i_32(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind = wire.cst_inflate_LiteralValue_Int32();
      wireObj.kind.ref.Int32.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int64) {
      var pre_field0 = cst_encode_i_64(apiObj.field0);
      wireObj.tag = 11;
      wireObj.kind = wire.cst_inflate_LiteralValue_Int64();
      wireObj.kind.ref.Int64.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Float32) {
      var pre_field0 = cst_encode_f_32(apiObj.field0);
      wireObj.tag = 12;
      wireObj.kind = wire.cst_inflate_LiteralValue_Float32();
      wireObj.kind.ref.Float32.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Float64) {
      var pre_field0 = cst_encode_f_64(apiObj.field0);
      wireObj.tag = 13;
      wireObj.kind = wire.cst_inflate_LiteralValue_Float64();
      wireObj.kind.ref.Float64.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Range) {
      var pre_low = cst_encode_i_64(apiObj.low);
      var pre_high = cst_encode_i_64(apiObj.high);
      var pre_data_type = cst_encode_box_autoadd_data_type(apiObj.dataType);
      wireObj.tag = 14;
      wireObj.kind = wire.cst_inflate_LiteralValue_Range();
      wireObj.kind.ref.Range.ref.low = pre_low;
      wireObj.kind.ref.Range.ref.high = pre_high;
      wireObj.kind.ref.Range.ref.data_type = pre_data_type;
      return;
    }
    if (apiObj is LiteralValue_DateTime) {
      var pre_field0 = cst_encode_i_64(apiObj.field0);
      var pre_field1 = cst_encode_time_unit(apiObj.field1);
      var pre_field2 = cst_encode_opt_String(apiObj.field2);
      wireObj.tag = 15;
      wireObj.kind = wire.cst_inflate_LiteralValue_DateTime();
      wireObj.kind.ref.DateTime.ref.field0 = pre_field0;
      wireObj.kind.ref.DateTime.ref.field1 = pre_field1;
      wireObj.kind.ref.DateTime.ref.field2 = pre_field2;
      return;
    }
    if (apiObj is LiteralValue_Duration) {
      var pre_field0 = cst_encode_i_64(apiObj.field0);
      var pre_field1 = cst_encode_time_unit(apiObj.field1);
      wireObj.tag = 16;
      wireObj.kind = wire.cst_inflate_LiteralValue_Duration();
      wireObj.kind.ref.Duration.ref.field0 = pre_field0;
      wireObj.kind.ref.Duration.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is LiteralValue_Date) {
      var pre_field0 = cst_encode_i_32(apiObj.field0);
      wireObj.tag = 17;
      wireObj.kind = wire.cst_inflate_LiteralValue_Date();
      wireObj.kind.ref.Date.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Time) {
      var pre_field0 = cst_encode_i_64(apiObj.field0);
      wireObj.tag = 18;
      wireObj.kind = wire.cst_inflate_LiteralValue_Time();
      wireObj.kind.ref.Time.ref.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_null_values(
      NullValues apiObj, wire_cst_null_values wireObj) {
    if (apiObj is NullValues_AllColumnsSingle) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = wire.cst_inflate_NullValues_AllColumnsSingle();
      wireObj.kind.ref.AllColumnsSingle.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is NullValues_AllColumns) {
      var pre_field0 = cst_encode_list_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = wire.cst_inflate_NullValues_AllColumns();
      wireObj.kind.ref.AllColumns.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is NullValues_Named) {
      var pre_field0 = cst_encode_list_record_string_string(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = wire.cst_inflate_NullValues_Named();
      wireObj.kind.ref.Named.ref.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_record_string_string(
      (String, String) apiObj, wire_cst_record_string_string wireObj) {
    wireObj.field0 = cst_encode_String(apiObj.$1);
    wireObj.field1 = cst_encode_String(apiObj.$2);
  }

  @protected
  void cst_api_fill_to_wire_row_count(
      RowCount apiObj, wire_cst_row_count wireObj) {
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.offset = cst_encode_u_32(apiObj.offset);
  }

  @protected
  void cst_api_fill_to_wire_shape(Shape apiObj, wire_cst_shape wireObj) {
    wireObj.height = cst_encode_usize(apiObj.height);
    wireObj.width = cst_encode_usize(apiObj.width);
  }

  @protected
  void cst_api_fill_to_wire_sort_options(
      SortOptions apiObj, wire_cst_sort_options wireObj) {
    wireObj.descending = cst_encode_bool(apiObj.descending);
    wireObj.nulls_last = cst_encode_bool(apiObj.nullsLast);
    wireObj.multithreaded = cst_encode_bool(apiObj.multithreaded);
    wireObj.maintain_order = cst_encode_bool(apiObj.maintainOrder);
  }

  @protected
  void cst_api_fill_to_wire_window_type(
      WindowType apiObj, wire_cst_window_type wireObj) {
    if (apiObj is WindowType_Over) {
      var pre_field0 = cst_encode_window_mapping(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = wire.cst_inflate_WindowType_Over();
      wireObj.kind.ref.Over.ref.field0 = pre_field0;
      return;
    }
  }

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
          Series raw);

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
          Schema raw);

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
          Series raw);

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
          DataFrame raw);

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
          LazyFrame raw);

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
          LazyGroupBy raw);

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperSchema(
          Schema raw);

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperSeries(
          Series raw);

  @protected
  PlatformPointer
      cst_encode_Auto_RefMut_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
          DataFrame raw);

  @protected
  PlatformPointer
      cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
          DataFrame raw);

  @protected
  PlatformPointer
      cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockcratewrapperSeries(
          Series raw);

  @protected
  PlatformPointer
      cst_encode_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
          Series raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
      Schema raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
      Series raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      DataFrame raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
      LazyFrame raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
      LazyGroupBy raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockcratewrapperSchema(
      Schema raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockcratewrapperSeries(
      Series raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_csv_encoding(CsvEncoding raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_i_16(int raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_i_8(int raw);

  @protected
  int cst_encode_join_type(JoinType raw);

  @protected
  int cst_encode_operator(Operator raw);

  @protected
  int cst_encode_quantile_interpol_options(QuantileInterpolOptions raw);

  @protected
  int cst_encode_time_unit(TimeUnit raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  int cst_encode_unique_keep_strategy(UniqueKeepStrategy raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  int cst_encode_window_mapping(WindowMapping raw);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
          Series self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
      Schema self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      DataFrame self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
      LazyFrame self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
      LazyGroupBy self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperSchema(
      Schema self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockcratewrapperSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_RefMut_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      DataFrame self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      DataFrame self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockcratewrapperSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer);

  @protected
  void sse_encode_Chrono_Local(DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_Chrono_Naive(DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
      Schema self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      DataFrame self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
      LazyFrame self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
      LazyGroupBy self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockcratewrapperSchema(
      Schema self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockcratewrapperSeries(
      Series self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_agg_expr(AggExpr self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_Chrono_Duration(
      Duration self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_Chrono_Local(
      DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_Chrono_Naive(
      DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_Chrono_Utc(
      DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_agg_expr(AggExpr self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_csv_encoding(
      CsvEncoding self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_data_type(
      DataType self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_expr(Expr self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_literal_value(
      LiteralValue self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_null_values(
      NullValues self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_row_count(
      RowCount self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sort_options(
      SortOptions self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_window_type(
      WindowType self, SseSerializer serializer);

  @protected
  void sse_encode_box_data_type(DataType self, SseSerializer serializer);

  @protected
  void sse_encode_box_expr(Expr self, SseSerializer serializer);

  @protected
  void sse_encode_csv_encoding(CsvEncoding self, SseSerializer serializer);

  @protected
  void sse_encode_dartabi(dynamic self, SseSerializer serializer);

  @protected
  void sse_encode_data_type(DataType self, SseSerializer serializer);

  @protected
  void sse_encode_excluded(Excluded self, SseSerializer serializer);

  @protected
  void sse_encode_expr(Expr self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_field(Field self, SseSerializer serializer);

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_join_type(JoinType self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_bool(List<bool> self, SseSerializer serializer);

  @protected
  void sse_encode_list_dartabi(List<dynamic> self, SseSerializer serializer);

  @protected
  void sse_encode_list_data_type(List<DataType> self, SseSerializer serializer);

  @protected
  void sse_encode_list_excluded(List<Excluded> self, SseSerializer serializer);

  @protected
  void sse_encode_list_expr(List<Expr> self, SseSerializer serializer);

  @protected
  void sse_encode_list_field(List<Field> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_String(List<String?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_Chrono_Duration(
      List<Duration?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_Chrono_Local(
      List<DateTime?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_Chrono_Naive(
      List<DateTime?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_Chrono_Utc(
      List<DateTime?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_f_64(
      List<double?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_i_32(
      List<int?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_i_64(
      List<int?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_f_64(Float64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_i_64(Int64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_32(Uint32List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer);

  @protected
  void sse_encode_literal_value(LiteralValue self, SseSerializer serializer);

  @protected
  void sse_encode_null_values(NullValues self, SseSerializer serializer);

  @protected
  void sse_encode_operator(Operator self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Duration(
      Duration? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Local(
      DateTime? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Naive(
      DateTime? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_Chrono_Utc(
      DateTime? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_csv_encoding(
      CsvEncoding? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_64(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_null_values(
      NullValues? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_row_count(
      RowCount? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_usize(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_String(List<String>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_bool(List<bool>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_data_type(
      List<DataType>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_expr(List<Expr>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_String(
      List<String?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_box_autoadd_Chrono_Duration(
      List<Duration?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_box_autoadd_f_64(
      List<double?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_box_autoadd_i_32(
      List<int?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_opt_box_autoadd_i_64(
      List<int?>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_f_64(
      Float64List? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_u_32(
      Uint32List? self, SseSerializer serializer);

  @protected
  void sse_encode_quantile_interpol_options(
      QuantileInterpolOptions self, SseSerializer serializer);

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer);

  @protected
  void sse_encode_row_count(RowCount self, SseSerializer serializer);

  @protected
  void sse_encode_shape(Shape self, SseSerializer serializer);

  @protected
  void sse_encode_sort_options(SortOptions self, SseSerializer serializer);

  @protected
  void sse_encode_time_unit(TimeUnit self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unique_keep_strategy(
      UniqueKeepStrategy self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_window_mapping(WindowMapping self, SseSerializer serializer);

  @protected
  void sse_encode_window_type(WindowType self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32,
              ffi.Int32)>>('dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  WireSyncRust2DartDco wire_DataFrame_column(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> column,
  ) {
    return _wire_DataFrame_column(
      that,
      column,
    );
  }

  late final _wire_DataFrame_columnPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_DataFrame_column');
  late final _wire_DataFrame_column = _wire_DataFrame_columnPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_DataFrame_column_at(
    ffi.Pointer<ffi.Void> that,
    int index,
  ) {
    return _wire_DataFrame_column_at(
      that,
      index,
    );
  }

  late final _wire_DataFrame_column_atPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.UintPtr)>>('wire_DataFrame_column_at');
  late final _wire_DataFrame_column_at = _wire_DataFrame_column_atPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_DataFrame_columns(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> columns,
  ) {
    return _wire_DataFrame_columns(
      that,
      columns,
    );
  }

  late final _wire_DataFrame_columnsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>)>>('wire_DataFrame_columns');
  late final _wire_DataFrame_columns = _wire_DataFrame_columnsPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_String>)>();

  void wire_DataFrame_describe(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_f_64> percentiles,
  ) {
    return _wire_DataFrame_describe(
      port_,
      that,
      percentiles,
    );
  }

  late final _wire_DataFrame_describePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<wire_cst_list_prim_f_64>)>>(
      'wire_DataFrame_describe');
  late final _wire_DataFrame_describe = _wire_DataFrame_describePtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_f_64>)>();

  WireSyncRust2DartDco wire_DataFrame_drop(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> column,
  ) {
    return _wire_DataFrame_drop(
      that,
      column,
    );
  }

  late final _wire_DataFrame_dropPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_DataFrame_drop');
  late final _wire_DataFrame_drop = _wire_DataFrame_dropPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_DataFrame_drop_in_place(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> column,
  ) {
    return _wire_DataFrame_drop_in_place(
      that,
      column,
    );
  }

  late final _wire_DataFrame_drop_in_placePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>>(
      'wire_DataFrame_drop_in_place');
  late final _wire_DataFrame_drop_in_place =
      _wire_DataFrame_drop_in_placePtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>();

  WireSyncRust2DartDco wire_DataFrame_dtypes(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_dtypes(
      that,
    );
  }

  late final _wire_DataFrame_dtypesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_dtypes');
  late final _wire_DataFrame_dtypes = _wire_DataFrame_dtypesPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_dump(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_dump(
      that,
    );
  }

  late final _wire_DataFrame_dumpPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_dump');
  late final _wire_DataFrame_dump = _wire_DataFrame_dumpPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_estimated_size(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_estimated_size(
      that,
    );
  }

  late final _wire_DataFrame_estimated_sizePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_estimated_size');
  late final _wire_DataFrame_estimated_size = _wire_DataFrame_estimated_sizePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_get_column_names(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_get_column_names(
      that,
    );
  }

  late final _wire_DataFrame_get_column_namesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_get_column_names');
  late final _wire_DataFrame_get_column_names =
      _wire_DataFrame_get_column_namesPtr
          .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_get_columns(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_get_columns(
      that,
    );
  }

  late final _wire_DataFrame_get_columnsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_get_columns');
  late final _wire_DataFrame_get_columns = _wire_DataFrame_get_columnsPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_DataFrame_get_row(
    int port_,
    ffi.Pointer<ffi.Void> that,
    int index,
  ) {
    return _wire_DataFrame_get_row(
      port_,
      that,
      index,
    );
  }

  late final _wire_DataFrame_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('wire_DataFrame_get_row');
  late final _wire_DataFrame_get_row = _wire_DataFrame_get_rowPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_DataFrame_head(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_DataFrame_head(
      that,
      length,
    );
  }

  late final _wire_DataFrame_headPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_DataFrame_head');
  late final _wire_DataFrame_head = _wire_DataFrame_headPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_DataFrame_height(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_height(
      that,
    );
  }

  late final _wire_DataFrame_heightPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_height');
  late final _wire_DataFrame_height = _wire_DataFrame_heightPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_is_empty(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_is_empty(
      that,
    );
  }

  late final _wire_DataFrame_is_emptyPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_is_empty');
  late final _wire_DataFrame_is_empty = _wire_DataFrame_is_emptyPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_DataFrame_lazy(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Bool> projection_pushdown,
    ffi.Pointer<ffi.Bool> predicate_pushdown,
    ffi.Pointer<ffi.Bool> type_coercion,
    ffi.Pointer<ffi.Bool> simplify_expressions,
    ffi.Pointer<ffi.Bool> slice_pushdown,
    ffi.Pointer<ffi.Bool> streaming,
  ) {
    return _wire_DataFrame_lazy(
      port_,
      that,
      projection_pushdown,
      predicate_pushdown,
      type_coercion,
      simplify_expressions,
      slice_pushdown,
      streaming,
    );
  }

  late final _wire_DataFrame_lazyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>>('wire_DataFrame_lazy');
  late final _wire_DataFrame_lazy = _wire_DataFrame_lazyPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Bool>)>();

  void wire_DataFrame_max(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_max(
      port_,
      that,
    );
  }

  late final _wire_DataFrame_maxPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_DataFrame_max');
  late final _wire_DataFrame_max = _wire_DataFrame_maxPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_of(
    ffi.Pointer<ffi.Void> series,
  ) {
    return _wire_DataFrame_of(
      series,
    );
  }

  late final _wire_DataFrame_ofPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_of');
  late final _wire_DataFrame_of = _wire_DataFrame_ofPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_reverse(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_reverse(
      that,
    );
  }

  late final _wire_DataFrame_reversePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_reverse');
  late final _wire_DataFrame_reverse = _wire_DataFrame_reversePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_DataFrame_sample(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> n,
    bool with_replacement,
    bool shuffle,
    ffi.Pointer<ffi.Uint64> seed,
  ) {
    return _wire_DataFrame_sample(
      port_,
      that,
      n,
      with_replacement,
      shuffle,
      seed,
    );
  }

  late final _wire_DataFrame_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.Uint64>)>>('wire_DataFrame_sample');
  late final _wire_DataFrame_sample = _wire_DataFrame_samplePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, bool,
          bool, ffi.Pointer<ffi.Uint64>)>();

  WireSyncRust2DartDco wire_DataFrame_schema(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_schema(
      that,
    );
  }

  late final _wire_DataFrame_schemaPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_schema');
  late final _wire_DataFrame_schema = _wire_DataFrame_schemaPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_select(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> columns,
  ) {
    return _wire_DataFrame_select(
      that,
      columns,
    );
  }

  late final _wire_DataFrame_selectPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>)>>('wire_DataFrame_select');
  late final _wire_DataFrame_select = _wire_DataFrame_selectPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_String>)>();

  WireSyncRust2DartDco wire_DataFrame_shape(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_shape(
      that,
    );
  }

  late final _wire_DataFrame_shapePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_shape');
  late final _wire_DataFrame_shape = _wire_DataFrame_shapePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_DataFrame_sort_in_place(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> by_column,
    ffi.Pointer<wire_cst_list_bool> descending,
    bool maintain_order,
  ) {
    return _wire_DataFrame_sort_in_place(
      port_,
      that,
      by_column,
      descending,
      maintain_order,
    );
  }

  late final _wire_DataFrame_sort_in_placePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_bool>,
              ffi.Bool)>>('wire_DataFrame_sort_in_place');
  late final _wire_DataFrame_sort_in_place =
      _wire_DataFrame_sort_in_placePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_bool>,
              bool)>();

  WireSyncRust2DartDco wire_DataFrame_tail(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_DataFrame_tail(
      that,
      length,
    );
  }

  late final _wire_DataFrame_tailPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_DataFrame_tail');
  late final _wire_DataFrame_tail = _wire_DataFrame_tailPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_DataFrame_width(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_DataFrame_width(
      that,
    );
  }

  late final _wire_DataFrame_widthPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_DataFrame_width');
  late final _wire_DataFrame_width = _wire_DataFrame_widthPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_DataFrame_with_row_count(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _wire_DataFrame_with_row_count(
      that,
      name,
      offset,
    );
  }

  late final _wire_DataFrame_with_row_countPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Uint32>)>>('wire_DataFrame_with_row_count');
  late final _wire_DataFrame_with_row_count =
      _wire_DataFrame_with_row_countPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>, ffi.Pointer<ffi.Uint32>)>();

  WireSyncRust2DartDco wire_LazyFrame_cache(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_cache(
      that,
    );
  }

  late final _wire_LazyFrame_cachePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_cache');
  late final _wire_LazyFrame_cache = _wire_LazyFrame_cachePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_LazyFrame_collect(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_collect(
      port_,
      that,
    );
  }

  late final _wire_LazyFrame_collectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_LazyFrame_collect');
  late final _wire_LazyFrame_collect = _wire_LazyFrame_collectPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_cross_join(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_LazyFrame_cross_join(
      that,
      other,
    );
  }

  late final _wire_LazyFrame_cross_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_cross_join');
  late final _wire_LazyFrame_cross_join =
      _wire_LazyFrame_cross_joinPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_drop_nulls(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_expr> subset,
  ) {
    return _wire_LazyFrame_drop_nulls(
      that,
      subset,
    );
  }

  late final _wire_LazyFrame_drop_nullsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_expr>)>>('wire_LazyFrame_drop_nulls');
  late final _wire_LazyFrame_drop_nulls =
      _wire_LazyFrame_drop_nullsPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_expr>)>();

  WireSyncRust2DartDco wire_LazyFrame_explode(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_expr> columns,
  ) {
    return _wire_LazyFrame_explode(
      that,
      columns,
    );
  }

  late final _wire_LazyFrame_explodePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_expr>)>>('wire_LazyFrame_explode');
  late final _wire_LazyFrame_explode = _wire_LazyFrame_explodePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_expr>)>();

  void wire_LazyFrame_fetch(
    int port_,
    ffi.Pointer<ffi.Void> that,
    int n_rows,
  ) {
    return _wire_LazyFrame_fetch(
      port_,
      that,
      n_rows,
    );
  }

  late final _wire_LazyFrame_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('wire_LazyFrame_fetch');
  late final _wire_LazyFrame_fetch = _wire_LazyFrame_fetchPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_filter(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_expr> pred,
  ) {
    return _wire_LazyFrame_filter(
      that,
      pred,
    );
  }

  late final _wire_LazyFrame_filterPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_expr>)>>('wire_LazyFrame_filter');
  late final _wire_LazyFrame_filter = _wire_LazyFrame_filterPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_expr>)>();

  WireSyncRust2DartDco wire_LazyFrame_first(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_first(
      that,
    );
  }

  late final _wire_LazyFrame_firstPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_first');
  late final _wire_LazyFrame_first = _wire_LazyFrame_firstPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_group_by(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_expr> exprs,
    bool maintain_order,
  ) {
    return _wire_LazyFrame_group_by(
      that,
      exprs,
      maintain_order,
    );
  }

  late final _wire_LazyFrame_group_byPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_expr>,
              ffi.Bool)>>('wire_LazyFrame_group_by');
  late final _wire_LazyFrame_group_by = _wire_LazyFrame_group_byPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_expr>, bool)>();

  WireSyncRust2DartDco wire_LazyFrame_inner_join(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    ffi.Pointer<wire_cst_expr> left_on,
    ffi.Pointer<wire_cst_expr> right_on,
  ) {
    return _wire_LazyFrame_inner_join(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_LazyFrame_inner_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_expr>,
              ffi.Pointer<wire_cst_expr>)>>('wire_LazyFrame_inner_join');
  late final _wire_LazyFrame_inner_join =
      _wire_LazyFrame_inner_joinPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_expr>,
              ffi.Pointer<wire_cst_expr>)>();

  void wire_LazyFrame_join(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    ffi.Pointer<wire_cst_list_expr> on1,
    ffi.Pointer<wire_cst_list_expr> left_on,
    ffi.Pointer<wire_cst_list_expr> right_on,
    ffi.Pointer<wire_cst_list_prim_u_8> suffix,
    int how,
    bool allow_parallel,
    bool force_parallel,
  ) {
    return _wire_LazyFrame_join(
      port_,
      that,
      other,
      on1,
      left_on,
      right_on,
      suffix,
      how,
      allow_parallel,
      force_parallel,
    );
  }

  late final _wire_LazyFrame_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_expr>,
              ffi.Pointer<wire_cst_list_expr>,
              ffi.Pointer<wire_cst_list_expr>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool)>>('wire_LazyFrame_join');
  late final _wire_LazyFrame_join = _wire_LazyFrame_joinPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<wire_cst_list_expr>,
          ffi.Pointer<wire_cst_list_expr>,
          ffi.Pointer<wire_cst_list_expr>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          int,
          bool,
          bool)>();

  WireSyncRust2DartDco wire_LazyFrame_last(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_last(
      that,
    );
  }

  late final _wire_LazyFrame_lastPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_last');
  late final _wire_LazyFrame_last = _wire_LazyFrame_lastPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_left_join(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    ffi.Pointer<wire_cst_expr> left_on,
    ffi.Pointer<wire_cst_expr> right_on,
  ) {
    return _wire_LazyFrame_left_join(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_LazyFrame_left_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_expr>,
              ffi.Pointer<wire_cst_expr>)>>('wire_LazyFrame_left_join');
  late final _wire_LazyFrame_left_join =
      _wire_LazyFrame_left_joinPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_expr>,
              ffi.Pointer<wire_cst_expr>)>();

  WireSyncRust2DartDco wire_LazyFrame_limit(
    ffi.Pointer<ffi.Void> that,
    int n,
  ) {
    return _wire_LazyFrame_limit(
      that,
      n,
    );
  }

  late final _wire_LazyFrame_limitPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint32)>>('wire_LazyFrame_limit');
  late final _wire_LazyFrame_limit = _wire_LazyFrame_limitPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_max(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_max(
      that,
    );
  }

  late final _wire_LazyFrame_maxPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_max');
  late final _wire_LazyFrame_max = _wire_LazyFrame_maxPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_mean(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_mean(
      that,
    );
  }

  late final _wire_LazyFrame_meanPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_mean');
  late final _wire_LazyFrame_mean = _wire_LazyFrame_meanPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_median(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_median(
      that,
    );
  }

  late final _wire_LazyFrame_medianPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_median');
  late final _wire_LazyFrame_median = _wire_LazyFrame_medianPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_melt(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> id_vars,
    ffi.Pointer<wire_cst_list_String> value_vars,
    ffi.Pointer<wire_cst_list_prim_u_8> variable_name,
    ffi.Pointer<wire_cst_list_prim_u_8> value_name,
    bool streamable,
  ) {
    return _wire_LazyFrame_melt(
      that,
      id_vars,
      value_vars,
      variable_name,
      value_name,
      streamable,
    );
  }

  late final _wire_LazyFrame_meltPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Bool)>>('wire_LazyFrame_melt');
  late final _wire_LazyFrame_melt = _wire_LazyFrame_meltPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<wire_cst_list_String>,
          ffi.Pointer<wire_cst_list_String>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          bool)>();

  void wire_LazyFrame_min(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_min(
      port_,
      that,
    );
  }

  late final _wire_LazyFrame_minPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_LazyFrame_min');
  late final _wire_LazyFrame_min = _wire_LazyFrame_minPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_outer_join(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    ffi.Pointer<wire_cst_expr> left_on,
    ffi.Pointer<wire_cst_expr> right_on,
  ) {
    return _wire_LazyFrame_outer_join(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_LazyFrame_outer_joinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_expr>,
              ffi.Pointer<wire_cst_expr>)>>('wire_LazyFrame_outer_join');
  late final _wire_LazyFrame_outer_join =
      _wire_LazyFrame_outer_joinPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_expr>,
              ffi.Pointer<wire_cst_expr>)>();

  WireSyncRust2DartDco wire_LazyFrame_quantile(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_expr> quantile,
    int interpol,
  ) {
    return _wire_LazyFrame_quantile(
      that,
      quantile,
      interpol,
    );
  }

  late final _wire_LazyFrame_quantilePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_expr>,
              ffi.Int32)>>('wire_LazyFrame_quantile');
  late final _wire_LazyFrame_quantile = _wire_LazyFrame_quantilePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_expr>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_reverse(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_reverse(
      that,
    );
  }

  late final _wire_LazyFrame_reversePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_reverse');
  late final _wire_LazyFrame_reverse = _wire_LazyFrame_reversePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_slice(
    ffi.Pointer<ffi.Void> that,
    int offset,
    int len,
  ) {
    return _wire_LazyFrame_slice(
      that,
      offset,
      len,
    );
  }

  late final _wire_LazyFrame_slicePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, ffi.Int64,
              ffi.Uint32)>>('wire_LazyFrame_slice');
  late final _wire_LazyFrame_slice = _wire_LazyFrame_slicePtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int, int)>();

  WireSyncRust2DartDco wire_LazyFrame_std(
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_LazyFrame_std(
      that,
      ddof,
    );
  }

  late final _wire_LazyFrame_stdPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint8)>>('wire_LazyFrame_std');
  late final _wire_LazyFrame_std = _wire_LazyFrame_stdPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_sum(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_LazyFrame_sum(
      that,
    );
  }

  late final _wire_LazyFrame_sumPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_LazyFrame_sum');
  late final _wire_LazyFrame_sum = _wire_LazyFrame_sumPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_LazyFrame_tail(
    ffi.Pointer<ffi.Void> that,
    int n,
  ) {
    return _wire_LazyFrame_tail(
      that,
      n,
    );
  }

  late final _wire_LazyFrame_tailPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint32)>>('wire_LazyFrame_tail');
  late final _wire_LazyFrame_tail = _wire_LazyFrame_tailPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_unique(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_String> subset,
    int keep_strategy,
  ) {
    return _wire_LazyFrame_unique(
      that,
      subset,
      keep_strategy,
    );
  }

  late final _wire_LazyFrame_uniquePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Int32)>>('wire_LazyFrame_unique');
  late final _wire_LazyFrame_unique = _wire_LazyFrame_uniquePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_String>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_variance(
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_LazyFrame_variance(
      that,
      ddof,
    );
  }

  late final _wire_LazyFrame_variancePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Uint8)>>('wire_LazyFrame_variance');
  late final _wire_LazyFrame_variance = _wire_LazyFrame_variancePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_LazyFrame_with_column(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_expr> expr,
  ) {
    return _wire_LazyFrame_with_column(
      that,
      expr,
    );
  }

  late final _wire_LazyFrame_with_columnPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_expr>)>>('wire_LazyFrame_with_column');
  late final _wire_LazyFrame_with_column =
      _wire_LazyFrame_with_columnPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_expr>)>();

  WireSyncRust2DartDco wire_LazyFrame_with_row_count(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _wire_LazyFrame_with_row_count(
      that,
      name,
      offset,
    );
  }

  late final _wire_LazyFrame_with_row_countPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Uint32>)>>('wire_LazyFrame_with_row_count');
  late final _wire_LazyFrame_with_row_count =
      _wire_LazyFrame_with_row_countPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>, ffi.Pointer<ffi.Uint32>)>();

  WireSyncRust2DartDco wire_LazyGroupBy_head(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> n,
  ) {
    return _wire_LazyGroupBy_head(
      that,
      n,
    );
  }

  late final _wire_LazyGroupBy_headPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_LazyGroupBy_head');
  late final _wire_LazyGroupBy_head = _wire_LazyGroupBy_headPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_LazyGroupBy_tail(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> n,
  ) {
    return _wire_LazyGroupBy_tail(
      that,
      n,
    );
  }

  late final _wire_LazyGroupBy_tailPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_LazyGroupBy_tail');
  late final _wire_LazyGroupBy_tail = _wire_LazyGroupBy_tailPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_Schema_of(
    ffi.Pointer<wire_cst_list_field> fields,
  ) {
    return _wire_Schema_of(
      fields,
    );
  }

  late final _wire_Schema_ofPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_field>)>>('wire_Schema_of');
  late final _wire_Schema_of = _wire_Schema_ofPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_field>)>();

  WireSyncRust2DartDco wire_Series_add_to(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_add_to(
      that,
      other,
    );
  }

  late final _wire_Series_add_toPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_add_to');
  late final _wire_Series_add_to = _wire_Series_add_toPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void wire_Series_append(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_append(
      port_,
      that,
      other,
    );
  }

  late final _wire_Series_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_append');
  late final _wire_Series_append = _wire_Series_appendPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void wire_Series_apply_scalar(
    int port_,
    ffi.Pointer<ffi.Void> that,
    int op,
    double value,
  ) {
    return _wire_Series_apply_scalar(
      port_,
      that,
      op,
      value,
    );
  }

  late final _wire_Series_apply_scalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Double)>>('wire_Series_apply_scalar');
  late final _wire_Series_apply_scalar = _wire_Series_apply_scalarPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int, double)>();

  void wire_Series_as_doubles(
    int port_,
    ffi.Pointer<ffi.Void> that,
    bool strict,
  ) {
    return _wire_Series_as_doubles(
      port_,
      that,
      strict,
    );
  }

  late final _wire_Series_as_doublesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Bool)>>('wire_Series_as_doubles');
  late final _wire_Series_as_doubles = _wire_Series_as_doublesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, bool)>();

  void wire_Series_as_durations(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_durations(
      port_,
      that,
    );
  }

  late final _wire_Series_as_durationsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_as_durations');
  late final _wire_Series_as_durations = _wire_Series_as_durationsPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_as_ints(
    int port_,
    ffi.Pointer<ffi.Void> that,
    bool strict,
  ) {
    return _wire_Series_as_ints(
      port_,
      that,
      strict,
    );
  }

  late final _wire_Series_as_intsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Bool)>>('wire_Series_as_ints');
  late final _wire_Series_as_ints = _wire_Series_as_intsPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, bool)>();

  void wire_Series_as_local_datetime(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_local_datetime(
      port_,
      that,
    );
  }

  late final _wire_Series_as_local_datetimePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_as_local_datetime');
  late final _wire_Series_as_local_datetime = _wire_Series_as_local_datetimePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_as_naive_datetime(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_naive_datetime(
      port_,
      that,
    );
  }

  late final _wire_Series_as_naive_datetimePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_as_naive_datetime');
  late final _wire_Series_as_naive_datetime = _wire_Series_as_naive_datetimePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_as_strings(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_strings(
      port_,
      that,
    );
  }

  late final _wire_Series_as_stringsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_as_strings');
  late final _wire_Series_as_strings = _wire_Series_as_stringsPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_as_utc_datetime(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_as_utc_datetime(
      port_,
      that,
    );
  }

  late final _wire_Series_as_utc_datetimePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_as_utc_datetime');
  late final _wire_Series_as_utc_datetime = _wire_Series_as_utc_datetimePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_cast(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_data_type> dtype,
    bool strict,
  ) {
    return _wire_Series_cast(
      port_,
      that,
      dtype,
      strict,
    );
  }

  late final _wire_Series_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_data_type>, ffi.Bool)>>('wire_Series_cast');
  late final _wire_Series_cast = _wire_Series_castPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_data_type>, bool)>();

  WireSyncRust2DartDco wire_Series_divide(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_divide(
      that,
      other,
    );
  }

  late final _wire_Series_dividePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_divide');
  late final _wire_Series_divide = _wire_Series_dividePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void wire_Series_dump(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_dump(
      port_,
      that,
    );
  }

  late final _wire_Series_dumpPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_dump');
  late final _wire_Series_dump = _wire_Series_dumpPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_equal(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
    bool ignore_null,
  ) {
    return _wire_Series_equal(
      port_,
      that,
      other,
      ignore_null,
    );
  }

  late final _wire_Series_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Series_equal');
  late final _wire_Series_equal = _wire_Series_equalPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, bool)>();

  WireSyncRust2DartDco wire_Series_estimated_size(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_estimated_size(
      that,
    );
  }

  late final _wire_Series_estimated_sizePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_estimated_size');
  late final _wire_Series_estimated_size = _wire_Series_estimated_sizePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_Series_explode(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_explode(
      port_,
      that,
    );
  }

  late final _wire_Series_explodePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_explode');
  late final _wire_Series_explode = _wire_Series_explodePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_explode_by_offsets(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_i_64> offsets,
  ) {
    return _wire_Series_explode_by_offsets(
      port_,
      that,
      offsets,
    );
  }

  late final _wire_Series_explode_by_offsetsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<wire_cst_list_prim_i_64>)>>(
      'wire_Series_explode_by_offsets');
  late final _wire_Series_explode_by_offsets =
      _wire_Series_explode_by_offsetsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_i_64>)>();

  WireSyncRust2DartDco wire_Series_get(
    ffi.Pointer<ffi.Void> that,
    int index,
  ) {
    return _wire_Series_get(
      that,
      index,
    );
  }

  late final _wire_Series_getPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.UintPtr)>>('wire_Series_get');
  late final _wire_Series_get = _wire_Series_getPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Series_get_string(
    ffi.Pointer<ffi.Void> that,
    int index,
  ) {
    return _wire_Series_get_string(
      that,
      index,
    );
  }

  late final _wire_Series_get_stringPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>, ffi.UintPtr)>>('wire_Series_get_string');
  late final _wire_Series_get_string = _wire_Series_get_stringPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Series_head(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_Series_head(
      that,
      length,
    );
  }

  late final _wire_Series_headPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_Series_head');
  late final _wire_Series_head = _wire_Series_headPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncRust2DartDco wire_Series_into_frame(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_into_frame(
      that,
    );
  }

  late final _wire_Series_into_framePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_into_frame');
  late final _wire_Series_into_frame = _wire_Series_into_framePtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_is_bool(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_is_bool(
      that,
    );
  }

  late final _wire_Series_is_boolPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_is_bool');
  late final _wire_Series_is_bool = _wire_Series_is_boolPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_is_numeric(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_is_numeric(
      that,
    );
  }

  late final _wire_Series_is_numericPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_is_numeric');
  late final _wire_Series_is_numeric = _wire_Series_is_numericPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_is_temporal(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_is_temporal(
      that,
    );
  }

  late final _wire_Series_is_temporalPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_is_temporal');
  late final _wire_Series_is_temporal = _wire_Series_is_temporalPtr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_is_utf8(
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_is_utf8(
      that,
    );
  }

  late final _wire_Series_is_utf8Ptr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<ffi.Void>)>>('wire_Series_is_utf8');
  late final _wire_Series_is_utf8 = _wire_Series_is_utf8Ptr
      .asFunction<WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>)>();

  void wire_Series_max(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_max(
      port_,
      that,
    );
  }

  late final _wire_Series_maxPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_max');
  late final _wire_Series_max = _wire_Series_maxPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_mean(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_mean(
      port_,
      that,
    );
  }

  late final _wire_Series_meanPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_mean');
  late final _wire_Series_mean = _wire_Series_meanPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_mean_as_series(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_mean_as_series(
      port_,
      that,
    );
  }

  late final _wire_Series_mean_as_seriesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_mean_as_series');
  late final _wire_Series_mean_as_series = _wire_Series_mean_as_seriesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_median(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_median(
      port_,
      that,
    );
  }

  late final _wire_Series_medianPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_median');
  late final _wire_Series_median = _wire_Series_medianPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_median_as_series(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_median_as_series(
      port_,
      that,
    );
  }

  late final _wire_Series_median_as_seriesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_median_as_series');
  late final _wire_Series_median_as_series = _wire_Series_median_as_seriesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_min(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_min(
      port_,
      that,
    );
  }

  late final _wire_Series_minPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_min');
  late final _wire_Series_min = _wire_Series_minPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_multiply(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_multiply(
      that,
      other,
    );
  }

  late final _wire_Series_multiplyPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_multiply');
  late final _wire_Series_multiply = _wire_Series_multiplyPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_of_bools(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_bool> values,
  ) {
    return _wire_Series_of_bools(
      name,
      values,
    );
  }

  late final _wire_Series_of_boolsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_bool>)>>('wire_Series_of_bools');
  late final _wire_Series_of_bools = _wire_Series_of_boolsPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_bool>)>();

  WireSyncRust2DartDco wire_Series_of_doubles(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64> values,
  ) {
    return _wire_Series_of_doubles(
      name,
      values,
    );
  }

  late final _wire_Series_of_doublesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
                  ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>)>>(
      'wire_Series_of_doubles');
  late final _wire_Series_of_doubles = _wire_Series_of_doublesPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>)>();

  WireSyncRust2DartDco wire_Series_of_durations(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration> values,
    int unit,
  ) {
    return _wire_Series_of_durations(
      name,
      values,
      unit,
    );
  }

  late final _wire_Series_of_durationsPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>,
              ffi.Int32)>>('wire_Series_of_durations');
  late final _wire_Series_of_durations =
      _wire_Series_of_durationsPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>,
              int)>();

  WireSyncRust2DartDco wire_Series_of_i32(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32> values,
  ) {
    return _wire_Series_of_i32(
      name,
      values,
    );
  }

  late final _wire_Series_of_i32Ptr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
                  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>)>>(
      'wire_Series_of_i32');
  late final _wire_Series_of_i32 = _wire_Series_of_i32Ptr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>)>();

  WireSyncRust2DartDco wire_Series_of_ints(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64> values,
  ) {
    return _wire_Series_of_ints(
      name,
      values,
    );
  }

  late final _wire_Series_of_intsPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
                  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>)>>(
      'wire_Series_of_ints');
  late final _wire_Series_of_ints = _wire_Series_of_intsPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>)>();

  WireSyncRust2DartDco wire_Series_of_strings(
    ffi.Pointer<wire_cst_list_prim_u_8> name,
    ffi.Pointer<wire_cst_list_opt_String> values,
  ) {
    return _wire_Series_of_strings(
      name,
      values,
    );
  }

  late final _wire_Series_of_stringsPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
                  ffi.Pointer<wire_cst_list_opt_String>)>>(
      'wire_Series_of_strings');
  late final _wire_Series_of_strings = _wire_Series_of_stringsPtr.asFunction<
      WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_opt_String>)>();

  void wire_Series_product(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_product(
      port_,
      that,
    );
  }

  late final _wire_Series_productPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_product');
  late final _wire_Series_product = _wire_Series_productPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_remainder(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_remainder(
      that,
      other,
    );
  }

  late final _wire_Series_remainderPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_remainder');
  late final _wire_Series_remainder = _wire_Series_remainderPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_rename(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8> name,
  ) {
    return _wire_Series_rename(
      that,
      name,
    );
  }

  late final _wire_Series_renamePtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8>)>>('wire_Series_rename');
  late final _wire_Series_rename = _wire_Series_renamePtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_u_8>)>();

  void wire_Series_reshape(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_i_64> dims,
  ) {
    return _wire_Series_reshape(
      port_,
      that,
      dims,
    );
  }

  late final _wire_Series_reshapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_i_64>)>>('wire_Series_reshape');
  late final _wire_Series_reshape = _wire_Series_reshapePtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<wire_cst_list_prim_i_64>)>();

  void wire_Series_shuffle(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Uint64> seed,
  ) {
    return _wire_Series_shuffle(
      port_,
      that,
      seed,
    );
  }

  late final _wire_Series_shufflePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint64>)>>('wire_Series_shuffle');
  late final _wire_Series_shuffle = _wire_Series_shufflePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint64>)>();

  void wire_Series_sort(
    int port_,
    ffi.Pointer<ffi.Void> that,
    bool reverse,
  ) {
    return _wire_Series_sort(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_Series_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<ffi.Void>, ffi.Bool)>>('wire_Series_sort');
  late final _wire_Series_sort = _wire_Series_sortPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, bool)>();

  void wire_Series_std_as_series(
    int port_,
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_Series_std_as_series(
      port_,
      that,
      ddof,
    );
  }

  late final _wire_Series_std_as_seriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Uint8)>>('wire_Series_std_as_series');
  late final _wire_Series_std_as_series = _wire_Series_std_as_seriesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int)>();

  WireSyncRust2DartDco wire_Series_subtract(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.Void> other,
  ) {
    return _wire_Series_subtract(
      that,
      other,
    );
  }

  late final _wire_Series_subtractPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('wire_Series_subtract');
  late final _wire_Series_subtract = _wire_Series_subtractPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void wire_Series_sum(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_sum(
      port_,
      that,
    );
  }

  late final _wire_Series_sumPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_sum');
  late final _wire_Series_sum = _wire_Series_sumPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_sum_as_series(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_sum_as_series(
      port_,
      that,
    );
  }

  late final _wire_Series_sum_as_seriesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_sum_as_series');
  late final _wire_Series_sum_as_series = _wire_Series_sum_as_seriesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  WireSyncRust2DartDco wire_Series_tail(
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_Series_tail(
      that,
      length,
    );
  }

  late final _wire_Series_tailPtr = _lookup<
      ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UintPtr>)>>('wire_Series_tail');
  late final _wire_Series_tail = _wire_Series_tailPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.UintPtr>)>();

  void wire_Series_to_list(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_Series_to_list(
      port_,
      that,
    );
  }

  late final _wire_Series_to_listPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'wire_Series_to_list');
  late final _wire_Series_to_list = _wire_Series_to_listPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_Series_unique(
    int port_,
    ffi.Pointer<ffi.Void> that,
    bool stable,
  ) {
    return _wire_Series_unique(
      port_,
      that,
      stable,
    );
  }

  late final _wire_Series_uniquePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Bool)>>('wire_Series_unique');
  late final _wire_Series_unique = _wire_Series_uniquePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, bool)>();

  void wire_Series_var_as_series(
    int port_,
    ffi.Pointer<ffi.Void> that,
    int ddof,
  ) {
    return _wire_Series_var_as_series(
      port_,
      that,
      ddof,
    );
  }

  late final _wire_Series_var_as_seriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
              ffi.Uint8)>>('wire_Series_var_as_series');
  late final _wire_Series_var_as_series = _wire_Series_var_as_seriesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int)>();

  void wire_read_csv(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8> path,
    ffi.Pointer<wire_cst_list_data_type> dtypes_slice,
    ffi.Pointer<ffi.Bool> has_header,
    ffi.Pointer<wire_cst_list_String> columns,
    ffi.Pointer<wire_cst_list_prim_u_8> comment_char,
    ffi.Pointer<wire_cst_list_prim_u_8> eol_char,
    ffi.Pointer<ffi.UintPtr> chunk_size,
    ffi.Pointer<ffi.UintPtr> sample_size,
    ffi.Pointer<wire_cst_row_count> row_count,
    ffi.Pointer<ffi.Int32> encoding,
    ffi.Pointer<ffi.UintPtr> n_rows,
    ffi.Pointer<ffi.UintPtr> n_threads,
    ffi.Pointer<wire_cst_null_values> null_values,
    ffi.Pointer<wire_cst_list_prim_u_32> projection,
    ffi.Pointer<wire_cst_list_prim_u_8> quote_char,
    int skip_rows,
    int skip_rows_after_header,
    bool ignore_errors,
    bool rechunk,
    bool try_parse_dates,
    bool low_memory,
  ) {
    return _wire_read_csv(
      port_,
      path,
      dtypes_slice,
      has_header,
      columns,
      comment_char,
      eol_char,
      chunk_size,
      sample_size,
      row_count,
      encoding,
      n_rows,
      n_threads,
      null_values,
      projection,
      quote_char,
      skip_rows,
      skip_rows_after_header,
      ignore_errors,
      rechunk,
      try_parse_dates,
      low_memory,
    );
  }

  late final _wire_read_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_data_type>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_cst_list_String>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_cst_row_count>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_cst_null_values>,
              ffi.Pointer<wire_cst_list_prim_u_32>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.UintPtr,
              ffi.UintPtr,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool)>>('wire_read_csv');
  late final _wire_read_csv = _wire_read_csvPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_data_type>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<wire_cst_list_String>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_cst_row_count>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_cst_null_values>,
          ffi.Pointer<wire_cst_list_prim_u_32>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          int,
          int,
          bool,
          bool,
          bool,
          bool)>();

  void wire_read_json(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8> path,
    ffi.Pointer<ffi.UintPtr> batch_size,
    ffi.Pointer<wire_cst_list_String> projection,
  ) {
    return _wire_read_json(
      port_,
      path,
      batch_size,
      projection,
    );
  }

  late final _wire_read_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_cst_list_String>)>>('wire_read_json');
  late final _wire_read_json = _wire_read_jsonPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.UintPtr>, ffi.Pointer<wire_cst_list_String>)>();

  void wire_scan_csv(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8> path,
    ffi.Pointer<ffi.Void> dtype_overwrite,
    ffi.Pointer<ffi.Bool> has_header,
    ffi.Pointer<wire_cst_list_prim_u_8> comment_char,
    ffi.Pointer<wire_cst_list_prim_u_8> eol_char,
    ffi.Pointer<wire_cst_list_prim_u_8> quote_char,
    int skip_rows,
    int skip_rows_after_header,
    ffi.Pointer<wire_cst_row_count> row_count,
    ffi.Pointer<ffi.Int32> encoding,
    ffi.Pointer<ffi.UintPtr> n_rows,
    ffi.Pointer<wire_cst_null_values> null_values,
    bool ignore_errors,
    bool rechunk,
    bool try_parse_dates,
    ffi.Pointer<ffi.UintPtr> infer_schema_length,
    bool cache,
  ) {
    return _wire_scan_csv(
      port_,
      path,
      dtype_overwrite,
      has_header,
      comment_char,
      eol_char,
      quote_char,
      skip_rows,
      skip_rows_after_header,
      row_count,
      encoding,
      n_rows,
      null_values,
      ignore_errors,
      rechunk,
      try_parse_dates,
      infer_schema_length,
      cache,
    );
  }

  late final _wire_scan_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.UintPtr,
              ffi.UintPtr,
              ffi.Pointer<wire_cst_row_count>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_cst_null_values>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Bool)>>('wire_scan_csv');
  late final _wire_scan_csv = _wire_scan_csvPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          ffi.Pointer<wire_cst_list_prim_u_8>,
          int,
          int,
          ffi.Pointer<wire_cst_row_count>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_cst_null_values>,
          bool,
          bool,
          bool,
          ffi.Pointer<ffi.UintPtr>,
          bool)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeries =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptionVeccratewrapperSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchemaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchema');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchema =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchemaPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchema(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchemaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchema');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchema =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockOptioncratewrapperSchemaPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeries');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeries =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeries(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeries');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeries =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVeccratewrapperSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFrame');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFrame =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFramePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFrame(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFrame');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFrame =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperDataFramePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFrame');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFrame =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFramePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFrame(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFrame');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFrame =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyFramePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupByPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupByPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupByPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupBy =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperLazyGroupByPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchema(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchemaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchema');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchema =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchemaPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchema(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchema(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchemaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchema');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchema =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSchemaPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeries(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeries');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeries =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeries(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeries');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeries =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcratewrapperSeriesPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int64> cst_new_box_autoadd_Chrono_Duration(
    int value,
  ) {
    return _cst_new_box_autoadd_Chrono_Duration(
      value,
    );
  }

  late final _cst_new_box_autoadd_Chrono_DurationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'cst_new_box_autoadd_Chrono_Duration');
  late final _cst_new_box_autoadd_Chrono_Duration =
      _cst_new_box_autoadd_Chrono_DurationPtr
          .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<ffi.Int64> cst_new_box_autoadd_Chrono_Local(
    int value,
  ) {
    return _cst_new_box_autoadd_Chrono_Local(
      value,
    );
  }

  late final _cst_new_box_autoadd_Chrono_LocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'cst_new_box_autoadd_Chrono_Local');
  late final _cst_new_box_autoadd_Chrono_Local =
      _cst_new_box_autoadd_Chrono_LocalPtr
          .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<ffi.Int64> cst_new_box_autoadd_Chrono_Naive(
    int value,
  ) {
    return _cst_new_box_autoadd_Chrono_Naive(
      value,
    );
  }

  late final _cst_new_box_autoadd_Chrono_NaivePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'cst_new_box_autoadd_Chrono_Naive');
  late final _cst_new_box_autoadd_Chrono_Naive =
      _cst_new_box_autoadd_Chrono_NaivePtr
          .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<ffi.Int64> cst_new_box_autoadd_Chrono_Utc(
    int value,
  ) {
    return _cst_new_box_autoadd_Chrono_Utc(
      value,
    );
  }

  late final _cst_new_box_autoadd_Chrono_UtcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'cst_new_box_autoadd_Chrono_Utc');
  late final _cst_new_box_autoadd_Chrono_Utc =
      _cst_new_box_autoadd_Chrono_UtcPtr
          .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_cst_agg_expr> cst_new_box_autoadd_agg_expr() {
    return _cst_new_box_autoadd_agg_expr();
  }

  late final _cst_new_box_autoadd_agg_exprPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_agg_expr> Function()>>(
          'cst_new_box_autoadd_agg_expr');
  late final _cst_new_box_autoadd_agg_expr = _cst_new_box_autoadd_agg_exprPtr
      .asFunction<ffi.Pointer<wire_cst_agg_expr> Function()>();

  ffi.Pointer<ffi.Bool> cst_new_box_autoadd_bool(
    bool value,
  ) {
    return _cst_new_box_autoadd_bool(
      value,
    );
  }

  late final _cst_new_box_autoadd_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
          'cst_new_box_autoadd_bool');
  late final _cst_new_box_autoadd_bool = _cst_new_box_autoadd_boolPtr
      .asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_csv_encoding(
    int value,
  ) {
    return _cst_new_box_autoadd_csv_encoding(
      value,
    );
  }

  late final _cst_new_box_autoadd_csv_encodingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'cst_new_box_autoadd_csv_encoding');
  late final _cst_new_box_autoadd_csv_encoding =
      _cst_new_box_autoadd_csv_encodingPtr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_cst_data_type> cst_new_box_autoadd_data_type() {
    return _cst_new_box_autoadd_data_type();
  }

  late final _cst_new_box_autoadd_data_typePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_data_type> Function()>>(
          'cst_new_box_autoadd_data_type');
  late final _cst_new_box_autoadd_data_type = _cst_new_box_autoadd_data_typePtr
      .asFunction<ffi.Pointer<wire_cst_data_type> Function()>();

  ffi.Pointer<wire_cst_expr> cst_new_box_autoadd_expr() {
    return _cst_new_box_autoadd_expr();
  }

  late final _cst_new_box_autoadd_exprPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_expr> Function()>>(
          'cst_new_box_autoadd_expr');
  late final _cst_new_box_autoadd_expr = _cst_new_box_autoadd_exprPtr
      .asFunction<ffi.Pointer<wire_cst_expr> Function()>();

  ffi.Pointer<ffi.Double> cst_new_box_autoadd_f_64(
    double value,
  ) {
    return _cst_new_box_autoadd_f_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_f_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>(
          'cst_new_box_autoadd_f_64');
  late final _cst_new_box_autoadd_f_64 = _cst_new_box_autoadd_f_64Ptr
      .asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  ffi.Pointer<ffi.Int32> cst_new_box_autoadd_i_32(
    int value,
  ) {
    return _cst_new_box_autoadd_i_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_i_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'cst_new_box_autoadd_i_32');
  late final _cst_new_box_autoadd_i_32 = _cst_new_box_autoadd_i_32Ptr
      .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<ffi.Int64> cst_new_box_autoadd_i_64(
    int value,
  ) {
    return _cst_new_box_autoadd_i_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_i_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'cst_new_box_autoadd_i_64');
  late final _cst_new_box_autoadd_i_64 = _cst_new_box_autoadd_i_64Ptr
      .asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_cst_literal_value> cst_new_box_autoadd_literal_value() {
    return _cst_new_box_autoadd_literal_value();
  }

  late final _cst_new_box_autoadd_literal_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_literal_value> Function()>>(
      'cst_new_box_autoadd_literal_value');
  late final _cst_new_box_autoadd_literal_value =
      _cst_new_box_autoadd_literal_valuePtr
          .asFunction<ffi.Pointer<wire_cst_literal_value> Function()>();

  ffi.Pointer<wire_cst_null_values> cst_new_box_autoadd_null_values() {
    return _cst_new_box_autoadd_null_values();
  }

  late final _cst_new_box_autoadd_null_valuesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_null_values> Function()>>(
          'cst_new_box_autoadd_null_values');
  late final _cst_new_box_autoadd_null_values =
      _cst_new_box_autoadd_null_valuesPtr
          .asFunction<ffi.Pointer<wire_cst_null_values> Function()>();

  ffi.Pointer<wire_cst_row_count> cst_new_box_autoadd_row_count() {
    return _cst_new_box_autoadd_row_count();
  }

  late final _cst_new_box_autoadd_row_countPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_row_count> Function()>>(
          'cst_new_box_autoadd_row_count');
  late final _cst_new_box_autoadd_row_count = _cst_new_box_autoadd_row_countPtr
      .asFunction<ffi.Pointer<wire_cst_row_count> Function()>();

  ffi.Pointer<wire_cst_sort_options> cst_new_box_autoadd_sort_options() {
    return _cst_new_box_autoadd_sort_options();
  }

  late final _cst_new_box_autoadd_sort_optionsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_sort_options> Function()>>(
      'cst_new_box_autoadd_sort_options');
  late final _cst_new_box_autoadd_sort_options =
      _cst_new_box_autoadd_sort_optionsPtr
          .asFunction<ffi.Pointer<wire_cst_sort_options> Function()>();

  ffi.Pointer<ffi.Uint32> cst_new_box_autoadd_u_32(
    int value,
  ) {
    return _cst_new_box_autoadd_u_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'cst_new_box_autoadd_u_32');
  late final _cst_new_box_autoadd_u_32 = _cst_new_box_autoadd_u_32Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(
    int value,
  ) {
    return _cst_new_box_autoadd_u_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'cst_new_box_autoadd_u_64');
  late final _cst_new_box_autoadd_u_64 = _cst_new_box_autoadd_u_64Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.UintPtr> cst_new_box_autoadd_usize(
    int value,
  ) {
    return _cst_new_box_autoadd_usize(
      value,
    );
  }

  late final _cst_new_box_autoadd_usizePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>>(
      'cst_new_box_autoadd_usize');
  late final _cst_new_box_autoadd_usize = _cst_new_box_autoadd_usizePtr
      .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<wire_cst_window_type> cst_new_box_autoadd_window_type() {
    return _cst_new_box_autoadd_window_type();
  }

  late final _cst_new_box_autoadd_window_typePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_window_type> Function()>>(
          'cst_new_box_autoadd_window_type');
  late final _cst_new_box_autoadd_window_type =
      _cst_new_box_autoadd_window_typePtr
          .asFunction<ffi.Pointer<wire_cst_window_type> Function()>();

  ffi.Pointer<wire_cst_data_type> cst_new_box_data_type() {
    return _cst_new_box_data_type();
  }

  late final _cst_new_box_data_typePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_data_type> Function()>>(
          'cst_new_box_data_type');
  late final _cst_new_box_data_type = _cst_new_box_data_typePtr
      .asFunction<ffi.Pointer<wire_cst_data_type> Function()>();

  ffi.Pointer<wire_cst_expr> cst_new_box_expr() {
    return _cst_new_box_expr();
  }

  late final _cst_new_box_exprPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_expr> Function()>>(
          'cst_new_box_expr');
  late final _cst_new_box_expr =
      _cst_new_box_exprPtr.asFunction<ffi.Pointer<wire_cst_expr> Function()>();

  ffi.Pointer<wire_cst_list_String> cst_new_list_String(
    int len,
  ) {
    return _cst_new_list_String(
      len,
    );
  }

  late final _cst_new_list_StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_String> Function(
              ffi.Int32)>>('cst_new_list_String');
  late final _cst_new_list_String = _cst_new_list_StringPtr
      .asFunction<ffi.Pointer<wire_cst_list_String> Function(int)>();

  ffi.Pointer<wire_cst_list_bool> cst_new_list_bool(
    int len,
  ) {
    return _cst_new_list_bool(
      len,
    );
  }

  late final _cst_new_list_boolPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_list_bool> Function(ffi.Int32)>>(
      'cst_new_list_bool');
  late final _cst_new_list_bool = _cst_new_list_boolPtr
      .asFunction<ffi.Pointer<wire_cst_list_bool> Function(int)>();

  ffi.Pointer<wire_cst_list_dartabi> cst_new_list_dartabi(
    int len,
  ) {
    return _cst_new_list_dartabi(
      len,
    );
  }

  late final _cst_new_list_dartabiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_dartabi> Function(
              ffi.Int32)>>('cst_new_list_dartabi');
  late final _cst_new_list_dartabi = _cst_new_list_dartabiPtr
      .asFunction<ffi.Pointer<wire_cst_list_dartabi> Function(int)>();

  ffi.Pointer<wire_cst_list_data_type> cst_new_list_data_type(
    int len,
  ) {
    return _cst_new_list_data_type(
      len,
    );
  }

  late final _cst_new_list_data_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_data_type> Function(
              ffi.Int32)>>('cst_new_list_data_type');
  late final _cst_new_list_data_type = _cst_new_list_data_typePtr
      .asFunction<ffi.Pointer<wire_cst_list_data_type> Function(int)>();

  ffi.Pointer<wire_cst_list_excluded> cst_new_list_excluded(
    int len,
  ) {
    return _cst_new_list_excluded(
      len,
    );
  }

  late final _cst_new_list_excludedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_excluded> Function(
              ffi.Int32)>>('cst_new_list_excluded');
  late final _cst_new_list_excluded = _cst_new_list_excludedPtr
      .asFunction<ffi.Pointer<wire_cst_list_excluded> Function(int)>();

  ffi.Pointer<wire_cst_list_expr> cst_new_list_expr(
    int len,
  ) {
    return _cst_new_list_expr(
      len,
    );
  }

  late final _cst_new_list_exprPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_list_expr> Function(ffi.Int32)>>(
      'cst_new_list_expr');
  late final _cst_new_list_expr = _cst_new_list_exprPtr
      .asFunction<ffi.Pointer<wire_cst_list_expr> Function(int)>();

  ffi.Pointer<wire_cst_list_field> cst_new_list_field(
    int len,
  ) {
    return _cst_new_list_field(
      len,
    );
  }

  late final _cst_new_list_fieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_field> Function(
              ffi.Int32)>>('cst_new_list_field');
  late final _cst_new_list_field = _cst_new_list_fieldPtr
      .asFunction<ffi.Pointer<wire_cst_list_field> Function(int)>();

  ffi.Pointer<wire_cst_list_opt_String> cst_new_list_opt_String(
    int len,
  ) {
    return _cst_new_list_opt_String(
      len,
    );
  }

  late final _cst_new_list_opt_StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_String> Function(
              ffi.Int32)>>('cst_new_list_opt_String');
  late final _cst_new_list_opt_String = _cst_new_list_opt_StringPtr
      .asFunction<ffi.Pointer<wire_cst_list_opt_String> Function(int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration>
      cst_new_list_opt_box_autoadd_Chrono_Duration(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_Chrono_Duration(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_Chrono_DurationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_Chrono_Duration');
  late final _cst_new_list_opt_box_autoadd_Chrono_Duration =
      _cst_new_list_opt_box_autoadd_Chrono_DurationPtr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Duration> Function(
              int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Local>
      cst_new_list_opt_box_autoadd_Chrono_Local(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_Chrono_Local(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_Chrono_LocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Local> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_Chrono_Local');
  late final _cst_new_list_opt_box_autoadd_Chrono_Local =
      _cst_new_list_opt_box_autoadd_Chrono_LocalPtr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Local> Function(
              int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Naive>
      cst_new_list_opt_box_autoadd_Chrono_Naive(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_Chrono_Naive(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_Chrono_NaivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Naive> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_Chrono_Naive');
  late final _cst_new_list_opt_box_autoadd_Chrono_Naive =
      _cst_new_list_opt_box_autoadd_Chrono_NaivePtr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Naive> Function(
              int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Utc>
      cst_new_list_opt_box_autoadd_Chrono_Utc(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_Chrono_Utc(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_Chrono_UtcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Utc> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_Chrono_Utc');
  late final _cst_new_list_opt_box_autoadd_Chrono_Utc =
      _cst_new_list_opt_box_autoadd_Chrono_UtcPtr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_Chrono_Utc> Function(
              int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64>
      cst_new_list_opt_box_autoadd_f_64(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_f_64(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_f_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_f_64');
  late final _cst_new_list_opt_box_autoadd_f_64 =
      _cst_new_list_opt_box_autoadd_f_64Ptr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_f_64> Function(int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32>
      cst_new_list_opt_box_autoadd_i_32(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_i_32(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_i_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_i_32');
  late final _cst_new_list_opt_box_autoadd_i_32 =
      _cst_new_list_opt_box_autoadd_i_32Ptr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_32> Function(int)>();

  ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64>
      cst_new_list_opt_box_autoadd_i_64(
    int len,
  ) {
    return _cst_new_list_opt_box_autoadd_i_64(
      len,
    );
  }

  late final _cst_new_list_opt_box_autoadd_i_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64> Function(
              ffi.Int32)>>('cst_new_list_opt_box_autoadd_i_64');
  late final _cst_new_list_opt_box_autoadd_i_64 =
      _cst_new_list_opt_box_autoadd_i_64Ptr.asFunction<
          ffi.Pointer<wire_cst_list_opt_box_autoadd_i_64> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_f_64> cst_new_list_prim_f_64(
    int len,
  ) {
    return _cst_new_list_prim_f_64(
      len,
    );
  }

  late final _cst_new_list_prim_f_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_f_64> Function(
              ffi.Int32)>>('cst_new_list_prim_f_64');
  late final _cst_new_list_prim_f_64 = _cst_new_list_prim_f_64Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_f_64> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_i_64> cst_new_list_prim_i_64(
    int len,
  ) {
    return _cst_new_list_prim_i_64(
      len,
    );
  }

  late final _cst_new_list_prim_i_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_i_64> Function(
              ffi.Int32)>>('cst_new_list_prim_i_64');
  late final _cst_new_list_prim_i_64 = _cst_new_list_prim_i_64Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_i_64> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_32> cst_new_list_prim_u_32(
    int len,
  ) {
    return _cst_new_list_prim_u_32(
      len,
    );
  }

  late final _cst_new_list_prim_u_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_32> Function(
              ffi.Int32)>>('cst_new_list_prim_u_32');
  late final _cst_new_list_prim_u_32 = _cst_new_list_prim_u_32Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_32> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8> cst_new_list_prim_u_8(
    int len,
  ) {
    return _cst_new_list_prim_u_8(
      len,
    );
  }

  late final _cst_new_list_prim_u_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8> Function(
              ffi.Int32)>>('cst_new_list_prim_u_8');
  late final _cst_new_list_prim_u_8 = _cst_new_list_prim_u_8Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8> Function(int)>();

  ffi.Pointer<wire_cst_list_record_string_string>
      cst_new_list_record_string_string(
    int len,
  ) {
    return _cst_new_list_record_string_string(
      len,
    );
  }

  late final _cst_new_list_record_string_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_record_string_string> Function(
              ffi.Int32)>>('cst_new_list_record_string_string');
  late final _cst_new_list_record_string_string =
      _cst_new_list_record_string_stringPtr.asFunction<
          ffi.Pointer<wire_cst_list_record_string_string> Function(int)>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Min() {
    return _cst_inflate_AggExpr_Min();
  }

  late final _cst_inflate_AggExpr_MinPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Min');
  late final _cst_inflate_AggExpr_Min = _cst_inflate_AggExpr_MinPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Max() {
    return _cst_inflate_AggExpr_Max();
  }

  late final _cst_inflate_AggExpr_MaxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Max');
  late final _cst_inflate_AggExpr_Max = _cst_inflate_AggExpr_MaxPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Median() {
    return _cst_inflate_AggExpr_Median();
  }

  late final _cst_inflate_AggExpr_MedianPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Median');
  late final _cst_inflate_AggExpr_Median = _cst_inflate_AggExpr_MedianPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_NUnique() {
    return _cst_inflate_AggExpr_NUnique();
  }

  late final _cst_inflate_AggExpr_NUniquePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_NUnique');
  late final _cst_inflate_AggExpr_NUnique = _cst_inflate_AggExpr_NUniquePtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_First() {
    return _cst_inflate_AggExpr_First();
  }

  late final _cst_inflate_AggExpr_FirstPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_First');
  late final _cst_inflate_AggExpr_First = _cst_inflate_AggExpr_FirstPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Last() {
    return _cst_inflate_AggExpr_Last();
  }

  late final _cst_inflate_AggExpr_LastPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Last');
  late final _cst_inflate_AggExpr_Last = _cst_inflate_AggExpr_LastPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Mean() {
    return _cst_inflate_AggExpr_Mean();
  }

  late final _cst_inflate_AggExpr_MeanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Mean');
  late final _cst_inflate_AggExpr_Mean = _cst_inflate_AggExpr_MeanPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Count() {
    return _cst_inflate_AggExpr_Count();
  }

  late final _cst_inflate_AggExpr_CountPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Count');
  late final _cst_inflate_AggExpr_Count = _cst_inflate_AggExpr_CountPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Quantile() {
    return _cst_inflate_AggExpr_Quantile();
  }

  late final _cst_inflate_AggExpr_QuantilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Quantile');
  late final _cst_inflate_AggExpr_Quantile = _cst_inflate_AggExpr_QuantilePtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Sum() {
    return _cst_inflate_AggExpr_Sum();
  }

  late final _cst_inflate_AggExpr_SumPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Sum');
  late final _cst_inflate_AggExpr_Sum = _cst_inflate_AggExpr_SumPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_AggGroups() {
    return _cst_inflate_AggExpr_AggGroups();
  }

  late final _cst_inflate_AggExpr_AggGroupsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_AggGroups');
  late final _cst_inflate_AggExpr_AggGroups = _cst_inflate_AggExpr_AggGroupsPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Std() {
    return _cst_inflate_AggExpr_Std();
  }

  late final _cst_inflate_AggExpr_StdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Std');
  late final _cst_inflate_AggExpr_Std = _cst_inflate_AggExpr_StdPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> cst_inflate_AggExpr_Var() {
    return _cst_inflate_AggExpr_Var();
  }

  late final _cst_inflate_AggExpr_VarPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'cst_inflate_AggExpr_Var');
  late final _cst_inflate_AggExpr_Var = _cst_inflate_AggExpr_VarPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<DataTypeKind> cst_inflate_DataType_Datetime() {
    return _cst_inflate_DataType_Datetime();
  }

  late final _cst_inflate_DataType_DatetimePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'cst_inflate_DataType_Datetime');
  late final _cst_inflate_DataType_Datetime = _cst_inflate_DataType_DatetimePtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<DataTypeKind> cst_inflate_DataType_Duration() {
    return _cst_inflate_DataType_Duration();
  }

  late final _cst_inflate_DataType_DurationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'cst_inflate_DataType_Duration');
  late final _cst_inflate_DataType_Duration = _cst_inflate_DataType_DurationPtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<DataTypeKind> cst_inflate_DataType_List() {
    return _cst_inflate_DataType_List();
  }

  late final _cst_inflate_DataType_ListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'cst_inflate_DataType_List');
  late final _cst_inflate_DataType_List = _cst_inflate_DataType_ListPtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<DataTypeKind> cst_inflate_DataType_Struct() {
    return _cst_inflate_DataType_Struct();
  }

  late final _cst_inflate_DataType_StructPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'cst_inflate_DataType_Struct');
  late final _cst_inflate_DataType_Struct = _cst_inflate_DataType_StructPtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<ExcludedKind> cst_inflate_Excluded_Name() {
    return _cst_inflate_Excluded_Name();
  }

  late final _cst_inflate_Excluded_NamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExcludedKind> Function()>>(
          'cst_inflate_Excluded_Name');
  late final _cst_inflate_Excluded_Name = _cst_inflate_Excluded_NamePtr
      .asFunction<ffi.Pointer<ExcludedKind> Function()>();

  ffi.Pointer<ExcludedKind> cst_inflate_Excluded_Dtype() {
    return _cst_inflate_Excluded_Dtype();
  }

  late final _cst_inflate_Excluded_DtypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExcludedKind> Function()>>(
          'cst_inflate_Excluded_Dtype');
  late final _cst_inflate_Excluded_Dtype = _cst_inflate_Excluded_DtypePtr
      .asFunction<ffi.Pointer<ExcludedKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Alias() {
    return _cst_inflate_Expr_Alias();
  }

  late final _cst_inflate_Expr_AliasPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Alias');
  late final _cst_inflate_Expr_Alias =
      _cst_inflate_Expr_AliasPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Column() {
    return _cst_inflate_Expr_Column();
  }

  late final _cst_inflate_Expr_ColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Column');
  late final _cst_inflate_Expr_Column = _cst_inflate_Expr_ColumnPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Columns() {
    return _cst_inflate_Expr_Columns();
  }

  late final _cst_inflate_Expr_ColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Columns');
  late final _cst_inflate_Expr_Columns = _cst_inflate_Expr_ColumnsPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_DtypeColumn() {
    return _cst_inflate_Expr_DtypeColumn();
  }

  late final _cst_inflate_Expr_DtypeColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_DtypeColumn');
  late final _cst_inflate_Expr_DtypeColumn = _cst_inflate_Expr_DtypeColumnPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Literal() {
    return _cst_inflate_Expr_Literal();
  }

  late final _cst_inflate_Expr_LiteralPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Literal');
  late final _cst_inflate_Expr_Literal = _cst_inflate_Expr_LiteralPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_BinaryExpr() {
    return _cst_inflate_Expr_BinaryExpr();
  }

  late final _cst_inflate_Expr_BinaryExprPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_BinaryExpr');
  late final _cst_inflate_Expr_BinaryExpr = _cst_inflate_Expr_BinaryExprPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Cast() {
    return _cst_inflate_Expr_Cast();
  }

  late final _cst_inflate_Expr_CastPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Cast');
  late final _cst_inflate_Expr_Cast =
      _cst_inflate_Expr_CastPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Sort() {
    return _cst_inflate_Expr_Sort();
  }

  late final _cst_inflate_Expr_SortPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Sort');
  late final _cst_inflate_Expr_Sort =
      _cst_inflate_Expr_SortPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Gather() {
    return _cst_inflate_Expr_Gather();
  }

  late final _cst_inflate_Expr_GatherPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Gather');
  late final _cst_inflate_Expr_Gather = _cst_inflate_Expr_GatherPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_SortBy() {
    return _cst_inflate_Expr_SortBy();
  }

  late final _cst_inflate_Expr_SortByPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_SortBy');
  late final _cst_inflate_Expr_SortBy = _cst_inflate_Expr_SortByPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Agg() {
    return _cst_inflate_Expr_Agg();
  }

  late final _cst_inflate_Expr_AggPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Agg');
  late final _cst_inflate_Expr_Agg =
      _cst_inflate_Expr_AggPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Ternary() {
    return _cst_inflate_Expr_Ternary();
  }

  late final _cst_inflate_Expr_TernaryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Ternary');
  late final _cst_inflate_Expr_Ternary = _cst_inflate_Expr_TernaryPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Explode() {
    return _cst_inflate_Expr_Explode();
  }

  late final _cst_inflate_Expr_ExplodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Explode');
  late final _cst_inflate_Expr_Explode = _cst_inflate_Expr_ExplodePtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Filter() {
    return _cst_inflate_Expr_Filter();
  }

  late final _cst_inflate_Expr_FilterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Filter');
  late final _cst_inflate_Expr_Filter = _cst_inflate_Expr_FilterPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Window() {
    return _cst_inflate_Expr_Window();
  }

  late final _cst_inflate_Expr_WindowPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Window');
  late final _cst_inflate_Expr_Window = _cst_inflate_Expr_WindowPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Slice() {
    return _cst_inflate_Expr_Slice();
  }

  late final _cst_inflate_Expr_SlicePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Slice');
  late final _cst_inflate_Expr_Slice =
      _cst_inflate_Expr_SlicePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Exclude() {
    return _cst_inflate_Expr_Exclude();
  }

  late final _cst_inflate_Expr_ExcludePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Exclude');
  late final _cst_inflate_Expr_Exclude = _cst_inflate_Expr_ExcludePtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_KeepName() {
    return _cst_inflate_Expr_KeepName();
  }

  late final _cst_inflate_Expr_KeepNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_KeepName');
  late final _cst_inflate_Expr_KeepName = _cst_inflate_Expr_KeepNamePtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> cst_inflate_Expr_Nth() {
    return _cst_inflate_Expr_Nth();
  }

  late final _cst_inflate_Expr_NthPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'cst_inflate_Expr_Nth');
  late final _cst_inflate_Expr_Nth =
      _cst_inflate_Expr_NthPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Boolean() {
    return _cst_inflate_LiteralValue_Boolean();
  }

  late final _cst_inflate_LiteralValue_BooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Boolean');
  late final _cst_inflate_LiteralValue_Boolean =
      _cst_inflate_LiteralValue_BooleanPtr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Utf8() {
    return _cst_inflate_LiteralValue_Utf8();
  }

  late final _cst_inflate_LiteralValue_Utf8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Utf8');
  late final _cst_inflate_LiteralValue_Utf8 = _cst_inflate_LiteralValue_Utf8Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Binary() {
    return _cst_inflate_LiteralValue_Binary();
  }

  late final _cst_inflate_LiteralValue_BinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Binary');
  late final _cst_inflate_LiteralValue_Binary =
      _cst_inflate_LiteralValue_BinaryPtr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_UInt8() {
    return _cst_inflate_LiteralValue_UInt8();
  }

  late final _cst_inflate_LiteralValue_UInt8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_UInt8');
  late final _cst_inflate_LiteralValue_UInt8 =
      _cst_inflate_LiteralValue_UInt8Ptr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_UInt16() {
    return _cst_inflate_LiteralValue_UInt16();
  }

  late final _cst_inflate_LiteralValue_UInt16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_UInt16');
  late final _cst_inflate_LiteralValue_UInt16 =
      _cst_inflate_LiteralValue_UInt16Ptr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_UInt32() {
    return _cst_inflate_LiteralValue_UInt32();
  }

  late final _cst_inflate_LiteralValue_UInt32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_UInt32');
  late final _cst_inflate_LiteralValue_UInt32 =
      _cst_inflate_LiteralValue_UInt32Ptr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_UInt64() {
    return _cst_inflate_LiteralValue_UInt64();
  }

  late final _cst_inflate_LiteralValue_UInt64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_UInt64');
  late final _cst_inflate_LiteralValue_UInt64 =
      _cst_inflate_LiteralValue_UInt64Ptr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Int8() {
    return _cst_inflate_LiteralValue_Int8();
  }

  late final _cst_inflate_LiteralValue_Int8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Int8');
  late final _cst_inflate_LiteralValue_Int8 = _cst_inflate_LiteralValue_Int8Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Int16() {
    return _cst_inflate_LiteralValue_Int16();
  }

  late final _cst_inflate_LiteralValue_Int16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Int16');
  late final _cst_inflate_LiteralValue_Int16 =
      _cst_inflate_LiteralValue_Int16Ptr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Int32() {
    return _cst_inflate_LiteralValue_Int32();
  }

  late final _cst_inflate_LiteralValue_Int32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Int32');
  late final _cst_inflate_LiteralValue_Int32 =
      _cst_inflate_LiteralValue_Int32Ptr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Int64() {
    return _cst_inflate_LiteralValue_Int64();
  }

  late final _cst_inflate_LiteralValue_Int64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Int64');
  late final _cst_inflate_LiteralValue_Int64 =
      _cst_inflate_LiteralValue_Int64Ptr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Float32() {
    return _cst_inflate_LiteralValue_Float32();
  }

  late final _cst_inflate_LiteralValue_Float32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Float32');
  late final _cst_inflate_LiteralValue_Float32 =
      _cst_inflate_LiteralValue_Float32Ptr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Float64() {
    return _cst_inflate_LiteralValue_Float64();
  }

  late final _cst_inflate_LiteralValue_Float64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Float64');
  late final _cst_inflate_LiteralValue_Float64 =
      _cst_inflate_LiteralValue_Float64Ptr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Range() {
    return _cst_inflate_LiteralValue_Range();
  }

  late final _cst_inflate_LiteralValue_RangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Range');
  late final _cst_inflate_LiteralValue_Range =
      _cst_inflate_LiteralValue_RangePtr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_DateTime() {
    return _cst_inflate_LiteralValue_DateTime();
  }

  late final _cst_inflate_LiteralValue_DateTimePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_DateTime');
  late final _cst_inflate_LiteralValue_DateTime =
      _cst_inflate_LiteralValue_DateTimePtr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Duration() {
    return _cst_inflate_LiteralValue_Duration();
  }

  late final _cst_inflate_LiteralValue_DurationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Duration');
  late final _cst_inflate_LiteralValue_Duration =
      _cst_inflate_LiteralValue_DurationPtr
          .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Date() {
    return _cst_inflate_LiteralValue_Date();
  }

  late final _cst_inflate_LiteralValue_DatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Date');
  late final _cst_inflate_LiteralValue_Date = _cst_inflate_LiteralValue_DatePtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> cst_inflate_LiteralValue_Time() {
    return _cst_inflate_LiteralValue_Time();
  }

  late final _cst_inflate_LiteralValue_TimePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'cst_inflate_LiteralValue_Time');
  late final _cst_inflate_LiteralValue_Time = _cst_inflate_LiteralValue_TimePtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<NullValuesKind> cst_inflate_NullValues_AllColumnsSingle() {
    return _cst_inflate_NullValues_AllColumnsSingle();
  }

  late final _cst_inflate_NullValues_AllColumnsSinglePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NullValuesKind> Function()>>(
          'cst_inflate_NullValues_AllColumnsSingle');
  late final _cst_inflate_NullValues_AllColumnsSingle =
      _cst_inflate_NullValues_AllColumnsSinglePtr
          .asFunction<ffi.Pointer<NullValuesKind> Function()>();

  ffi.Pointer<NullValuesKind> cst_inflate_NullValues_AllColumns() {
    return _cst_inflate_NullValues_AllColumns();
  }

  late final _cst_inflate_NullValues_AllColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NullValuesKind> Function()>>(
          'cst_inflate_NullValues_AllColumns');
  late final _cst_inflate_NullValues_AllColumns =
      _cst_inflate_NullValues_AllColumnsPtr
          .asFunction<ffi.Pointer<NullValuesKind> Function()>();

  ffi.Pointer<NullValuesKind> cst_inflate_NullValues_Named() {
    return _cst_inflate_NullValues_Named();
  }

  late final _cst_inflate_NullValues_NamedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NullValuesKind> Function()>>(
          'cst_inflate_NullValues_Named');
  late final _cst_inflate_NullValues_Named = _cst_inflate_NullValues_NamedPtr
      .asFunction<ffi.Pointer<NullValuesKind> Function()>();

  ffi.Pointer<WindowTypeKind> cst_inflate_WindowType_Over() {
    return _cst_inflate_WindowType_Over();
  }

  late final _cst_inflate_WindowType_OverPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<WindowTypeKind> Function()>>(
          'cst_inflate_WindowType_Over');
  late final _cst_inflate_WindowType_Over = _cst_inflate_WindowType_OverPtr
      .asFunction<ffi.Pointer<WindowTypeKind> Function()>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_prim_f_64 extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_bool extends ffi.Struct {
  external ffi.Pointer<ffi.Bool> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_Expr_Alias extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;

  external ffi.Pointer<wire_cst_list_prim_u_8> field1;
}

final class wire_cst_expr extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ExprKind> kind;
}

final class ExprKind extends ffi.Union {
  external ffi.Pointer<wire_cst_Expr_Alias> Alias;

  external ffi.Pointer<wire_cst_Expr_Column> Column;

  external ffi.Pointer<wire_cst_Expr_Columns> Columns;

  external ffi.Pointer<wire_cst_Expr_DtypeColumn> DtypeColumn;

  external ffi.Pointer<wire_cst_Expr_Literal> Literal;

  external ffi.Pointer<wire_cst_Expr_BinaryExpr> BinaryExpr;

  external ffi.Pointer<wire_cst_Expr_Cast> Cast;

  external ffi.Pointer<wire_cst_Expr_Sort> Sort;

  external ffi.Pointer<wire_cst_Expr_Gather> Gather;

  external ffi.Pointer<wire_cst_Expr_SortBy> SortBy;

  external ffi.Pointer<wire_cst_Expr_Agg> Agg;

  external ffi.Pointer<wire_cst_Expr_Ternary> Ternary;

  external ffi.Pointer<wire_cst_Expr_Explode> Explode;

  external ffi.Pointer<wire_cst_Expr_Filter> Filter;

  external ffi.Pointer<wire_cst_Expr_Window> Window;

  external ffi.Pointer<wire_cst_Expr_Wildcard> Wildcard;

  external ffi.Pointer<wire_cst_Expr_Slice> Slice;

  external ffi.Pointer<wire_cst_Expr_Exclude> Exclude;

  external ffi.Pointer<wire_cst_Expr_KeepName> KeepName;

  external ffi.Pointer<wire_cst_Expr_Count> Count;

  external ffi.Pointer<wire_cst_Expr_Nth> Nth;
}

final class wire_cst_Expr_Column extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;
}

final class wire_cst_Expr_Columns extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_String> field0;
}

final class wire_cst_Expr_DtypeColumn extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_data_type> field0;
}

final class wire_cst_list_data_type extends ffi.Struct {
  external ffi.Pointer<wire_cst_data_type> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_data_type extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DataTypeKind> kind;
}

final class DataTypeKind extends ffi.Union {
  external ffi.Pointer<wire_cst_DataType_Boolean> Boolean;

  external ffi.Pointer<wire_cst_DataType_UInt8> UInt8;

  external ffi.Pointer<wire_cst_DataType_UInt16> UInt16;

  external ffi.Pointer<wire_cst_DataType_UInt32> UInt32;

  external ffi.Pointer<wire_cst_DataType_UInt64> UInt64;

  external ffi.Pointer<wire_cst_DataType_Int8> Int8;

  external ffi.Pointer<wire_cst_DataType_Int16> Int16;

  external ffi.Pointer<wire_cst_DataType_Int32> Int32;

  external ffi.Pointer<wire_cst_DataType_Int64> Int64;

  external ffi.Pointer<wire_cst_DataType_Float32> Float32;

  external ffi.Pointer<wire_cst_DataType_Float64> Float64;

  external ffi.Pointer<wire_cst_DataType_Utf8> Utf8;

  external ffi.Pointer<wire_cst_DataType_Binary> Binary;

  external ffi.Pointer<wire_cst_DataType_Date> Date;

  external ffi.Pointer<wire_cst_DataType_Datetime> Datetime;

  external ffi.Pointer<wire_cst_DataType_Duration> Duration;

  external ffi.Pointer<wire_cst_DataType_Time> Time;

  external ffi.Pointer<wire_cst_DataType_List> List;

  external ffi.Pointer<wire_cst_DataType_Null> Null;

  external ffi.Pointer<wire_cst_DataType_Struct> Struct;

  external ffi.Pointer<wire_cst_DataType_Unknown> Unknown;
}

final class wire_cst_DataType_Boolean extends ffi.Opaque {}

final class wire_cst_DataType_UInt8 extends ffi.Opaque {}

final class wire_cst_DataType_UInt16 extends ffi.Opaque {}

final class wire_cst_DataType_UInt32 extends ffi.Opaque {}

final class wire_cst_DataType_UInt64 extends ffi.Opaque {}

final class wire_cst_DataType_Int8 extends ffi.Opaque {}

final class wire_cst_DataType_Int16 extends ffi.Opaque {}

final class wire_cst_DataType_Int32 extends ffi.Opaque {}

final class wire_cst_DataType_Int64 extends ffi.Opaque {}

final class wire_cst_DataType_Float32 extends ffi.Opaque {}

final class wire_cst_DataType_Float64 extends ffi.Opaque {}

final class wire_cst_DataType_Utf8 extends ffi.Opaque {}

final class wire_cst_DataType_Binary extends ffi.Opaque {}

final class wire_cst_DataType_Date extends ffi.Opaque {}

final class wire_cst_DataType_Datetime extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  external ffi.Pointer<wire_cst_list_prim_u_8> field1;
}

final class wire_cst_DataType_Duration extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_DataType_Time extends ffi.Opaque {}

final class wire_cst_DataType_List extends ffi.Struct {
  external ffi.Pointer<wire_cst_data_type> field0;
}

final class wire_cst_DataType_Null extends ffi.Opaque {}

final class wire_cst_DataType_Struct extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_field> field0;
}

final class wire_cst_list_field extends ffi.Struct {
  external ffi.Pointer<wire_cst_field> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_field extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> name;

  external wire_cst_data_type dtype;
}

final class wire_cst_DataType_Unknown extends ffi.Opaque {}

final class wire_cst_Expr_Literal extends ffi.Struct {
  external ffi.Pointer<wire_cst_literal_value> field0;
}

final class wire_cst_literal_value extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<LiteralValueKind> kind;
}

final class LiteralValueKind extends ffi.Union {
  external ffi.Pointer<wire_cst_LiteralValue_Null> Null;

  external ffi.Pointer<wire_cst_LiteralValue_Boolean> Boolean;

  external ffi.Pointer<wire_cst_LiteralValue_Utf8> Utf8;

  external ffi.Pointer<wire_cst_LiteralValue_Binary> Binary;

  external ffi.Pointer<wire_cst_LiteralValue_UInt8> UInt8;

  external ffi.Pointer<wire_cst_LiteralValue_UInt16> UInt16;

  external ffi.Pointer<wire_cst_LiteralValue_UInt32> UInt32;

  external ffi.Pointer<wire_cst_LiteralValue_UInt64> UInt64;

  external ffi.Pointer<wire_cst_LiteralValue_Int8> Int8;

  external ffi.Pointer<wire_cst_LiteralValue_Int16> Int16;

  external ffi.Pointer<wire_cst_LiteralValue_Int32> Int32;

  external ffi.Pointer<wire_cst_LiteralValue_Int64> Int64;

  external ffi.Pointer<wire_cst_LiteralValue_Float32> Float32;

  external ffi.Pointer<wire_cst_LiteralValue_Float64> Float64;

  external ffi.Pointer<wire_cst_LiteralValue_Range> Range;

  external ffi.Pointer<wire_cst_LiteralValue_DateTime> DateTime;

  external ffi.Pointer<wire_cst_LiteralValue_Duration> Duration;

  external ffi.Pointer<wire_cst_LiteralValue_Date> Date;

  external ffi.Pointer<wire_cst_LiteralValue_Time> Time;
}

final class wire_cst_LiteralValue_Null extends ffi.Opaque {}

final class wire_cst_LiteralValue_Boolean extends ffi.Struct {
  @ffi.Bool()
  external bool field0;
}

final class wire_cst_LiteralValue_Utf8 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;
}

final class wire_cst_LiteralValue_Binary extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;
}

final class wire_cst_LiteralValue_UInt8 extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class wire_cst_LiteralValue_UInt16 extends ffi.Struct {
  @ffi.Uint16()
  external int field0;
}

final class wire_cst_LiteralValue_UInt32 extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class wire_cst_LiteralValue_UInt64 extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

final class wire_cst_LiteralValue_Int8 extends ffi.Struct {
  @ffi.Int8()
  external int field0;
}

final class wire_cst_LiteralValue_Int16 extends ffi.Struct {
  @ffi.Int16()
  external int field0;
}

final class wire_cst_LiteralValue_Int32 extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_LiteralValue_Int64 extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class wire_cst_LiteralValue_Float32 extends ffi.Struct {
  @ffi.Float()
  external double field0;
}

final class wire_cst_LiteralValue_Float64 extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

final class wire_cst_LiteralValue_Range extends ffi.Struct {
  @ffi.Int64()
  external int low;

  @ffi.Int64()
  external int high;

  external ffi.Pointer<wire_cst_data_type> data_type;
}

final class wire_cst_LiteralValue_DateTime extends ffi.Struct {
  @ffi.Int64()
  external int field0;

  @ffi.Int32()
  external int field1;

  external ffi.Pointer<wire_cst_list_prim_u_8> field2;
}

final class wire_cst_LiteralValue_Duration extends ffi.Struct {
  @ffi.Int64()
  external int field0;

  @ffi.Int32()
  external int field1;
}

final class wire_cst_LiteralValue_Date extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_LiteralValue_Time extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class wire_cst_Expr_BinaryExpr extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> left;

  @ffi.Int32()
  external int op;

  external ffi.Pointer<wire_cst_expr> right;
}

final class wire_cst_Expr_Cast extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> expr;

  external ffi.Pointer<wire_cst_data_type> data_type;

  @ffi.Bool()
  external bool strict;
}

final class wire_cst_Expr_Sort extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> expr;

  external ffi.Pointer<wire_cst_sort_options> options;
}

final class wire_cst_sort_options extends ffi.Struct {
  @ffi.Bool()
  external bool descending;

  @ffi.Bool()
  external bool nulls_last;

  @ffi.Bool()
  external bool multithreaded;

  @ffi.Bool()
  external bool maintain_order;
}

final class wire_cst_Expr_Gather extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> expr;

  external ffi.Pointer<wire_cst_expr> idx;

  @ffi.Bool()
  external bool returns_scalar;
}

final class wire_cst_Expr_SortBy extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> expr;

  external ffi.Pointer<wire_cst_list_expr> by;

  external ffi.Pointer<wire_cst_list_bool> descending;
}

final class wire_cst_list_expr extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_Expr_Agg extends ffi.Struct {
  external ffi.Pointer<wire_cst_agg_expr> field0;
}

final class wire_cst_agg_expr extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<AggExprKind> kind;
}

final class AggExprKind extends ffi.Union {
  external ffi.Pointer<wire_cst_AggExpr_Min> Min;

  external ffi.Pointer<wire_cst_AggExpr_Max> Max;

  external ffi.Pointer<wire_cst_AggExpr_Median> Median;

  external ffi.Pointer<wire_cst_AggExpr_NUnique> NUnique;

  external ffi.Pointer<wire_cst_AggExpr_First> First;

  external ffi.Pointer<wire_cst_AggExpr_Last> Last;

  external ffi.Pointer<wire_cst_AggExpr_Mean> Mean;

  external ffi.Pointer<wire_cst_AggExpr_Count> Count;

  external ffi.Pointer<wire_cst_AggExpr_Quantile> Quantile;

  external ffi.Pointer<wire_cst_AggExpr_Sum> Sum;

  external ffi.Pointer<wire_cst_AggExpr_AggGroups> AggGroups;

  external ffi.Pointer<wire_cst_AggExpr_Std> Std;

  external ffi.Pointer<wire_cst_AggExpr_Var> Var;
}

final class wire_cst_AggExpr_Min extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> input;

  @ffi.Bool()
  external bool propagate_nans;
}

final class wire_cst_AggExpr_Max extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> input;

  @ffi.Bool()
  external bool propagate_nans;
}

final class wire_cst_AggExpr_Median extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_AggExpr_NUnique extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_AggExpr_First extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_AggExpr_Last extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_AggExpr_Mean extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_AggExpr_Count extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_AggExpr_Quantile extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> expr;

  external ffi.Pointer<wire_cst_expr> quantile;

  @ffi.Int32()
  external int interpol;
}

final class wire_cst_AggExpr_Sum extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_AggExpr_AggGroups extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_AggExpr_Std extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;

  @ffi.Uint8()
  external int field1;
}

final class wire_cst_AggExpr_Var extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;

  @ffi.Uint8()
  external int field1;
}

final class wire_cst_Expr_Ternary extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> predicate;

  external ffi.Pointer<wire_cst_expr> truthy;

  external ffi.Pointer<wire_cst_expr> falsy;
}

final class wire_cst_Expr_Explode extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_Expr_Filter extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> input;

  external ffi.Pointer<wire_cst_expr> by;
}

final class wire_cst_Expr_Window extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> function;

  external ffi.Pointer<wire_cst_list_expr> partition_by;

  external ffi.Pointer<wire_cst_window_type> options;
}

final class wire_cst_window_type extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<WindowTypeKind> kind;
}

final class WindowTypeKind extends ffi.Union {
  external ffi.Pointer<wire_cst_WindowType_Over> Over;
}

final class wire_cst_WindowType_Over extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_Expr_Wildcard extends ffi.Opaque {}

final class wire_cst_Expr_Slice extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> input;

  external ffi.Pointer<wire_cst_expr> offset;

  external ffi.Pointer<wire_cst_expr> length;
}

final class wire_cst_Expr_Exclude extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;

  external ffi.Pointer<wire_cst_list_excluded> field1;
}

final class wire_cst_list_excluded extends ffi.Struct {
  external ffi.Pointer<wire_cst_excluded> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_excluded extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ExcludedKind> kind;
}

final class ExcludedKind extends ffi.Union {
  external ffi.Pointer<wire_cst_Excluded_Name> Name;

  external ffi.Pointer<wire_cst_Excluded_Dtype> Dtype;
}

final class wire_cst_Excluded_Name extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;
}

final class wire_cst_Excluded_Dtype extends ffi.Struct {
  external ffi.Pointer<wire_cst_data_type> field0;
}

final class wire_cst_Expr_KeepName extends ffi.Struct {
  external ffi.Pointer<wire_cst_expr> field0;
}

final class wire_cst_Expr_Count extends ffi.Opaque {}

final class wire_cst_Expr_Nth extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

final class wire_cst_list_prim_i_64 extends ffi.Struct {
  external ffi.Pointer<ffi.Int64> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_f_64 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Double>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_Chrono_Duration extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int64>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_i_32 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int32>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_i_64 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int64>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_row_count extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> name;

  @ffi.Uint32()
  external int offset;
}

final class wire_cst_NullValues_AllColumnsSingle extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;
}

final class wire_cst_NullValues_AllColumns extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_String> field0;
}

final class wire_cst_record_string_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> field0;

  external ffi.Pointer<wire_cst_list_prim_u_8> field1;
}

final class wire_cst_list_record_string_string extends ffi.Struct {
  external ffi.Pointer<wire_cst_record_string_string> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_NullValues_Named extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_record_string_string> field0;
}

final class NullValuesKind extends ffi.Union {
  external ffi.Pointer<wire_cst_NullValues_AllColumnsSingle> AllColumnsSingle;

  external ffi.Pointer<wire_cst_NullValues_AllColumns> AllColumns;

  external ffi.Pointer<wire_cst_NullValues_Named> Named;
}

final class wire_cst_null_values extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<NullValuesKind> kind;
}

final class wire_cst_list_prim_u_32 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_dartabi extends ffi.Struct {
  external ffi.Pointer<ffi.Int> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_Chrono_Local extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int64>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_Chrono_Naive extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int64>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_opt_box_autoadd_Chrono_Utc extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Int64>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_shape extends ffi.Struct {
  @ffi.UintPtr()
  external int height;

  @ffi.UintPtr()
  external int width;
}
