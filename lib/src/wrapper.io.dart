// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.59.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'wrapper.dart';
export 'wrapper.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

class PolarsWrapperPlatform extends FlutterRustBridgeBase<PolarsWrapperWire> {
  PolarsWrapperPlatform(ffi.DynamicLibrary dylib)
      : super(PolarsWrapperWire(dylib));

// Section: api2wire

  @protected
  wire_RwLockPDataFrame api2wire_RwLockPDataFrame(RwLockPDataFrame raw) {
    final ptr = inner.new_RwLockPDataFrame();
    _api_fill_to_wire_RwLockPDataFrame(raw, ptr);
    return ptr;
  }

  @protected
  wire_RwLockPSeries api2wire_RwLockPSeries(RwLockPSeries raw) {
    final ptr = inner.new_RwLockPSeries();
    _api_fill_to_wire_RwLockPSeries(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<wire_DataFrame> api2wire_box_autoadd_data_frame(DataFrame raw) {
    final ptr = inner.new_box_autoadd_data_frame_0();
    _api_fill_to_wire_data_frame(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Series> api2wire_box_autoadd_series(Series raw) {
    final ptr = inner.new_box_autoadd_series_0();
    _api_fill_to_wire_series(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_0(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_float_64_list(Float64List raw) {
    final ans = inner.new_float_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_int_32_list(Int32List raw) {
    final ans = inner.new_int_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_opt_StringList(List<String>? raw) {
    return raw == null ? ffi.nullptr : api2wire_StringList(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_opt_float_64_list(Float64List? raw) {
    return raw == null ? ffi.nullptr : api2wire_float_64_list(raw);
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_opt_int_32_list(Int32List? raw) {
    return raw == null ? ffi.nullptr : api2wire_int_32_list(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _RwLockPDataFrameFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPDataFramePtr);
  OpaqueTypeFinalizer get RwLockPDataFrameFinalizer =>
      _RwLockPDataFrameFinalizer;
  late final OpaqueTypeFinalizer _RwLockPSeriesFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPSeriesPtr);
  OpaqueTypeFinalizer get RwLockPSeriesFinalizer => _RwLockPSeriesFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_RwLockPDataFrame(
      RwLockPDataFrame apiObj, wire_RwLockPDataFrame wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockPSeries(
      RwLockPSeries apiObj, wire_RwLockPSeries wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_box_autoadd_data_frame(
      DataFrame apiObj, ffi.Pointer<wire_DataFrame> wireObj) {
    _api_fill_to_wire_data_frame(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_series(
      Series apiObj, ffi.Pointer<wire_Series> wireObj) {
    _api_fill_to_wire_series(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_data_frame(DataFrame apiObj, wire_DataFrame wireObj) {
    wireObj.field0 = api2wire_RwLockPDataFrame(apiObj.field0);
  }

  void _api_fill_to_wire_series(Series apiObj, wire_Series wireObj) {
    wireObj.field0 = api2wire_RwLockPSeries(apiObj.field0);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class PolarsWrapperWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PolarsWrapperWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PolarsWrapperWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_read_csv(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<ffi.Bool> has_header,
    ffi.Pointer<wire_StringList> columns,
    ffi.Pointer<ffi.Uint8> delimiter,
  ) {
    return _wire_read_csv(
      port_,
      path,
      has_header,
      columns,
      delimiter,
    );
  }

  late final _wire_read_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<ffi.Uint8>)>>('wire_read_csv');
  late final _wire_read_csv = _wire_read_csvPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Bool>,
          ffi.Pointer<wire_StringList>, ffi.Pointer<ffi.Uint8>)>();

  void wire_read_json(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_read_json(
      port_,
      path,
    );
  }

  late final _wire_read_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_read_json');
  late final _wire_read_json = _wire_read_jsonPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_column__method__DataFrame(
    int port_,
    ffi.Pointer<wire_DataFrame> that,
    ffi.Pointer<wire_uint_8_list> column,
  ) {
    return _wire_column__method__DataFrame(
      port_,
      that,
      column,
    );
  }

  late final _wire_column__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_DataFrame>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_column__method__DataFrame');
  late final _wire_column__method__DataFrame =
      _wire_column__method__DataFramePtr.asFunction<
          void Function(int, ffi.Pointer<wire_DataFrame>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_columns__method__DataFrame(
    int port_,
    ffi.Pointer<wire_DataFrame> that,
    ffi.Pointer<wire_StringList> columns,
  ) {
    return _wire_columns__method__DataFrame(
      port_,
      that,
      columns,
    );
  }

  late final _wire_columns__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_DataFrame>,
                  ffi.Pointer<wire_StringList>)>>(
      'wire_columns__method__DataFrame');
  late final _wire_columns__method__DataFrame =
      _wire_columns__method__DataFramePtr.asFunction<
          void Function(int, ffi.Pointer<wire_DataFrame>,
              ffi.Pointer<wire_StringList>)>();

  void wire_dump__method__DataFrame(
    int port_,
    ffi.Pointer<wire_DataFrame> that,
  ) {
    return _wire_dump__method__DataFrame(
      port_,
      that,
    );
  }

  late final _wire_dump__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_DataFrame>)>>('wire_dump__method__DataFrame');
  late final _wire_dump__method__DataFrame = _wire_dump__method__DataFramePtr
      .asFunction<void Function(int, ffi.Pointer<wire_DataFrame>)>();

  void wire_of_strings__static_method__Series(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_StringList> values,
  ) {
    return _wire_of_strings__static_method__Series(
      port_,
      name,
      values,
    );
  }

  late final _wire_of_strings__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_StringList>)>>(
      'wire_of_strings__static_method__Series');
  late final _wire_of_strings__static_method__Series =
      _wire_of_strings__static_method__SeriesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>();

  void wire_of_i32__static_method__Series(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_int_32_list> values,
  ) {
    return _wire_of_i32__static_method__Series(
      port_,
      name,
      values,
    );
  }

  late final _wire_of_i32__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_int_32_list>)>>(
      'wire_of_i32__static_method__Series');
  late final _wire_of_i32__static_method__Series =
      _wire_of_i32__static_method__SeriesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_int_32_list>)>();

  void wire_of_f64__static_method__Series(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_float_64_list> values,
  ) {
    return _wire_of_f64__static_method__Series(
      port_,
      name,
      values,
    );
  }

  late final _wire_of_f64__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_float_64_list>)>>(
      'wire_of_f64__static_method__Series');
  late final _wire_of_f64__static_method__Series =
      _wire_of_f64__static_method__SeriesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_float_64_list>)>();

  void wire_append__method__Series(
    int port_,
    ffi.Pointer<wire_Series> that,
    ffi.Pointer<wire_Series> other,
  ) {
    return _wire_append__method__Series(
      port_,
      that,
      other,
    );
  }

  late final _wire_append__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Series>,
              ffi.Pointer<wire_Series>)>>('wire_append__method__Series');
  late final _wire_append__method__Series =
      _wire_append__method__SeriesPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_Series>, ffi.Pointer<wire_Series>)>();

  void wire_as_strings__method__Series(
    int port_,
    ffi.Pointer<wire_Series> that,
  ) {
    return _wire_as_strings__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_strings__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Series>)>>('wire_as_strings__method__Series');
  late final _wire_as_strings__method__Series =
      _wire_as_strings__method__SeriesPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Series>)>();

  void wire_as_i32__method__Series(
    int port_,
    ffi.Pointer<wire_Series> that,
  ) {
    return _wire_as_i32__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_i32__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Series>)>>('wire_as_i32__method__Series');
  late final _wire_as_i32__method__Series = _wire_as_i32__method__SeriesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Series>)>();

  void wire_as_f64__method__Series(
    int port_,
    ffi.Pointer<wire_Series> that,
  ) {
    return _wire_as_f64__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_f64__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Series>)>>('wire_as_f64__method__Series');
  late final _wire_as_f64__method__Series = _wire_as_f64__method__SeriesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Series>)>();

  wire_RwLockPDataFrame new_RwLockPDataFrame() {
    return _new_RwLockPDataFrame();
  }

  late final _new_RwLockPDataFramePtr =
      _lookup<ffi.NativeFunction<wire_RwLockPDataFrame Function()>>(
          'new_RwLockPDataFrame');
  late final _new_RwLockPDataFrame =
      _new_RwLockPDataFramePtr.asFunction<wire_RwLockPDataFrame Function()>();

  wire_RwLockPSeries new_RwLockPSeries() {
    return _new_RwLockPSeries();
  }

  late final _new_RwLockPSeriesPtr =
      _lookup<ffi.NativeFunction<wire_RwLockPSeries Function()>>(
          'new_RwLockPSeries');
  late final _new_RwLockPSeries =
      _new_RwLockPSeriesPtr.asFunction<wire_RwLockPSeries Function()>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
          'new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 = _new_box_autoadd_bool_0Ptr
      .asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_DataFrame> new_box_autoadd_data_frame_0() {
    return _new_box_autoadd_data_frame_0();
  }

  late final _new_box_autoadd_data_frame_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DataFrame> Function()>>(
          'new_box_autoadd_data_frame_0');
  late final _new_box_autoadd_data_frame_0 = _new_box_autoadd_data_frame_0Ptr
      .asFunction<ffi.Pointer<wire_DataFrame> Function()>();

  ffi.Pointer<wire_Series> new_box_autoadd_series_0() {
    return _new_box_autoadd_series_0();
  }

  late final _new_box_autoadd_series_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Series> Function()>>(
          'new_box_autoadd_series_0');
  late final _new_box_autoadd_series_0 = _new_box_autoadd_series_0Ptr
      .asFunction<ffi.Pointer<wire_Series> Function()>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_0(
    int value,
  ) {
    return _new_box_autoadd_u8_0(
      value,
    );
  }

  late final _new_box_autoadd_u8_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'new_box_autoadd_u8_0');
  late final _new_box_autoadd_u8_0 = _new_box_autoadd_u8_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_float_64_list> new_float_64_list_0(
    int len,
  ) {
    return _new_float_64_list_0(
      len,
    );
  }

  late final _new_float_64_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_float_64_list> Function(
              ffi.Int32)>>('new_float_64_list_0');
  late final _new_float_64_list_0 = _new_float_64_list_0Ptr
      .asFunction<ffi.Pointer<wire_float_64_list> Function(int)>();

  ffi.Pointer<wire_int_32_list> new_int_32_list_0(
    int len,
  ) {
    return _new_int_32_list_0(
      len,
    );
  }

  late final _new_int_32_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_int_32_list> Function(
              ffi.Int32)>>('new_int_32_list_0');
  late final _new_int_32_list_0 = _new_int_32_list_0Ptr
      .asFunction<ffi.Pointer<wire_int_32_list> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_RwLockPDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPDataFrame(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPDataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPDataFrame');
  late final _drop_opaque_RwLockPDataFrame = _drop_opaque_RwLockPDataFramePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPDataFrame(
      ptr,
    );
  }

  late final _share_opaque_RwLockPDataFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPDataFrame');
  late final _share_opaque_RwLockPDataFrame = _share_opaque_RwLockPDataFramePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockPSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPSeries(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPSeries');
  late final _drop_opaque_RwLockPSeries = _drop_opaque_RwLockPSeriesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPSeries(
      ptr,
    );
  }

  late final _share_opaque_RwLockPSeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPSeries');
  late final _share_opaque_RwLockPSeries = _share_opaque_RwLockPSeriesPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPDataFrame extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_DataFrame extends ffi.Struct {
  external wire_RwLockPDataFrame field0;
}

class wire_int_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

class wire_float_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPSeries extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_Series extends ffi.Struct {
  external wire_RwLockPSeries field0;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
