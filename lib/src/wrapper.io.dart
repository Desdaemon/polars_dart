// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.60.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'wrapper.dart';
export 'wrapper.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

class PolarsWrapperPlatform extends FlutterRustBridgeBase<PolarsWrapperWire> {
  PolarsWrapperPlatform(ffi.DynamicLibrary dylib)
      : super(PolarsWrapperWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_ArcStr(String raw) {
    return api2wire_String(raw);
  }

  @protected
  int api2wire_Chrono_Duration(Duration raw) {
    return api2wire_i64(raw.inMicroseconds);
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_Chrono_DurationList(
      List<Duration> raw) {
    final ans = Int64List(raw.length);
    for (var i = 0; i < raw.length; ++i)
      ans[i] = api2wire_Chrono_Duration(raw[i]);
    return api2wire_int_64_list(ans);
  }

  @protected
  int api2wire_Chrono_Naive(DateTime raw) {
    return api2wire_i64(raw.microsecondsSinceEpoch);
  }

  @protected
  wire_RwLockPDataFrame api2wire_RwLockPDataFrame(RwLockPDataFrame raw) {
    final ptr = inner.new_RwLockPDataFrame();
    _api_fill_to_wire_RwLockPDataFrame(raw, ptr);
    return ptr;
  }

  @protected
  wire_RwLockPLazyFrame api2wire_RwLockPLazyFrame(RwLockPLazyFrame raw) {
    final ptr = inner.new_RwLockPLazyFrame();
    _api_fill_to_wire_RwLockPLazyFrame(raw, ptr);
    return ptr;
  }

  @protected
  wire_RwLockPLazyGroupBy api2wire_RwLockPLazyGroupBy(RwLockPLazyGroupBy raw) {
    final ptr = inner.new_RwLockPLazyGroupBy();
    _api_fill_to_wire_RwLockPLazyGroupBy(raw, ptr);
    return ptr;
  }

  @protected
  wire_RwLockPSeries api2wire_RwLockPSeries(RwLockPSeries raw) {
    final ptr = inner.new_RwLockPSeries();
    _api_fill_to_wire_RwLockPSeries(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  wire_AggExpr api2wire_agg_expr(AggExpr raw) {
    final shell = inner.new_agg_expr_0();
    _api_fill_to_wire_agg_expr(raw, shell);
    return shell;
  }

  @protected
  ffi.Pointer<wire_AggExpr> api2wire_box_autoadd_agg_expr(AggExpr raw) {
    final ptr = inner.new_box_autoadd_agg_expr_0();
    _api_fill_to_wire_agg_expr(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_char(String raw) {
    return inner.new_box_autoadd_char_0(api2wire_char(raw));
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_box_autoadd_csv_encoding(CsvEncoding raw) {
    return inner.new_box_autoadd_csv_encoding_0(api2wire_csv_encoding(raw));
  }

  @protected
  ffi.Pointer<wire_DataType> api2wire_box_autoadd_data_type(DataType raw) {
    final ptr = inner.new_box_autoadd_data_type_0();
    _api_fill_to_wire_data_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LiteralValue> api2wire_box_autoadd_literal_value(
      LiteralValue raw) {
    final ptr = inner.new_box_autoadd_literal_value_0();
    _api_fill_to_wire_literal_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NullValues> api2wire_box_autoadd_null_values(
      NullValues raw) {
    final ptr = inner.new_box_autoadd_null_values_0();
    _api_fill_to_wire_null_values(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RowCount> api2wire_box_autoadd_row_count(RowCount raw) {
    final ptr = inner.new_box_autoadd_row_count_0();
    _api_fill_to_wire_row_count(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SortOptions> api2wire_box_autoadd_sort_options(
      SortOptions raw) {
    final ptr = inner.new_box_autoadd_sort_options_0();
    _api_fill_to_wire_sort_options(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_box_autoadd_usize(int raw) {
    return inner.new_box_autoadd_usize_0(api2wire_usize(raw));
  }

  @protected
  ffi.Pointer<wire_DataType> api2wire_box_data_type(DataType raw) {
    final ptr = inner.new_box_data_type_0();
    _api_fill_to_wire_data_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Expr> api2wire_box_expr(Expr raw) {
    final ptr = inner.new_box_expr_0();
    _api_fill_to_wire_expr(raw, ptr.ref);
    return ptr;
  }

  @protected
  wire_DataFrame api2wire_data_frame(DataFrame raw) {
    final shell = inner.new_data_frame_0();
    _api_fill_to_wire_data_frame(raw, shell);
    return shell;
  }

  @protected
  wire_DataType api2wire_data_type(DataType raw) {
    final shell = inner.new_data_type_0();
    _api_fill_to_wire_data_type(raw, shell);
    return shell;
  }

  @protected
  wire_Excluded api2wire_excluded(Excluded raw) {
    final shell = inner.new_excluded_0();
    _api_fill_to_wire_excluded(raw, shell);
    return shell;
  }

  @protected
  wire_Expr api2wire_expr(Expr raw) {
    final shell = inner.new_expr_0();
    _api_fill_to_wire_expr(raw, shell);
    return shell;
  }

  @protected
  wire_Field api2wire_field(Field raw) {
    final shell = inner.new_field_0();
    _api_fill_to_wire_field(raw, shell);
    return shell;
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_float_64_list(Float64List raw) {
    final ans = inner.new_float_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_int_32_list(Int32List raw) {
    final ans = inner.new_int_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_int_64_list(Int64List raw) {
    final ans = inner.new_int_64_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw.inner);
    return ans;
  }

  @protected
  wire_LazyFrame api2wire_lazy_frame(LazyFrame raw) {
    final shell = inner.new_lazy_frame_0();
    _api_fill_to_wire_lazy_frame(raw, shell);
    return shell;
  }

  @protected
  wire_LazyGroupBy api2wire_lazy_group_by(LazyGroupBy raw) {
    final shell = inner.new_lazy_group_by_0();
    _api_fill_to_wire_lazy_group_by(raw, shell);
    return shell;
  }

  @protected
  ffi.Pointer<wire_list_data_type> api2wire_list_data_type(List<DataType> raw) {
    final ans = inner.new_list_data_type_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_data_type(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_excluded> api2wire_list_excluded(List<Excluded> raw) {
    final ans = inner.new_list_excluded_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_excluded(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_expr> api2wire_list_expr(List<Expr> raw) {
    final ans = inner.new_list_expr_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_expr(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_field> api2wire_list_field(List<Field> raw) {
    final ans = inner.new_list_field_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_field(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  wire_LiteralValue api2wire_literal_value(LiteralValue raw) {
    final shell = inner.new_literal_value_0();
    _api_fill_to_wire_literal_value(raw, shell);
    return shell;
  }

  @protected
  wire_NullValues api2wire_null_values(NullValues raw) {
    final shell = inner.new_null_values_0();
    _api_fill_to_wire_null_values(raw, shell);
    return shell;
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_opt_Chrono_DurationList(
      List<Duration>? raw) {
    return raw == null ? ffi.nullptr : api2wire_Chrono_DurationList(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_opt_StringList(List<String>? raw) {
    return raw == null ? ffi.nullptr : api2wire_StringList(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_char(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_char(raw);
  }

  @protected
  ffi.Pointer<ffi.Int32> api2wire_opt_csv_encoding(CsvEncoding? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_csv_encoding(raw);
  }

  @protected
  ffi.Pointer<wire_float_64_list> api2wire_opt_float_64_list(Float64List? raw) {
    return raw == null ? ffi.nullptr : api2wire_float_64_list(raw);
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_opt_int_32_list(Int32List? raw) {
    return raw == null ? ffi.nullptr : api2wire_int_32_list(raw);
  }

  @protected
  ffi.Pointer<wire_int_64_list> api2wire_opt_int_64_list(Int64List? raw) {
    return raw == null ? ffi.nullptr : api2wire_int_64_list(raw);
  }

  @protected
  ffi.Pointer<wire_list_expr> api2wire_opt_list_expr(List<Expr>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_expr(raw);
  }

  @protected
  ffi.Pointer<wire_NullValues> api2wire_opt_null_values(NullValues? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_null_values(raw);
  }

  @protected
  ffi.Pointer<wire_RowCount> api2wire_opt_row_count(RowCount? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_row_count(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  ffi.Pointer<wire_uint_32_list> api2wire_opt_uint_32_list(Uint32List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_32_list(raw);
  }

  @protected
  ffi.Pointer<ffi.UintPtr> api2wire_opt_usize(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_usize(raw);
  }

  @protected
  wire_RowCount api2wire_row_count(RowCount raw) {
    final shell = inner.new_row_count_0();
    _api_fill_to_wire_row_count(raw, shell);
    return shell;
  }

  @protected
  wire_Series api2wire_series(Series raw) {
    final shell = inner.new_series_0();
    _api_fill_to_wire_series(raw, shell);
    return shell;
  }

  @protected
  wire_SortOptions api2wire_sort_options(SortOptions raw) {
    final shell = inner.new_sort_options_0();
    _api_fill_to_wire_sort_options(raw, shell);
    return shell;
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_32_list> api2wire_uint_32_list(Uint32List raw) {
    final ans = inner.new_uint_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _RwLockPDataFrameFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPDataFramePtr);
  OpaqueTypeFinalizer get RwLockPDataFrameFinalizer =>
      _RwLockPDataFrameFinalizer;
  late final OpaqueTypeFinalizer _RwLockPLazyFrameFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPLazyFramePtr);
  OpaqueTypeFinalizer get RwLockPLazyFrameFinalizer =>
      _RwLockPLazyFrameFinalizer;
  late final OpaqueTypeFinalizer _RwLockPLazyGroupByFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPLazyGroupByPtr);
  OpaqueTypeFinalizer get RwLockPLazyGroupByFinalizer =>
      _RwLockPLazyGroupByFinalizer;
  late final OpaqueTypeFinalizer _RwLockPSeriesFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_RwLockPSeriesPtr);
  OpaqueTypeFinalizer get RwLockPSeriesFinalizer => _RwLockPSeriesFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_RwLockPDataFrame(
      RwLockPDataFrame apiObj, wire_RwLockPDataFrame wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockPLazyFrame(
      RwLockPLazyFrame apiObj, wire_RwLockPLazyFrame wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockPLazyGroupBy(
      RwLockPLazyGroupBy apiObj, wire_RwLockPLazyGroupBy wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_RwLockPSeries(
      RwLockPSeries apiObj, wire_RwLockPSeries wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_agg_expr(AggExpr apiObj, wire_AggExpr wireObj) {
    if (apiObj is AggExpr_Min) {
      var pre_input = api2wire_box_expr(apiObj.input);
      var pre_propagate_nans = api2wire_bool(apiObj.propagateNans);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_AggExpr_Min();
      wireObj.kind.ref.Min.ref.input = pre_input;
      wireObj.kind.ref.Min.ref.propagate_nans = pre_propagate_nans;
      return;
    }
    if (apiObj is AggExpr_Max) {
      var pre_input = api2wire_box_expr(apiObj.input);
      var pre_propagate_nans = api2wire_bool(apiObj.propagateNans);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_AggExpr_Max();
      wireObj.kind.ref.Max.ref.input = pre_input;
      wireObj.kind.ref.Max.ref.propagate_nans = pre_propagate_nans;
      return;
    }
    if (apiObj is AggExpr_Median) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_AggExpr_Median();
      wireObj.kind.ref.Median.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_NUnique) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_AggExpr_NUnique();
      wireObj.kind.ref.NUnique.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_First) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_AggExpr_First();
      wireObj.kind.ref.First.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Last) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_AggExpr_Last();
      wireObj.kind.ref.Last.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Mean) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind = inner.inflate_AggExpr_Mean();
      wireObj.kind.ref.Mean.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_List) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_AggExpr_List();
      wireObj.kind.ref.List.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Count) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_AggExpr_Count();
      wireObj.kind.ref.Count.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Quantile) {
      var pre_expr = api2wire_box_expr(apiObj.expr);
      var pre_quantile = api2wire_box_expr(apiObj.quantile);
      var pre_interpol = api2wire_quantile_interpol_options(apiObj.interpol);
      wireObj.tag = 9;
      wireObj.kind = inner.inflate_AggExpr_Quantile();
      wireObj.kind.ref.Quantile.ref.expr = pre_expr;
      wireObj.kind.ref.Quantile.ref.quantile = pre_quantile;
      wireObj.kind.ref.Quantile.ref.interpol = pre_interpol;
      return;
    }
    if (apiObj is AggExpr_Sum) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind = inner.inflate_AggExpr_Sum();
      wireObj.kind.ref.Sum.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_AggGroups) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 11;
      wireObj.kind = inner.inflate_AggExpr_AggGroups();
      wireObj.kind.ref.AggGroups.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is AggExpr_Std) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      var pre_field1 = api2wire_u8(apiObj.field1);
      wireObj.tag = 12;
      wireObj.kind = inner.inflate_AggExpr_Std();
      wireObj.kind.ref.Std.ref.field0 = pre_field0;
      wireObj.kind.ref.Std.ref.field1 = pre_field1;
      return;
    }
  }

  void _api_fill_to_wire_data_frame(DataFrame apiObj, wire_DataFrame wireObj) {
    wireObj.field0 = api2wire_RwLockPDataFrame(apiObj.field0);
  }

  void _api_fill_to_wire_data_type(DataType apiObj, wire_DataType wireObj) {
    if (apiObj is DataType_Boolean) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DataType_UInt8) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DataType_UInt16) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is DataType_UInt32) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is DataType_UInt64) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is DataType_Int8) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is DataType_Int16) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is DataType_Int32) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is DataType_Int64) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is DataType_Float32) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is DataType_Float64) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is DataType_Utf8) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is DataType_Binary) {
      wireObj.tag = 12;
      return;
    }
    if (apiObj is DataType_Date) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is DataType_Datetime) {
      var pre_field0 = api2wire_time_unit(apiObj.field0);
      var pre_field1 = api2wire_opt_String(apiObj.field1);
      wireObj.tag = 14;
      wireObj.kind = inner.inflate_DataType_Datetime();
      wireObj.kind.ref.Datetime.ref.field0 = pre_field0;
      wireObj.kind.ref.Datetime.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is DataType_Duration) {
      var pre_field0 = api2wire_time_unit(apiObj.field0);
      wireObj.tag = 15;
      wireObj.kind = inner.inflate_DataType_Duration();
      wireObj.kind.ref.Duration.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Time) {
      wireObj.tag = 16;
      return;
    }
    if (apiObj is DataType_List) {
      var pre_field0 = api2wire_box_data_type(apiObj.field0);
      wireObj.tag = 17;
      wireObj.kind = inner.inflate_DataType_List();
      wireObj.kind.ref.List.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Struct) {
      var pre_field0 = api2wire_list_field(apiObj.field0);
      wireObj.tag = 18;
      wireObj.kind = inner.inflate_DataType_Struct();
      wireObj.kind.ref.Struct.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DataType_Unknown) {
      wireObj.tag = 19;
      return;
    }
  }

  void _api_fill_to_wire_excluded(Excluded apiObj, wire_Excluded wireObj) {
    if (apiObj is Excluded_Name) {
      var pre_field0 = api2wire_ArcStr(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Excluded_Name();
      wireObj.kind.ref.Name.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Excluded_Dtype) {
      var pre_field0 = api2wire_box_autoadd_data_type(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Excluded_Dtype();
      wireObj.kind.ref.Dtype.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_expr(Expr apiObj, wire_Expr wireObj) {
    if (apiObj is Expr_Alias) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      var pre_field1 = api2wire_ArcStr(apiObj.field1);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Expr_Alias();
      wireObj.kind.ref.Alias.ref.field0 = pre_field0;
      wireObj.kind.ref.Alias.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is Expr_Column) {
      var pre_field0 = api2wire_ArcStr(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Expr_Column();
      wireObj.kind.ref.Column.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Columns) {
      var pre_field0 = api2wire_StringList(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_Expr_Columns();
      wireObj.kind.ref.Columns.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_DtypeColumn) {
      var pre_field0 = api2wire_list_data_type(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_Expr_DtypeColumn();
      wireObj.kind.ref.DtypeColumn.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Literal) {
      var pre_field0 = api2wire_box_autoadd_literal_value(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_Expr_Literal();
      wireObj.kind.ref.Literal.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_BinaryExpr) {
      var pre_left = api2wire_box_expr(apiObj.left);
      var pre_op = api2wire_operator(apiObj.op);
      var pre_right = api2wire_box_expr(apiObj.right);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_Expr_BinaryExpr();
      wireObj.kind.ref.BinaryExpr.ref.left = pre_left;
      wireObj.kind.ref.BinaryExpr.ref.op = pre_op;
      wireObj.kind.ref.BinaryExpr.ref.right = pre_right;
      return;
    }
    if (apiObj is Expr_Cast) {
      var pre_expr = api2wire_box_expr(apiObj.expr);
      var pre_data_type = api2wire_box_autoadd_data_type(apiObj.dataType);
      var pre_strict = api2wire_bool(apiObj.strict);
      wireObj.tag = 6;
      wireObj.kind = inner.inflate_Expr_Cast();
      wireObj.kind.ref.Cast.ref.expr = pre_expr;
      wireObj.kind.ref.Cast.ref.data_type = pre_data_type;
      wireObj.kind.ref.Cast.ref.strict = pre_strict;
      return;
    }
    if (apiObj is Expr_Sort) {
      var pre_expr = api2wire_box_expr(apiObj.expr);
      var pre_options = api2wire_box_autoadd_sort_options(apiObj.options);
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_Expr_Sort();
      wireObj.kind.ref.Sort.ref.expr = pre_expr;
      wireObj.kind.ref.Sort.ref.options = pre_options;
      return;
    }
    if (apiObj is Expr_Take) {
      var pre_expr = api2wire_box_expr(apiObj.expr);
      var pre_idx = api2wire_box_expr(apiObj.idx);
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_Expr_Take();
      wireObj.kind.ref.Take.ref.expr = pre_expr;
      wireObj.kind.ref.Take.ref.idx = pre_idx;
      return;
    }
    if (apiObj is Expr_Agg) {
      var pre_field0 = api2wire_box_autoadd_agg_expr(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind = inner.inflate_Expr_Agg();
      wireObj.kind.ref.Agg.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Ternary) {
      var pre_predicate = api2wire_box_expr(apiObj.predicate);
      var pre_truthy = api2wire_box_expr(apiObj.truthy);
      var pre_falsy = api2wire_box_expr(apiObj.falsy);
      wireObj.tag = 10;
      wireObj.kind = inner.inflate_Expr_Ternary();
      wireObj.kind.ref.Ternary.ref.predicate = pre_predicate;
      wireObj.kind.ref.Ternary.ref.truthy = pre_truthy;
      wireObj.kind.ref.Ternary.ref.falsy = pre_falsy;
      return;
    }
    if (apiObj is Expr_Explode) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 11;
      wireObj.kind = inner.inflate_Expr_Explode();
      wireObj.kind.ref.Explode.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Filter) {
      var pre_input = api2wire_box_expr(apiObj.input);
      var pre_by = api2wire_box_expr(apiObj.by);
      wireObj.tag = 12;
      wireObj.kind = inner.inflate_Expr_Filter();
      wireObj.kind.ref.Filter.ref.input = pre_input;
      wireObj.kind.ref.Filter.ref.by = pre_by;
      return;
    }
    if (apiObj is Expr_Wildcard) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is Expr_Slice) {
      var pre_input = api2wire_box_expr(apiObj.input);
      var pre_offset = api2wire_box_expr(apiObj.offset);
      var pre_length = api2wire_box_expr(apiObj.length);
      wireObj.tag = 14;
      wireObj.kind = inner.inflate_Expr_Slice();
      wireObj.kind.ref.Slice.ref.input = pre_input;
      wireObj.kind.ref.Slice.ref.offset = pre_offset;
      wireObj.kind.ref.Slice.ref.length = pre_length;
      return;
    }
    if (apiObj is Expr_Exclude) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      var pre_field1 = api2wire_list_excluded(apiObj.field1);
      wireObj.tag = 15;
      wireObj.kind = inner.inflate_Expr_Exclude();
      wireObj.kind.ref.Exclude.ref.field0 = pre_field0;
      wireObj.kind.ref.Exclude.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is Expr_KeepName) {
      var pre_field0 = api2wire_box_expr(apiObj.field0);
      wireObj.tag = 16;
      wireObj.kind = inner.inflate_Expr_KeepName();
      wireObj.kind.ref.KeepName.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is Expr_Count) {
      wireObj.tag = 17;
      return;
    }
    if (apiObj is Expr_Nth) {
      var pre_field0 = api2wire_i64(apiObj.field0);
      wireObj.tag = 18;
      wireObj.kind = inner.inflate_Expr_Nth();
      wireObj.kind.ref.Nth.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_field(Field apiObj, wire_Field wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.dtype = api2wire_data_type(apiObj.dtype);
  }

  void _api_fill_to_wire_lazy_frame(LazyFrame apiObj, wire_LazyFrame wireObj) {
    wireObj.field0 = api2wire_RwLockPLazyFrame(apiObj.field0);
  }

  void _api_fill_to_wire_lazy_group_by(
      LazyGroupBy apiObj, wire_LazyGroupBy wireObj) {
    wireObj.field0 = api2wire_RwLockPLazyGroupBy(apiObj.field0);
  }

  void _api_fill_to_wire_literal_value(
      LiteralValue apiObj, wire_LiteralValue wireObj) {
    if (apiObj is LiteralValue_Boolean) {
      var pre_field0 = api2wire_bool(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_LiteralValue_Boolean();
      wireObj.kind.ref.Boolean.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Utf8) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_LiteralValue_Utf8();
      wireObj.kind.ref.Utf8.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Binary) {
      var pre_field0 = api2wire_uint_8_list(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_LiteralValue_Binary();
      wireObj.kind.ref.Binary.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt8) {
      var pre_field0 = api2wire_u8(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_LiteralValue_UInt8();
      wireObj.kind.ref.UInt8.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt16) {
      var pre_field0 = api2wire_u16(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_LiteralValue_UInt16();
      wireObj.kind.ref.UInt16.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt32) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_LiteralValue_UInt32();
      wireObj.kind.ref.UInt32.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_UInt64) {
      var pre_field0 = api2wire_u64(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind = inner.inflate_LiteralValue_UInt64();
      wireObj.kind.ref.UInt64.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int8) {
      var pre_field0 = api2wire_i8(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind = inner.inflate_LiteralValue_Int8();
      wireObj.kind.ref.Int8.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int16) {
      var pre_field0 = api2wire_i16(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind = inner.inflate_LiteralValue_Int16();
      wireObj.kind.ref.Int16.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int32) {
      var pre_field0 = api2wire_i32(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind = inner.inflate_LiteralValue_Int32();
      wireObj.kind.ref.Int32.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Int64) {
      var pre_field0 = api2wire_i64(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind = inner.inflate_LiteralValue_Int64();
      wireObj.kind.ref.Int64.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Float32) {
      var pre_field0 = api2wire_f32(apiObj.field0);
      wireObj.tag = 11;
      wireObj.kind = inner.inflate_LiteralValue_Float32();
      wireObj.kind.ref.Float32.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Float64) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 12;
      wireObj.kind = inner.inflate_LiteralValue_Float64();
      wireObj.kind.ref.Float64.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is LiteralValue_Range) {
      var pre_low = api2wire_i64(apiObj.low);
      var pre_high = api2wire_i64(apiObj.high);
      var pre_data_type = api2wire_box_autoadd_data_type(apiObj.dataType);
      wireObj.tag = 13;
      wireObj.kind = inner.inflate_LiteralValue_Range();
      wireObj.kind.ref.Range.ref.low = pre_low;
      wireObj.kind.ref.Range.ref.high = pre_high;
      wireObj.kind.ref.Range.ref.data_type = pre_data_type;
      return;
    }
    if (apiObj is LiteralValue_DateTime) {
      var pre_field0 = api2wire_Chrono_Naive(apiObj.field0);
      var pre_field1 = api2wire_time_unit(apiObj.field1);
      wireObj.tag = 14;
      wireObj.kind = inner.inflate_LiteralValue_DateTime();
      wireObj.kind.ref.DateTime.ref.field0 = pre_field0;
      wireObj.kind.ref.DateTime.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is LiteralValue_Duration) {
      var pre_field0 = api2wire_Chrono_Duration(apiObj.field0);
      var pre_field1 = api2wire_time_unit(apiObj.field1);
      wireObj.tag = 15;
      wireObj.kind = inner.inflate_LiteralValue_Duration();
      wireObj.kind.ref.Duration.ref.field0 = pre_field0;
      wireObj.kind.ref.Duration.ref.field1 = pre_field1;
      return;
    }
  }

  void _api_fill_to_wire_null_values(
      NullValues apiObj, wire_NullValues wireObj) {
    if (apiObj is NullValues_AllColumnsSingle) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_NullValues_AllColumnsSingle();
      wireObj.kind.ref.AllColumnsSingle.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is NullValues_AllColumns) {
      var pre_field0 = api2wire_StringList(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_NullValues_AllColumns();
      wireObj.kind.ref.AllColumns.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_opt_bool(bool? apiObj, ffi.Pointer<ffi.Bool> wireObj) {
    if (apiObj != null) wireObj.value = api2wire_bool(apiObj);
  }

  void _api_fill_to_wire_opt_char(
      String? apiObj, ffi.Pointer<ffi.Uint32> wireObj) {
    if (apiObj != null) wireObj.value = api2wire_char(apiObj);
  }

  void _api_fill_to_wire_opt_csv_encoding(
      CsvEncoding? apiObj, ffi.Pointer<ffi.Int32> wireObj) {
    if (apiObj != null) wireObj.value = api2wire_csv_encoding(apiObj);
  }

  void _api_fill_to_wire_opt_null_values(
      NullValues? apiObj, ffi.Pointer<wire_NullValues> wireObj) {
    if (apiObj != null) _api_fill_to_wire_null_values(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_opt_row_count(
      RowCount? apiObj, ffi.Pointer<wire_RowCount> wireObj) {
    if (apiObj != null) _api_fill_to_wire_row_count(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_opt_u32(int? apiObj, ffi.Pointer<ffi.Uint32> wireObj) {
    if (apiObj != null) wireObj.value = api2wire_u32(apiObj);
  }

  void _api_fill_to_wire_opt_u64(int? apiObj, ffi.Pointer<ffi.Uint64> wireObj) {
    if (apiObj != null) wireObj.value = api2wire_u64(apiObj);
  }

  void _api_fill_to_wire_opt_usize(
      int? apiObj, ffi.Pointer<ffi.UintPtr> wireObj) {
    if (apiObj != null) wireObj.value = api2wire_usize(apiObj);
  }

  void _api_fill_to_wire_row_count(RowCount apiObj, wire_RowCount wireObj) {
    wireObj.name = api2wire_String(apiObj.name);
    wireObj.offset = api2wire_u32(apiObj.offset);
  }

  void _api_fill_to_wire_series(Series apiObj, wire_Series wireObj) {
    wireObj.field0 = api2wire_RwLockPSeries(apiObj.field0);
  }

  void _api_fill_to_wire_sort_options(
      SortOptions apiObj, wire_SortOptions wireObj) {
    wireObj.descending = api2wire_bool(apiObj.descending);
    wireObj.nulls_last = api2wire_bool(apiObj.nullsLast);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class PolarsWrapperWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PolarsWrapperWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PolarsWrapperWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_read_csv(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<ffi.Bool> has_header,
    ffi.Pointer<wire_StringList> columns,
    ffi.Pointer<ffi.Uint32> delimiter,
    ffi.Pointer<ffi.Uint32> comment_char,
    ffi.Pointer<ffi.Uint32> eol_char,
    ffi.Pointer<ffi.Uint32> quote_char,
    int skip_rows,
    int skip_rows_after_header,
    ffi.Pointer<ffi.UintPtr> chunk_size,
    ffi.Pointer<wire_RowCount> row_count,
    ffi.Pointer<ffi.Int32> encoding,
    ffi.Pointer<ffi.UintPtr> n_rows,
    ffi.Pointer<ffi.UintPtr> n_threads,
    ffi.Pointer<wire_NullValues> null_values,
    ffi.Pointer<wire_uint_32_list> projection,
    bool ignore_parser_errors,
    bool rechunk,
    bool parse_dates,
  ) {
    return _wire_read_csv(
      port_,
      path,
      has_header,
      columns,
      delimiter,
      comment_char,
      eol_char,
      quote_char,
      skip_rows,
      skip_rows_after_header,
      chunk_size,
      row_count,
      encoding,
      n_rows,
      n_threads,
      null_values,
      projection,
      ignore_parser_errors,
      rechunk,
      parse_dates,
    );
  }

  late final _wire_read_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.UintPtr,
              ffi.UintPtr,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_RowCount>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_NullValues>,
              ffi.Pointer<wire_uint_32_list>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool)>>('wire_read_csv');
  late final _wire_read_csv = _wire_read_csvPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<wire_StringList>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          int,
          int,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_RowCount>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_NullValues>,
          ffi.Pointer<wire_uint_32_list>,
          bool,
          bool,
          bool)>();

  void wire_scan_csv(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<ffi.Bool> has_header,
    ffi.Pointer<ffi.Uint32> delimiter,
    ffi.Pointer<ffi.Uint32> comment_char,
    ffi.Pointer<ffi.Uint32> eol_char,
    ffi.Pointer<ffi.Uint32> quote_char,
    int skip_rows,
    int skip_rows_after_header,
    ffi.Pointer<wire_RowCount> row_count,
    ffi.Pointer<ffi.Int32> encoding,
    ffi.Pointer<ffi.UintPtr> n_rows,
    ffi.Pointer<wire_NullValues> null_values,
    bool ignore_parser_errors,
    bool rechunk,
    bool parse_dates,
    ffi.Pointer<ffi.UintPtr> infer_schema_length,
    bool cache,
  ) {
    return _wire_scan_csv(
      port_,
      path,
      has_header,
      delimiter,
      comment_char,
      eol_char,
      quote_char,
      skip_rows,
      skip_rows_after_header,
      row_count,
      encoding,
      n_rows,
      null_values,
      ignore_parser_errors,
      rechunk,
      parse_dates,
      infer_schema_length,
      cache,
    );
  }

  late final _wire_scan_csvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.UintPtr,
              ffi.UintPtr,
              ffi.Pointer<wire_RowCount>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Pointer<wire_NullValues>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.UintPtr>,
              ffi.Bool)>>('wire_scan_csv');
  late final _wire_scan_csv = _wire_scan_csvPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>,
          int,
          int,
          ffi.Pointer<wire_RowCount>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.UintPtr>,
          ffi.Pointer<wire_NullValues>,
          bool,
          bool,
          bool,
          ffi.Pointer<ffi.UintPtr>,
          bool)>();

  void wire_iter__method__DataFrame(
    int port_,
    wire_DataFrame that,
  ) {
    return _wire_iter__method__DataFrame(
      port_,
      that,
    );
  }

  late final _wire_iter__method__DataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DataFrame)>>(
          'wire_iter__method__DataFrame');
  late final _wire_iter__method__DataFrame = _wire_iter__method__DataFramePtr
      .asFunction<void Function(int, wire_DataFrame)>();

  WireSyncReturn wire_column__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_uint_8_list> column,
  ) {
    return _wire_column__method__DataFrame(
      that,
      column,
    );
  }

  late final _wire_column__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_column__method__DataFrame');
  late final _wire_column__method__DataFrame =
      _wire_column__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_columns__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_StringList> columns,
  ) {
    return _wire_columns__method__DataFrame(
      that,
      columns,
    );
  }

  late final _wire_columns__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_DataFrame, ffi.Pointer<wire_StringList>)>>(
      'wire_columns__method__DataFrame');
  late final _wire_columns__method__DataFrame =
      _wire_columns__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_StringList>)>();

  void wire_dump__method__DataFrame(
    int port_,
    wire_DataFrame that,
  ) {
    return _wire_dump__method__DataFrame(
      port_,
      that,
    );
  }

  late final _wire_dump__method__DataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DataFrame)>>(
          'wire_dump__method__DataFrame');
  late final _wire_dump__method__DataFrame = _wire_dump__method__DataFramePtr
      .asFunction<void Function(int, wire_DataFrame)>();

  WireSyncReturn wire_estimated_size__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_estimated_size__method__DataFrame(
      that,
    );
  }

  late final _wire_estimated_size__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_estimated_size__method__DataFrame');
  late final _wire_estimated_size__method__DataFrame =
      _wire_estimated_size__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  void wire_with_row_count__method__DataFrame(
    int port_,
    wire_DataFrame that,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _wire_with_row_count__method__DataFrame(
      port_,
      that,
      name,
      offset,
    );
  }

  late final _wire_with_row_count__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, wire_DataFrame,
                  ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Uint32>)>>(
      'wire_with_row_count__method__DataFrame');
  late final _wire_with_row_count__method__DataFrame =
      _wire_with_row_count__method__DataFramePtr.asFunction<
          void Function(int, wire_DataFrame, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Uint32>)>();

  WireSyncReturn wire_get_column_names__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_get_column_names__method__DataFrame(
      that,
    );
  }

  late final _wire_get_column_names__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_get_column_names__method__DataFrame');
  late final _wire_get_column_names__method__DataFrame =
      _wire_get_column_names__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  void wire_get_columns__method__DataFrame(
    int port_,
    wire_DataFrame that,
  ) {
    return _wire_get_columns__method__DataFrame(
      port_,
      that,
    );
  }

  late final _wire_get_columns__method__DataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DataFrame)>>(
          'wire_get_columns__method__DataFrame');
  late final _wire_get_columns__method__DataFrame =
      _wire_get_columns__method__DataFramePtr
          .asFunction<void Function(int, wire_DataFrame)>();

  WireSyncReturn wire_width__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_width__method__DataFrame(
      that,
    );
  }

  late final _wire_width__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_width__method__DataFrame');
  late final _wire_width__method__DataFrame = _wire_width__method__DataFramePtr
      .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  WireSyncReturn wire_height__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_height__method__DataFrame(
      that,
    );
  }

  late final _wire_height__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_height__method__DataFrame');
  late final _wire_height__method__DataFrame =
      _wire_height__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  WireSyncReturn wire_is_empty__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_is_empty__method__DataFrame(
      that,
    );
  }

  late final _wire_is_empty__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_is_empty__method__DataFrame');
  late final _wire_is_empty__method__DataFrame =
      _wire_is_empty__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  void wire_sample__method__DataFrame(
    int port_,
    wire_DataFrame that,
    int n,
    bool with_replacement,
    bool shuffle,
    ffi.Pointer<ffi.Uint64> seed,
  ) {
    return _wire_sample__method__DataFrame(
      port_,
      that,
      n,
      with_replacement,
      shuffle,
      seed,
    );
  }

  late final _wire_sample__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              wire_DataFrame,
              ffi.UintPtr,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.Uint64>)>>('wire_sample__method__DataFrame');
  late final _wire_sample__method__DataFrame =
      _wire_sample__method__DataFramePtr.asFunction<
          void Function(
              int, wire_DataFrame, int, bool, bool, ffi.Pointer<ffi.Uint64>)>();

  WireSyncReturn wire_select__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_StringList> columns,
  ) {
    return _wire_select__method__DataFrame(
      that,
      columns,
    );
  }

  late final _wire_select__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_DataFrame,
              ffi.Pointer<wire_StringList>)>>('wire_select__method__DataFrame');
  late final _wire_select__method__DataFrame =
      _wire_select__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_StringList>)>();

  WireSyncReturn wire_head__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_head__method__DataFrame(
      that,
      length,
    );
  }

  late final _wire_head__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_DataFrame,
              ffi.Pointer<ffi.UintPtr>)>>('wire_head__method__DataFrame');
  late final _wire_head__method__DataFrame =
      _wire_head__method__DataFramePtr.asFunction<
          WireSyncReturn Function(wire_DataFrame, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncReturn wire_tail__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_tail__method__DataFrame(
      that,
      length,
    );
  }

  late final _wire_tail__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_DataFrame,
              ffi.Pointer<ffi.UintPtr>)>>('wire_tail__method__DataFrame');
  late final _wire_tail__method__DataFrame =
      _wire_tail__method__DataFramePtr.asFunction<
          WireSyncReturn Function(wire_DataFrame, ffi.Pointer<ffi.UintPtr>)>();

  void wire_describe__method__DataFrame(
    int port_,
    wire_DataFrame that,
    ffi.Pointer<wire_float_64_list> percentiles,
  ) {
    return _wire_describe__method__DataFrame(
      port_,
      that,
      percentiles,
    );
  }

  late final _wire_describe__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, wire_DataFrame, ffi.Pointer<wire_float_64_list>)>>(
      'wire_describe__method__DataFrame');
  late final _wire_describe__method__DataFrame =
      _wire_describe__method__DataFramePtr.asFunction<
          void Function(
              int, wire_DataFrame, ffi.Pointer<wire_float_64_list>)>();

  WireSyncReturn wire_drop__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_uint_8_list> column,
  ) {
    return _wire_drop__method__DataFrame(
      that,
      column,
    );
  }

  late final _wire_drop__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_DataFrame,
              ffi.Pointer<wire_uint_8_list>)>>('wire_drop__method__DataFrame');
  late final _wire_drop__method__DataFrame =
      _wire_drop__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_drop_in_place__method__DataFrame(
    wire_DataFrame that,
    ffi.Pointer<wire_uint_8_list> column,
  ) {
    return _wire_drop_in_place__method__DataFrame(
      that,
      column,
    );
  }

  late final _wire_drop_in_place__method__DataFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_drop_in_place__method__DataFrame');
  late final _wire_drop_in_place__method__DataFrame =
      _wire_drop_in_place__method__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_reverse__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_reverse__method__DataFrame(
      that,
    );
  }

  late final _wire_reverse__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_reverse__method__DataFrame');
  late final _wire_reverse__method__DataFrame =
      _wire_reverse__method__DataFramePtr
          .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  WireSyncReturn wire_shape__method__DataFrame(
    wire_DataFrame that,
  ) {
    return _wire_shape__method__DataFrame(
      that,
    );
  }

  late final _wire_shape__method__DataFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_DataFrame)>>(
          'wire_shape__method__DataFrame');
  late final _wire_shape__method__DataFrame = _wire_shape__method__DataFramePtr
      .asFunction<WireSyncReturn Function(wire_DataFrame)>();

  void wire_max__method__DataFrame(
    int port_,
    wire_DataFrame that,
  ) {
    return _wire_max__method__DataFrame(
      port_,
      that,
    );
  }

  late final _wire_max__method__DataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_DataFrame)>>(
          'wire_max__method__DataFrame');
  late final _wire_max__method__DataFrame = _wire_max__method__DataFramePtr
      .asFunction<void Function(int, wire_DataFrame)>();

  void wire_get_row__method__DataFrame(
    int port_,
    wire_DataFrame that,
    int index,
  ) {
    return _wire_get_row__method__DataFrame(
      port_,
      that,
      index,
    );
  }

  late final _wire_get_row__method__DataFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_DataFrame,
              ffi.UintPtr)>>('wire_get_row__method__DataFrame');
  late final _wire_get_row__method__DataFrame =
      _wire_get_row__method__DataFramePtr
          .asFunction<void Function(int, wire_DataFrame, int)>();

  WireSyncReturn wire_lazy__method__take_self__DataFrame(
    wire_DataFrame that,
    bool allow_copy,
    ffi.Pointer<ffi.Bool> projection_pushdown,
    ffi.Pointer<ffi.Bool> predicate_pushdown,
    ffi.Pointer<ffi.Bool> type_coercion,
    ffi.Pointer<ffi.Bool> simplify_expressions,
    ffi.Pointer<ffi.Bool> slice_pushdown,
    ffi.Pointer<ffi.Bool> streaming,
  ) {
    return _wire_lazy__method__take_self__DataFrame(
      that,
      allow_copy,
      projection_pushdown,
      predicate_pushdown,
      type_coercion,
      simplify_expressions,
      slice_pushdown,
      streaming,
    );
  }

  late final _wire_lazy__method__take_self__DataFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_DataFrame,
                  ffi.Bool,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>,
                  ffi.Pointer<ffi.Bool>)>>(
      'wire_lazy__method__take_self__DataFrame');
  late final _wire_lazy__method__take_self__DataFrame =
      _wire_lazy__method__take_self__DataFramePtr.asFunction<
          WireSyncReturn Function(
              wire_DataFrame,
              bool,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>();

  WireSyncReturn wire_select__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> exprs,
  ) {
    return _wire_select__method__take_self__LazyFrame(
      that,
      exprs,
    );
  }

  late final _wire_select__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame, ffi.Pointer<wire_list_expr>)>>(
      'wire_select__method__take_self__LazyFrame');
  late final _wire_select__method__take_self__LazyFrame =
      _wire_select__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_filter__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_Expr pred,
  ) {
    return _wire_filter__method__take_self__LazyFrame(
      that,
      pred,
    );
  }

  late final _wire_filter__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              wire_Expr)>>('wire_filter__method__take_self__LazyFrame');
  late final _wire_filter__method__take_self__LazyFrame =
      _wire_filter__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, wire_Expr)>();

  WireSyncReturn wire_groupby__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> exprs,
    bool stable,
  ) {
    return _wire_groupby__method__take_self__LazyFrame(
      that,
      exprs,
      stable,
    );
  }

  late final _wire_groupby__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, ffi.Pointer<wire_list_expr>,
              ffi.Bool)>>('wire_groupby__method__take_self__LazyFrame');
  late final _wire_groupby__method__take_self__LazyFrame =
      _wire_groupby__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>, bool)>();

  WireSyncReturn wire_reverse__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_reverse__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_reverse__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_reverse__method__take_self__LazyFrame');
  late final _wire_reverse__method__take_self__LazyFrame =
      _wire_reverse__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_with_column__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_Expr expr,
  ) {
    return _wire_with_column__method__take_self__LazyFrame(
      that,
      expr,
    );
  }

  late final _wire_with_column__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              wire_Expr)>>('wire_with_column__method__take_self__LazyFrame');
  late final _wire_with_column__method__take_self__LazyFrame =
      _wire_with_column__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, wire_Expr)>();

  WireSyncReturn wire_with_columns__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> expr,
  ) {
    return _wire_with_columns__method__take_self__LazyFrame(
      that,
      expr,
    );
  }

  late final _wire_with_columns__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame, ffi.Pointer<wire_list_expr>)>>(
      'wire_with_columns__method__take_self__LazyFrame');
  late final _wire_with_columns__method__take_self__LazyFrame =
      _wire_with_columns__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_cache__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_cache__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_cache__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_cache__method__take_self__LazyFrame');
  late final _wire_cache__method__take_self__LazyFrame =
      _wire_cache__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  void wire_collect__method__take_self__LazyFrame(
    int port_,
    wire_LazyFrame that,
  ) {
    return _wire_collect__method__take_self__LazyFrame(
      port_,
      that,
    );
  }

  late final _wire_collect__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_LazyFrame)>>(
          'wire_collect__method__take_self__LazyFrame');
  late final _wire_collect__method__take_self__LazyFrame =
      _wire_collect__method__take_self__LazyFramePtr
          .asFunction<void Function(int, wire_LazyFrame)>();

  WireSyncReturn wire_cross_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
  ) {
    return _wire_cross_join__method__take_self__LazyFrame(
      that,
      other,
    );
  }

  late final _wire_cross_join__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame)>>(
      'wire_cross_join__method__take_self__LazyFrame');
  late final _wire_cross_join__method__take_self__LazyFrame =
      _wire_cross_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame)>();

  WireSyncReturn wire_left_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
    wire_Expr left_on,
    wire_Expr right_on,
  ) {
    return _wire_left_join__method__take_self__LazyFrame(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_left_join__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame, wire_Expr,
              wire_Expr)>>('wire_left_join__method__take_self__LazyFrame');
  late final _wire_left_join__method__take_self__LazyFrame =
      _wire_left_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, wire_LazyFrame, wire_Expr, wire_Expr)>();

  WireSyncReturn wire_outer_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
    wire_Expr left_on,
    wire_Expr right_on,
  ) {
    return _wire_outer_join__method__take_self__LazyFrame(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_outer_join__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame, wire_Expr,
              wire_Expr)>>('wire_outer_join__method__take_self__LazyFrame');
  late final _wire_outer_join__method__take_self__LazyFrame =
      _wire_outer_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, wire_LazyFrame, wire_Expr, wire_Expr)>();

  WireSyncReturn wire_inner_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
    wire_Expr left_on,
    wire_Expr right_on,
  ) {
    return _wire_inner_join__method__take_self__LazyFrame(
      that,
      other,
      left_on,
      right_on,
    );
  }

  late final _wire_inner_join__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_LazyFrame, wire_Expr,
              wire_Expr)>>('wire_inner_join__method__take_self__LazyFrame');
  late final _wire_inner_join__method__take_self__LazyFrame =
      _wire_inner_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, wire_LazyFrame, wire_Expr, wire_Expr)>();

  WireSyncReturn wire_join__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_LazyFrame other,
    ffi.Pointer<wire_list_expr> on1,
    ffi.Pointer<wire_list_expr> left_on,
    ffi.Pointer<wire_list_expr> right_on,
    ffi.Pointer<wire_uint_8_list> suffix,
    int how,
    bool allow_parallel,
    bool force_parallel,
  ) {
    return _wire_join__method__take_self__LazyFrame(
      that,
      other,
      on1,
      left_on,
      right_on,
      suffix,
      how,
      allow_parallel,
      force_parallel,
    );
  }

  late final _wire_join__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_LazyFrame,
              wire_LazyFrame,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool)>>('wire_join__method__take_self__LazyFrame');
  late final _wire_join__method__take_self__LazyFrame =
      _wire_join__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame,
              wire_LazyFrame,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_list_expr>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              bool,
              bool)>();

  WireSyncReturn wire_max__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_max__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_max__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_max__method__take_self__LazyFrame');
  late final _wire_max__method__take_self__LazyFrame =
      _wire_max__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_min__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_min__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_min__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_min__method__take_self__LazyFrame');
  late final _wire_min__method__take_self__LazyFrame =
      _wire_min__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_sum__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_sum__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_sum__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_sum__method__take_self__LazyFrame');
  late final _wire_sum__method__take_self__LazyFrame =
      _wire_sum__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_mean__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_mean__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_mean__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_mean__method__take_self__LazyFrame');
  late final _wire_mean__method__take_self__LazyFrame =
      _wire_mean__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_median__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_median__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_median__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_median__method__take_self__LazyFrame');
  late final _wire_median__method__take_self__LazyFrame =
      _wire_median__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_quantile__method__take_self__LazyFrame(
    wire_LazyFrame that,
    wire_Expr quantile,
    int interpol,
  ) {
    return _wire_quantile__method__take_self__LazyFrame(
      that,
      quantile,
      interpol,
    );
  }

  late final _wire_quantile__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_Expr,
              ffi.Int32)>>('wire_quantile__method__take_self__LazyFrame');
  late final _wire_quantile__method__take_self__LazyFrame =
      _wire_quantile__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(wire_LazyFrame, wire_Expr, int)>();

  WireSyncReturn wire_std__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int ddof,
  ) {
    return _wire_std__method__take_self__LazyFrame(
      that,
      ddof,
    );
  }

  late final _wire_std__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              ffi.Uint8)>>('wire_std__method__take_self__LazyFrame');
  late final _wire_std__method__take_self__LazyFrame =
      _wire_std__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int)>();

  WireSyncReturn wire_variance__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int ddof,
  ) {
    return _wire_variance__method__take_self__LazyFrame(
      that,
      ddof,
    );
  }

  late final _wire_variance__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              ffi.Uint8)>>('wire_variance__method__take_self__LazyFrame');
  late final _wire_variance__method__take_self__LazyFrame =
      _wire_variance__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int)>();

  WireSyncReturn wire_explode__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> columns,
  ) {
    return _wire_explode__method__take_self__LazyFrame(
      that,
      columns,
    );
  }

  late final _wire_explode__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame, ffi.Pointer<wire_list_expr>)>>(
      'wire_explode__method__take_self__LazyFrame');
  late final _wire_explode__method__take_self__LazyFrame =
      _wire_explode__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_unique__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_StringList> subset,
    int keep_strategy,
  ) {
    return _wire_unique__method__take_self__LazyFrame(
      that,
      subset,
      keep_strategy,
    );
  }

  late final _wire_unique__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, ffi.Pointer<wire_StringList>,
              ffi.Int32)>>('wire_unique__method__take_self__LazyFrame');
  late final _wire_unique__method__take_self__LazyFrame =
      _wire_unique__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_StringList>, int)>();

  WireSyncReturn wire_drop_nulls__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_list_expr> subset,
  ) {
    return _wire_drop_nulls__method__take_self__LazyFrame(
      that,
      subset,
    );
  }

  late final _wire_drop_nulls__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame, ffi.Pointer<wire_list_expr>)>>(
      'wire_drop_nulls__method__take_self__LazyFrame');
  late final _wire_drop_nulls__method__take_self__LazyFrame =
      _wire_drop_nulls__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_slice__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int offset,
    int len,
  ) {
    return _wire_slice__method__take_self__LazyFrame(
      that,
      offset,
      len,
    );
  }

  late final _wire_slice__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame, ffi.Int64,
              ffi.Uint32)>>('wire_slice__method__take_self__LazyFrame');
  late final _wire_slice__method__take_self__LazyFrame =
      _wire_slice__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int, int)>();

  WireSyncReturn wire_first__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_first__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_first__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_first__method__take_self__LazyFrame');
  late final _wire_first__method__take_self__LazyFrame =
      _wire_first__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_last__method__take_self__LazyFrame(
    wire_LazyFrame that,
  ) {
    return _wire_last__method__take_self__LazyFrame(
      that,
    );
  }

  late final _wire_last__method__take_self__LazyFramePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_LazyFrame)>>(
          'wire_last__method__take_self__LazyFrame');
  late final _wire_last__method__take_self__LazyFrame =
      _wire_last__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame)>();

  WireSyncReturn wire_tail__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int n,
  ) {
    return _wire_tail__method__take_self__LazyFrame(
      that,
      n,
    );
  }

  late final _wire_tail__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              ffi.Uint32)>>('wire_tail__method__take_self__LazyFrame');
  late final _wire_tail__method__take_self__LazyFrame =
      _wire_tail__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int)>();

  WireSyncReturn wire_melt__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_StringList> id_vars,
    ffi.Pointer<wire_StringList> value_vars,
    ffi.Pointer<wire_uint_8_list> variable_name,
    ffi.Pointer<wire_uint_8_list> value_name,
  ) {
    return _wire_melt__method__take_self__LazyFrame(
      that,
      id_vars,
      value_vars,
      variable_name,
      value_name,
    );
  }

  late final _wire_melt__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyFrame,
                  ffi.Pointer<wire_StringList>,
                  ffi.Pointer<wire_StringList>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_melt__method__take_self__LazyFrame');
  late final _wire_melt__method__take_self__LazyFrame =
      _wire_melt__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(
              wire_LazyFrame,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_StringList>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_limit__method__take_self__LazyFrame(
    wire_LazyFrame that,
    int n,
  ) {
    return _wire_limit__method__take_self__LazyFrame(
      that,
      n,
    );
  }

  late final _wire_limit__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_LazyFrame,
              ffi.Uint32)>>('wire_limit__method__take_self__LazyFrame');
  late final _wire_limit__method__take_self__LazyFrame =
      _wire_limit__method__take_self__LazyFramePtr
          .asFunction<WireSyncReturn Function(wire_LazyFrame, int)>();

  void wire_fetch__method__take_self__LazyFrame(
    int port_,
    wire_LazyFrame that,
    int n_rows,
  ) {
    return _wire_fetch__method__take_self__LazyFrame(
      port_,
      that,
      n_rows,
    );
  }

  late final _wire_fetch__method__take_self__LazyFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_LazyFrame,
              ffi.UintPtr)>>('wire_fetch__method__take_self__LazyFrame');
  late final _wire_fetch__method__take_self__LazyFrame =
      _wire_fetch__method__take_self__LazyFramePtr
          .asFunction<void Function(int, wire_LazyFrame, int)>();

  WireSyncReturn wire_with_row_count__method__take_self__LazyFrame(
    wire_LazyFrame that,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _wire_with_row_count__method__take_self__LazyFrame(
      that,
      name,
      offset,
    );
  }

  late final _wire_with_row_count__method__take_self__LazyFramePtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(wire_LazyFrame,
                  ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Uint32>)>>(
      'wire_with_row_count__method__take_self__LazyFrame');
  late final _wire_with_row_count__method__take_self__LazyFrame =
      _wire_with_row_count__method__take_self__LazyFramePtr.asFunction<
          WireSyncReturn Function(wire_LazyFrame, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<ffi.Uint32>)>();

  WireSyncReturn wire_of_strings__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_StringList> values,
  ) {
    return _wire_of_strings__static_method__Series(
      name,
      values,
    );
  }

  late final _wire_of_strings__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_StringList>)>>(
      'wire_of_strings__static_method__Series');
  late final _wire_of_strings__static_method__Series =
      _wire_of_strings__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_StringList>)>();

  WireSyncReturn wire_of_i32__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_int_32_list> values,
  ) {
    return _wire_of_i32__static_method__Series(
      name,
      values,
    );
  }

  late final _wire_of_i32__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_int_32_list>)>>(
      'wire_of_i32__static_method__Series');
  late final _wire_of_i32__static_method__Series =
      _wire_of_i32__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_int_32_list>)>();

  WireSyncReturn wire_of_i64__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_int_64_list> values,
  ) {
    return _wire_of_i64__static_method__Series(
      name,
      values,
    );
  }

  late final _wire_of_i64__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_int_64_list>)>>(
      'wire_of_i64__static_method__Series');
  late final _wire_of_i64__static_method__Series =
      _wire_of_i64__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_int_64_list>)>();

  WireSyncReturn wire_of_durations__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_int_64_list> values,
    int unit,
  ) {
    return _wire_of_durations__static_method__Series(
      name,
      values,
      unit,
    );
  }

  late final _wire_of_durations__static_method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_int_64_list>,
              ffi.Int32)>>('wire_of_durations__static_method__Series');
  late final _wire_of_durations__static_method__Series =
      _wire_of_durations__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_int_64_list>, int)>();

  WireSyncReturn wire_of_f64__static_method__Series(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_float_64_list> values,
  ) {
    return _wire_of_f64__static_method__Series(
      name,
      values,
    );
  }

  late final _wire_of_f64__static_method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_float_64_list>)>>(
      'wire_of_f64__static_method__Series');
  late final _wire_of_f64__static_method__Series =
      _wire_of_f64__static_method__SeriesPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_float_64_list>)>();

  void wire_append__method__Series(
    int port_,
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_append__method__Series(
      port_,
      that,
      other,
    );
  }

  late final _wire_append__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              wire_Series)>>('wire_append__method__Series');
  late final _wire_append__method__Series = _wire_append__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, wire_Series)>();

  void wire_as_strings__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_strings__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_strings__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_strings__method__Series');
  late final _wire_as_strings__method__Series =
      _wire_as_strings__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_as_i32__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_i32__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_i32__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_i32__method__Series');
  late final _wire_as_i32__method__Series = _wire_as_i32__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_as_f64__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_f64__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_f64__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_f64__method__Series');
  late final _wire_as_f64__method__Series = _wire_as_f64__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_as_durations__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_durations__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_durations__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_durations__method__Series');
  late final _wire_as_durations__method__Series =
      _wire_as_durations__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_as_naive_datetime__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_naive_datetime__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_naive_datetime__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_naive_datetime__method__Series');
  late final _wire_as_naive_datetime__method__Series =
      _wire_as_naive_datetime__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_as_utc_datetime__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_utc_datetime__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_utc_datetime__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_utc_datetime__method__Series');
  late final _wire_as_utc_datetime__method__Series =
      _wire_as_utc_datetime__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_as_local_datetime__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_as_local_datetime__method__Series(
      port_,
      that,
    );
  }

  late final _wire_as_local_datetime__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_as_local_datetime__method__Series');
  late final _wire_as_local_datetime__method__Series =
      _wire_as_local_datetime__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_abs__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_abs__method__Series(
      port_,
      that,
    );
  }

  late final _wire_abs__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_abs__method__Series');
  late final _wire_abs__method__Series = _wire_abs__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_sort__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_sort__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_sort__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, wire_Series, ffi.Bool)>>('wire_sort__method__Series');
  late final _wire_sort__method__Series = _wire_sort__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_shuffle__method__Series(
    int port_,
    wire_Series that,
    ffi.Pointer<ffi.Uint64> seed,
  ) {
    return _wire_shuffle__method__Series(
      port_,
      that,
      seed,
    );
  }

  late final _wire_shuffle__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Pointer<ffi.Uint64>)>>('wire_shuffle__method__Series');
  late final _wire_shuffle__method__Series = _wire_shuffle__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, ffi.Pointer<ffi.Uint64>)>();

  void wire_sum__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_sum__method__Series(
      port_,
      that,
    );
  }

  late final _wire_sum__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_sum__method__Series');
  late final _wire_sum__method__Series = _wire_sum__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_sum_as_series__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_sum_as_series__method__Series(
      port_,
      that,
    );
  }

  late final _wire_sum_as_series__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_sum_as_series__method__Series');
  late final _wire_sum_as_series__method__Series =
      _wire_sum_as_series__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_min__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_min__method__Series(
      port_,
      that,
    );
  }

  late final _wire_min__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_min__method__Series');
  late final _wire_min__method__Series = _wire_min__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_max__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_max__method__Series(
      port_,
      that,
    );
  }

  late final _wire_max__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_max__method__Series');
  late final _wire_max__method__Series = _wire_max__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_explode__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_explode__method__Series(
      port_,
      that,
    );
  }

  late final _wire_explode__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_explode__method__Series');
  late final _wire_explode__method__Series = _wire_explode__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_explode_by_offsets__method__Series(
    int port_,
    wire_Series that,
    ffi.Pointer<wire_int_64_list> offsets,
  ) {
    return _wire_explode_by_offsets__method__Series(
      port_,
      that,
      offsets,
    );
  }

  late final _wire_explode_by_offsets__method__SeriesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, wire_Series, ffi.Pointer<wire_int_64_list>)>>(
      'wire_explode_by_offsets__method__Series');
  late final _wire_explode_by_offsets__method__Series =
      _wire_explode_by_offsets__method__SeriesPtr.asFunction<
          void Function(int, wire_Series, ffi.Pointer<wire_int_64_list>)>();

  void wire_cummax__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_cummax__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_cummax__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_cummax__method__Series');
  late final _wire_cummax__method__Series = _wire_cummax__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_cummin__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_cummin__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_cummin__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_cummin__method__Series');
  late final _wire_cummin__method__Series = _wire_cummin__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_cumprod__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_cumprod__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_cumprod__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_cumprod__method__Series');
  late final _wire_cumprod__method__Series = _wire_cumprod__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_cumsum__method__Series(
    int port_,
    wire_Series that,
    bool reverse,
  ) {
    return _wire_cumsum__method__Series(
      port_,
      that,
      reverse,
    );
  }

  late final _wire_cumsum__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_cumsum__method__Series');
  late final _wire_cumsum__method__Series = _wire_cumsum__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_product__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_product__method__Series(
      port_,
      that,
    );
  }

  late final _wire_product__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_product__method__Series');
  late final _wire_product__method__Series = _wire_product__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  WireSyncReturn wire_get_string__method__Series(
    wire_Series that,
    int index,
  ) {
    return _wire_get_string__method__Series(
      that,
      index,
    );
  }

  late final _wire_get_string__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, ffi.UintPtr)>>('wire_get_string__method__Series');
  late final _wire_get_string__method__Series =
      _wire_get_string__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series, int)>();

  WireSyncReturn wire_get__method__Series(
    wire_Series that,
    int index,
  ) {
    return _wire_get__method__Series(
      that,
      index,
    );
  }

  late final _wire_get__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, ffi.UintPtr)>>('wire_get__method__Series');
  late final _wire_get__method__Series = _wire_get__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, int)>();

  WireSyncReturn wire_head__method__Series(
    wire_Series that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_head__method__Series(
      that,
      length,
    );
  }

  late final _wire_head__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_Series,
              ffi.Pointer<ffi.UintPtr>)>>('wire_head__method__Series');
  late final _wire_head__method__Series =
      _wire_head__method__SeriesPtr.asFunction<
          WireSyncReturn Function(wire_Series, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncReturn wire_tail__method__Series(
    wire_Series that,
    ffi.Pointer<ffi.UintPtr> length,
  ) {
    return _wire_tail__method__Series(
      that,
      length,
    );
  }

  late final _wire_tail__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_Series,
              ffi.Pointer<ffi.UintPtr>)>>('wire_tail__method__Series');
  late final _wire_tail__method__Series =
      _wire_tail__method__SeriesPtr.asFunction<
          WireSyncReturn Function(wire_Series, ffi.Pointer<ffi.UintPtr>)>();

  void wire_mean__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_mean__method__Series(
      port_,
      that,
    );
  }

  late final _wire_mean__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_mean__method__Series');
  late final _wire_mean__method__Series = _wire_mean__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_median__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_median__method__Series(
      port_,
      that,
    );
  }

  late final _wire_median__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_median__method__Series');
  late final _wire_median__method__Series = _wire_median__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  void wire_mean_as_series__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_mean_as_series__method__Series(
      port_,
      that,
    );
  }

  late final _wire_mean_as_series__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_mean_as_series__method__Series');
  late final _wire_mean_as_series__method__Series =
      _wire_mean_as_series__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  void wire_median_as_series__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_median_as_series__method__Series(
      port_,
      that,
    );
  }

  late final _wire_median_as_series__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_median_as_series__method__Series');
  late final _wire_median_as_series__method__Series =
      _wire_median_as_series__method__SeriesPtr
          .asFunction<void Function(int, wire_Series)>();

  WireSyncReturn wire_estimated_size__method__Series(
    wire_Series that,
  ) {
    return _wire_estimated_size__method__Series(
      that,
    );
  }

  late final _wire_estimated_size__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_estimated_size__method__Series');
  late final _wire_estimated_size__method__Series =
      _wire_estimated_size__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series)>();

  WireSyncReturn wire_add_to__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_add_to__method__Series(
      that,
      other,
    );
  }

  late final _wire_add_to__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_add_to__method__Series');
  late final _wire_add_to__method__Series = _wire_add_to__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_subtract__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_subtract__method__Series(
      that,
      other,
    );
  }

  late final _wire_subtract__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_subtract__method__Series');
  late final _wire_subtract__method__Series = _wire_subtract__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_multiply__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_multiply__method__Series(
      that,
      other,
    );
  }

  late final _wire_multiply__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_multiply__method__Series');
  late final _wire_multiply__method__Series = _wire_multiply__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_divide__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_divide__method__Series(
      that,
      other,
    );
  }

  late final _wire_divide__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_divide__method__Series');
  late final _wire_divide__method__Series = _wire_divide__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_remainder__method__Series(
    wire_Series that,
    wire_Series other,
  ) {
    return _wire_remainder__method__Series(
      that,
      other,
    );
  }

  late final _wire_remainder__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              wire_Series, wire_Series)>>('wire_remainder__method__Series');
  late final _wire_remainder__method__Series =
      _wire_remainder__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series, wire_Series)>();

  WireSyncReturn wire_is_bool__method__Series(
    wire_Series that,
  ) {
    return _wire_is_bool__method__Series(
      that,
    );
  }

  late final _wire_is_bool__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_is_bool__method__Series');
  late final _wire_is_bool__method__Series = _wire_is_bool__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series)>();

  WireSyncReturn wire_is_utf8__method__Series(
    wire_Series that,
  ) {
    return _wire_is_utf8__method__Series(
      that,
    );
  }

  late final _wire_is_utf8__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_is_utf8__method__Series');
  late final _wire_is_utf8__method__Series = _wire_is_utf8__method__SeriesPtr
      .asFunction<WireSyncReturn Function(wire_Series)>();

  WireSyncReturn wire_is_numeric__method__Series(
    wire_Series that,
  ) {
    return _wire_is_numeric__method__Series(
      that,
    );
  }

  late final _wire_is_numeric__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_is_numeric__method__Series');
  late final _wire_is_numeric__method__Series =
      _wire_is_numeric__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series)>();

  WireSyncReturn wire_is_temporal__method__Series(
    wire_Series that,
  ) {
    return _wire_is_temporal__method__Series(
      that,
    );
  }

  late final _wire_is_temporal__method__SeriesPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(wire_Series)>>(
          'wire_is_temporal__method__Series');
  late final _wire_is_temporal__method__Series =
      _wire_is_temporal__method__SeriesPtr
          .asFunction<WireSyncReturn Function(wire_Series)>();

  void wire_dump__method__Series(
    int port_,
    wire_Series that,
  ) {
    return _wire_dump__method__Series(
      port_,
      that,
    );
  }

  late final _wire_dump__method__SeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, wire_Series)>>(
          'wire_dump__method__Series');
  late final _wire_dump__method__Series = _wire_dump__method__SeriesPtr
      .asFunction<void Function(int, wire_Series)>();

  WireSyncReturn wire_rename__method__Series(
    wire_Series that,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_rename__method__Series(
      that,
      name,
    );
  }

  late final _wire_rename__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(wire_Series,
              ffi.Pointer<wire_uint_8_list>)>>('wire_rename__method__Series');
  late final _wire_rename__method__Series =
      _wire_rename__method__SeriesPtr.asFunction<
          WireSyncReturn Function(
              wire_Series, ffi.Pointer<wire_uint_8_list>)>();

  void wire_unique__method__Series(
    int port_,
    wire_Series that,
    bool stable,
  ) {
    return _wire_unique__method__Series(
      port_,
      that,
      stable,
    );
  }

  late final _wire_unique__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Bool)>>('wire_unique__method__Series');
  late final _wire_unique__method__Series = _wire_unique__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, bool)>();

  void wire_equal__method__Series(
    int port_,
    wire_Series that,
    wire_Series other,
    bool ignore_null,
  ) {
    return _wire_equal__method__Series(
      port_,
      that,
      other,
      ignore_null,
    );
  }

  late final _wire_equal__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series, wire_Series,
              ffi.Bool)>>('wire_equal__method__Series');
  late final _wire_equal__method__Series = _wire_equal__method__SeriesPtr
      .asFunction<void Function(int, wire_Series, wire_Series, bool)>();

  void wire_reshape__method__Series(
    int port_,
    wire_Series that,
    ffi.Pointer<wire_int_64_list> dims,
  ) {
    return _wire_reshape__method__Series(
      port_,
      that,
      dims,
    );
  }

  late final _wire_reshape__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Pointer<wire_int_64_list>)>>('wire_reshape__method__Series');
  late final _wire_reshape__method__Series =
      _wire_reshape__method__SeriesPtr.asFunction<
          void Function(int, wire_Series, ffi.Pointer<wire_int_64_list>)>();

  void wire_std_as_series__method__Series(
    int port_,
    wire_Series that,
    int ddof,
  ) {
    return _wire_std_as_series__method__Series(
      port_,
      that,
      ddof,
    );
  }

  late final _wire_std_as_series__method__SeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, wire_Series,
              ffi.Uint8)>>('wire_std_as_series__method__Series');
  late final _wire_std_as_series__method__Series =
      _wire_std_as_series__method__SeriesPtr
          .asFunction<void Function(int, wire_Series, int)>();

  WireSyncReturn wire_agg__method__take_self__LazyGroupBy(
    wire_LazyGroupBy that,
    ffi.Pointer<wire_list_expr> exprs,
  ) {
    return _wire_agg__method__take_self__LazyGroupBy(
      that,
      exprs,
    );
  }

  late final _wire_agg__method__take_self__LazyGroupByPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyGroupBy, ffi.Pointer<wire_list_expr>)>>(
      'wire_agg__method__take_self__LazyGroupBy');
  late final _wire_agg__method__take_self__LazyGroupBy =
      _wire_agg__method__take_self__LazyGroupByPtr.asFunction<
          WireSyncReturn Function(
              wire_LazyGroupBy, ffi.Pointer<wire_list_expr>)>();

  WireSyncReturn wire_head__method__take_self__LazyGroupBy(
    wire_LazyGroupBy that,
    ffi.Pointer<ffi.UintPtr> n,
  ) {
    return _wire_head__method__take_self__LazyGroupBy(
      that,
      n,
    );
  }

  late final _wire_head__method__take_self__LazyGroupByPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyGroupBy, ffi.Pointer<ffi.UintPtr>)>>(
      'wire_head__method__take_self__LazyGroupBy');
  late final _wire_head__method__take_self__LazyGroupBy =
      _wire_head__method__take_self__LazyGroupByPtr.asFunction<
          WireSyncReturn Function(
              wire_LazyGroupBy, ffi.Pointer<ffi.UintPtr>)>();

  WireSyncReturn wire_tail__method__take_self__LazyGroupBy(
    wire_LazyGroupBy that,
    ffi.Pointer<ffi.UintPtr> n,
  ) {
    return _wire_tail__method__take_self__LazyGroupBy(
      that,
      n,
    );
  }

  late final _wire_tail__method__take_self__LazyGroupByPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  wire_LazyGroupBy, ffi.Pointer<ffi.UintPtr>)>>(
      'wire_tail__method__take_self__LazyGroupBy');
  late final _wire_tail__method__take_self__LazyGroupBy =
      _wire_tail__method__take_self__LazyGroupByPtr.asFunction<
          WireSyncReturn Function(
              wire_LazyGroupBy, ffi.Pointer<ffi.UintPtr>)>();

  wire_RwLockPDataFrame new_RwLockPDataFrame() {
    return _new_RwLockPDataFrame();
  }

  late final _new_RwLockPDataFramePtr =
      _lookup<ffi.NativeFunction<wire_RwLockPDataFrame Function()>>(
          'new_RwLockPDataFrame');
  late final _new_RwLockPDataFrame =
      _new_RwLockPDataFramePtr.asFunction<wire_RwLockPDataFrame Function()>();

  wire_RwLockPLazyFrame new_RwLockPLazyFrame() {
    return _new_RwLockPLazyFrame();
  }

  late final _new_RwLockPLazyFramePtr =
      _lookup<ffi.NativeFunction<wire_RwLockPLazyFrame Function()>>(
          'new_RwLockPLazyFrame');
  late final _new_RwLockPLazyFrame =
      _new_RwLockPLazyFramePtr.asFunction<wire_RwLockPLazyFrame Function()>();

  wire_RwLockPLazyGroupBy new_RwLockPLazyGroupBy() {
    return _new_RwLockPLazyGroupBy();
  }

  late final _new_RwLockPLazyGroupByPtr =
      _lookup<ffi.NativeFunction<wire_RwLockPLazyGroupBy Function()>>(
          'new_RwLockPLazyGroupBy');
  late final _new_RwLockPLazyGroupBy = _new_RwLockPLazyGroupByPtr
      .asFunction<wire_RwLockPLazyGroupBy Function()>();

  wire_RwLockPSeries new_RwLockPSeries() {
    return _new_RwLockPSeries();
  }

  late final _new_RwLockPSeriesPtr =
      _lookup<ffi.NativeFunction<wire_RwLockPSeries Function()>>(
          'new_RwLockPSeries');
  late final _new_RwLockPSeries =
      _new_RwLockPSeriesPtr.asFunction<wire_RwLockPSeries Function()>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  wire_AggExpr new_agg_expr_0() {
    return _new_agg_expr_0();
  }

  late final _new_agg_expr_0Ptr =
      _lookup<ffi.NativeFunction<wire_AggExpr Function()>>('new_agg_expr_0');
  late final _new_agg_expr_0 =
      _new_agg_expr_0Ptr.asFunction<wire_AggExpr Function()>();

  ffi.Pointer<wire_AggExpr> new_box_autoadd_agg_expr_0() {
    return _new_box_autoadd_agg_expr_0();
  }

  late final _new_box_autoadd_agg_expr_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_AggExpr> Function()>>(
          'new_box_autoadd_agg_expr_0');
  late final _new_box_autoadd_agg_expr_0 = _new_box_autoadd_agg_expr_0Ptr
      .asFunction<ffi.Pointer<wire_AggExpr> Function()>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
          'new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 = _new_box_autoadd_bool_0Ptr
      .asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_char_0(
    int value,
  ) {
    return _new_box_autoadd_char_0(
      value,
    );
  }

  late final _new_box_autoadd_char_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_char_0');
  late final _new_box_autoadd_char_0 = _new_box_autoadd_char_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Int32> new_box_autoadd_csv_encoding_0(
    int value,
  ) {
    return _new_box_autoadd_csv_encoding_0(
      value,
    );
  }

  late final _new_box_autoadd_csv_encoding_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function(ffi.Int32)>>(
          'new_box_autoadd_csv_encoding_0');
  late final _new_box_autoadd_csv_encoding_0 =
      _new_box_autoadd_csv_encoding_0Ptr
          .asFunction<ffi.Pointer<ffi.Int32> Function(int)>();

  ffi.Pointer<wire_DataType> new_box_autoadd_data_type_0() {
    return _new_box_autoadd_data_type_0();
  }

  late final _new_box_autoadd_data_type_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DataType> Function()>>(
          'new_box_autoadd_data_type_0');
  late final _new_box_autoadd_data_type_0 = _new_box_autoadd_data_type_0Ptr
      .asFunction<ffi.Pointer<wire_DataType> Function()>();

  ffi.Pointer<wire_LiteralValue> new_box_autoadd_literal_value_0() {
    return _new_box_autoadd_literal_value_0();
  }

  late final _new_box_autoadd_literal_value_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LiteralValue> Function()>>(
          'new_box_autoadd_literal_value_0');
  late final _new_box_autoadd_literal_value_0 =
      _new_box_autoadd_literal_value_0Ptr
          .asFunction<ffi.Pointer<wire_LiteralValue> Function()>();

  ffi.Pointer<wire_NullValues> new_box_autoadd_null_values_0() {
    return _new_box_autoadd_null_values_0();
  }

  late final _new_box_autoadd_null_values_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NullValues> Function()>>(
          'new_box_autoadd_null_values_0');
  late final _new_box_autoadd_null_values_0 = _new_box_autoadd_null_values_0Ptr
      .asFunction<ffi.Pointer<wire_NullValues> Function()>();

  ffi.Pointer<wire_RowCount> new_box_autoadd_row_count_0() {
    return _new_box_autoadd_row_count_0();
  }

  late final _new_box_autoadd_row_count_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RowCount> Function()>>(
          'new_box_autoadd_row_count_0');
  late final _new_box_autoadd_row_count_0 = _new_box_autoadd_row_count_0Ptr
      .asFunction<ffi.Pointer<wire_RowCount> Function()>();

  ffi.Pointer<wire_SortOptions> new_box_autoadd_sort_options_0() {
    return _new_box_autoadd_sort_options_0();
  }

  late final _new_box_autoadd_sort_options_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SortOptions> Function()>>(
          'new_box_autoadd_sort_options_0');
  late final _new_box_autoadd_sort_options_0 =
      _new_box_autoadd_sort_options_0Ptr
          .asFunction<ffi.Pointer<wire_SortOptions> Function()>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.UintPtr> new_box_autoadd_usize_0(
    int value,
  ) {
    return _new_box_autoadd_usize_0(
      value,
    );
  }

  late final _new_box_autoadd_usize_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.UintPtr> Function(ffi.UintPtr)>>(
      'new_box_autoadd_usize_0');
  late final _new_box_autoadd_usize_0 = _new_box_autoadd_usize_0Ptr
      .asFunction<ffi.Pointer<ffi.UintPtr> Function(int)>();

  ffi.Pointer<wire_DataType> new_box_data_type_0() {
    return _new_box_data_type_0();
  }

  late final _new_box_data_type_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DataType> Function()>>(
          'new_box_data_type_0');
  late final _new_box_data_type_0 = _new_box_data_type_0Ptr
      .asFunction<ffi.Pointer<wire_DataType> Function()>();

  ffi.Pointer<wire_Expr> new_box_expr_0() {
    return _new_box_expr_0();
  }

  late final _new_box_expr_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Expr> Function()>>(
          'new_box_expr_0');
  late final _new_box_expr_0 =
      _new_box_expr_0Ptr.asFunction<ffi.Pointer<wire_Expr> Function()>();

  wire_DataFrame new_data_frame_0() {
    return _new_data_frame_0();
  }

  late final _new_data_frame_0Ptr =
      _lookup<ffi.NativeFunction<wire_DataFrame Function()>>(
          'new_data_frame_0');
  late final _new_data_frame_0 =
      _new_data_frame_0Ptr.asFunction<wire_DataFrame Function()>();

  wire_DataType new_data_type_0() {
    return _new_data_type_0();
  }

  late final _new_data_type_0Ptr =
      _lookup<ffi.NativeFunction<wire_DataType Function()>>('new_data_type_0');
  late final _new_data_type_0 =
      _new_data_type_0Ptr.asFunction<wire_DataType Function()>();

  wire_Excluded new_excluded_0() {
    return _new_excluded_0();
  }

  late final _new_excluded_0Ptr =
      _lookup<ffi.NativeFunction<wire_Excluded Function()>>('new_excluded_0');
  late final _new_excluded_0 =
      _new_excluded_0Ptr.asFunction<wire_Excluded Function()>();

  wire_Expr new_expr_0() {
    return _new_expr_0();
  }

  late final _new_expr_0Ptr =
      _lookup<ffi.NativeFunction<wire_Expr Function()>>('new_expr_0');
  late final _new_expr_0 = _new_expr_0Ptr.asFunction<wire_Expr Function()>();

  wire_Field new_field_0() {
    return _new_field_0();
  }

  late final _new_field_0Ptr =
      _lookup<ffi.NativeFunction<wire_Field Function()>>('new_field_0');
  late final _new_field_0 = _new_field_0Ptr.asFunction<wire_Field Function()>();

  ffi.Pointer<wire_float_64_list> new_float_64_list_0(
    int len,
  ) {
    return _new_float_64_list_0(
      len,
    );
  }

  late final _new_float_64_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_float_64_list> Function(
              ffi.Int32)>>('new_float_64_list_0');
  late final _new_float_64_list_0 = _new_float_64_list_0Ptr
      .asFunction<ffi.Pointer<wire_float_64_list> Function(int)>();

  ffi.Pointer<wire_int_32_list> new_int_32_list_0(
    int len,
  ) {
    return _new_int_32_list_0(
      len,
    );
  }

  late final _new_int_32_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_int_32_list> Function(
              ffi.Int32)>>('new_int_32_list_0');
  late final _new_int_32_list_0 = _new_int_32_list_0Ptr
      .asFunction<ffi.Pointer<wire_int_32_list> Function(int)>();

  ffi.Pointer<wire_int_64_list> new_int_64_list_0(
    int len,
  ) {
    return _new_int_64_list_0(
      len,
    );
  }

  late final _new_int_64_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_int_64_list> Function(
              ffi.Int32)>>('new_int_64_list_0');
  late final _new_int_64_list_0 = _new_int_64_list_0Ptr
      .asFunction<ffi.Pointer<wire_int_64_list> Function(int)>();

  wire_LazyFrame new_lazy_frame_0() {
    return _new_lazy_frame_0();
  }

  late final _new_lazy_frame_0Ptr =
      _lookup<ffi.NativeFunction<wire_LazyFrame Function()>>(
          'new_lazy_frame_0');
  late final _new_lazy_frame_0 =
      _new_lazy_frame_0Ptr.asFunction<wire_LazyFrame Function()>();

  wire_LazyGroupBy new_lazy_group_by_0() {
    return _new_lazy_group_by_0();
  }

  late final _new_lazy_group_by_0Ptr =
      _lookup<ffi.NativeFunction<wire_LazyGroupBy Function()>>(
          'new_lazy_group_by_0');
  late final _new_lazy_group_by_0 =
      _new_lazy_group_by_0Ptr.asFunction<wire_LazyGroupBy Function()>();

  ffi.Pointer<wire_list_data_type> new_list_data_type_0(
    int len,
  ) {
    return _new_list_data_type_0(
      len,
    );
  }

  late final _new_list_data_type_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_data_type> Function(
              ffi.Int32)>>('new_list_data_type_0');
  late final _new_list_data_type_0 = _new_list_data_type_0Ptr
      .asFunction<ffi.Pointer<wire_list_data_type> Function(int)>();

  ffi.Pointer<wire_list_excluded> new_list_excluded_0(
    int len,
  ) {
    return _new_list_excluded_0(
      len,
    );
  }

  late final _new_list_excluded_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_excluded> Function(
              ffi.Int32)>>('new_list_excluded_0');
  late final _new_list_excluded_0 = _new_list_excluded_0Ptr
      .asFunction<ffi.Pointer<wire_list_excluded> Function(int)>();

  ffi.Pointer<wire_list_expr> new_list_expr_0(
    int len,
  ) {
    return _new_list_expr_0(
      len,
    );
  }

  late final _new_list_expr_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_list_expr> Function(ffi.Int32)>>(
      'new_list_expr_0');
  late final _new_list_expr_0 = _new_list_expr_0Ptr
      .asFunction<ffi.Pointer<wire_list_expr> Function(int)>();

  ffi.Pointer<wire_list_field> new_list_field_0(
    int len,
  ) {
    return _new_list_field_0(
      len,
    );
  }

  late final _new_list_field_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_list_field> Function(ffi.Int32)>>(
      'new_list_field_0');
  late final _new_list_field_0 = _new_list_field_0Ptr
      .asFunction<ffi.Pointer<wire_list_field> Function(int)>();

  wire_LiteralValue new_literal_value_0() {
    return _new_literal_value_0();
  }

  late final _new_literal_value_0Ptr =
      _lookup<ffi.NativeFunction<wire_LiteralValue Function()>>(
          'new_literal_value_0');
  late final _new_literal_value_0 =
      _new_literal_value_0Ptr.asFunction<wire_LiteralValue Function()>();

  wire_NullValues new_null_values_0() {
    return _new_null_values_0();
  }

  late final _new_null_values_0Ptr =
      _lookup<ffi.NativeFunction<wire_NullValues Function()>>(
          'new_null_values_0');
  late final _new_null_values_0 =
      _new_null_values_0Ptr.asFunction<wire_NullValues Function()>();

  wire_RowCount new_row_count_0() {
    return _new_row_count_0();
  }

  late final _new_row_count_0Ptr =
      _lookup<ffi.NativeFunction<wire_RowCount Function()>>('new_row_count_0');
  late final _new_row_count_0 =
      _new_row_count_0Ptr.asFunction<wire_RowCount Function()>();

  wire_Series new_series_0() {
    return _new_series_0();
  }

  late final _new_series_0Ptr =
      _lookup<ffi.NativeFunction<wire_Series Function()>>('new_series_0');
  late final _new_series_0 =
      _new_series_0Ptr.asFunction<wire_Series Function()>();

  wire_SortOptions new_sort_options_0() {
    return _new_sort_options_0();
  }

  late final _new_sort_options_0Ptr =
      _lookup<ffi.NativeFunction<wire_SortOptions Function()>>(
          'new_sort_options_0');
  late final _new_sort_options_0 =
      _new_sort_options_0Ptr.asFunction<wire_SortOptions Function()>();

  ffi.Pointer<wire_uint_32_list> new_uint_32_list_0(
    int len,
  ) {
    return _new_uint_32_list_0(
      len,
    );
  }

  late final _new_uint_32_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_32_list> Function(
              ffi.Int32)>>('new_uint_32_list_0');
  late final _new_uint_32_list_0 = _new_uint_32_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_32_list> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_RwLockPDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPDataFrame(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPDataFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPDataFrame');
  late final _drop_opaque_RwLockPDataFrame = _drop_opaque_RwLockPDataFramePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPDataFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPDataFrame(
      ptr,
    );
  }

  late final _share_opaque_RwLockPDataFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPDataFrame');
  late final _share_opaque_RwLockPDataFrame = _share_opaque_RwLockPDataFramePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockPLazyFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPLazyFrame(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPLazyFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPLazyFrame');
  late final _drop_opaque_RwLockPLazyFrame = _drop_opaque_RwLockPLazyFramePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPLazyFrame(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPLazyFrame(
      ptr,
    );
  }

  late final _share_opaque_RwLockPLazyFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPLazyFrame');
  late final _share_opaque_RwLockPLazyFrame = _share_opaque_RwLockPLazyFramePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockPLazyGroupBy(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPLazyGroupBy(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPLazyGroupByPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPLazyGroupBy');
  late final _drop_opaque_RwLockPLazyGroupBy =
      _drop_opaque_RwLockPLazyGroupByPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPLazyGroupBy(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPLazyGroupBy(
      ptr,
    );
  }

  late final _share_opaque_RwLockPLazyGroupByPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPLazyGroupBy');
  late final _share_opaque_RwLockPLazyGroupBy =
      _share_opaque_RwLockPLazyGroupByPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_RwLockPSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_RwLockPSeries(
      ptr,
    );
  }

  late final _drop_opaque_RwLockPSeriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_RwLockPSeries');
  late final _drop_opaque_RwLockPSeries = _drop_opaque_RwLockPSeriesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_RwLockPSeries(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_RwLockPSeries(
      ptr,
    );
  }

  late final _share_opaque_RwLockPSeriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_RwLockPSeries');
  late final _share_opaque_RwLockPSeries = _share_opaque_RwLockPSeriesPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Min() {
    return _inflate_AggExpr_Min();
  }

  late final _inflate_AggExpr_MinPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Min');
  late final _inflate_AggExpr_Min =
      _inflate_AggExpr_MinPtr.asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Max() {
    return _inflate_AggExpr_Max();
  }

  late final _inflate_AggExpr_MaxPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Max');
  late final _inflate_AggExpr_Max =
      _inflate_AggExpr_MaxPtr.asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Median() {
    return _inflate_AggExpr_Median();
  }

  late final _inflate_AggExpr_MedianPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Median');
  late final _inflate_AggExpr_Median = _inflate_AggExpr_MedianPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_NUnique() {
    return _inflate_AggExpr_NUnique();
  }

  late final _inflate_AggExpr_NUniquePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_NUnique');
  late final _inflate_AggExpr_NUnique = _inflate_AggExpr_NUniquePtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_First() {
    return _inflate_AggExpr_First();
  }

  late final _inflate_AggExpr_FirstPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_First');
  late final _inflate_AggExpr_First = _inflate_AggExpr_FirstPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Last() {
    return _inflate_AggExpr_Last();
  }

  late final _inflate_AggExpr_LastPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Last');
  late final _inflate_AggExpr_Last = _inflate_AggExpr_LastPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Mean() {
    return _inflate_AggExpr_Mean();
  }

  late final _inflate_AggExpr_MeanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Mean');
  late final _inflate_AggExpr_Mean = _inflate_AggExpr_MeanPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_List() {
    return _inflate_AggExpr_List();
  }

  late final _inflate_AggExpr_ListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_List');
  late final _inflate_AggExpr_List = _inflate_AggExpr_ListPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Count() {
    return _inflate_AggExpr_Count();
  }

  late final _inflate_AggExpr_CountPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Count');
  late final _inflate_AggExpr_Count = _inflate_AggExpr_CountPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Quantile() {
    return _inflate_AggExpr_Quantile();
  }

  late final _inflate_AggExpr_QuantilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Quantile');
  late final _inflate_AggExpr_Quantile = _inflate_AggExpr_QuantilePtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Sum() {
    return _inflate_AggExpr_Sum();
  }

  late final _inflate_AggExpr_SumPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Sum');
  late final _inflate_AggExpr_Sum =
      _inflate_AggExpr_SumPtr.asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_AggGroups() {
    return _inflate_AggExpr_AggGroups();
  }

  late final _inflate_AggExpr_AggGroupsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_AggGroups');
  late final _inflate_AggExpr_AggGroups = _inflate_AggExpr_AggGroupsPtr
      .asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<AggExprKind> inflate_AggExpr_Std() {
    return _inflate_AggExpr_Std();
  }

  late final _inflate_AggExpr_StdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AggExprKind> Function()>>(
          'inflate_AggExpr_Std');
  late final _inflate_AggExpr_Std =
      _inflate_AggExpr_StdPtr.asFunction<ffi.Pointer<AggExprKind> Function()>();

  ffi.Pointer<DataTypeKind> inflate_DataType_Datetime() {
    return _inflate_DataType_Datetime();
  }

  late final _inflate_DataType_DatetimePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'inflate_DataType_Datetime');
  late final _inflate_DataType_Datetime = _inflate_DataType_DatetimePtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<DataTypeKind> inflate_DataType_Duration() {
    return _inflate_DataType_Duration();
  }

  late final _inflate_DataType_DurationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'inflate_DataType_Duration');
  late final _inflate_DataType_Duration = _inflate_DataType_DurationPtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<DataTypeKind> inflate_DataType_List() {
    return _inflate_DataType_List();
  }

  late final _inflate_DataType_ListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'inflate_DataType_List');
  late final _inflate_DataType_List = _inflate_DataType_ListPtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<DataTypeKind> inflate_DataType_Struct() {
    return _inflate_DataType_Struct();
  }

  late final _inflate_DataType_StructPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DataTypeKind> Function()>>(
          'inflate_DataType_Struct');
  late final _inflate_DataType_Struct = _inflate_DataType_StructPtr
      .asFunction<ffi.Pointer<DataTypeKind> Function()>();

  ffi.Pointer<ExcludedKind> inflate_Excluded_Name() {
    return _inflate_Excluded_Name();
  }

  late final _inflate_Excluded_NamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExcludedKind> Function()>>(
          'inflate_Excluded_Name');
  late final _inflate_Excluded_Name = _inflate_Excluded_NamePtr
      .asFunction<ffi.Pointer<ExcludedKind> Function()>();

  ffi.Pointer<ExcludedKind> inflate_Excluded_Dtype() {
    return _inflate_Excluded_Dtype();
  }

  late final _inflate_Excluded_DtypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExcludedKind> Function()>>(
          'inflate_Excluded_Dtype');
  late final _inflate_Excluded_Dtype = _inflate_Excluded_DtypePtr
      .asFunction<ffi.Pointer<ExcludedKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Alias() {
    return _inflate_Expr_Alias();
  }

  late final _inflate_Expr_AliasPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Alias');
  late final _inflate_Expr_Alias =
      _inflate_Expr_AliasPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Column() {
    return _inflate_Expr_Column();
  }

  late final _inflate_Expr_ColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Column');
  late final _inflate_Expr_Column =
      _inflate_Expr_ColumnPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Columns() {
    return _inflate_Expr_Columns();
  }

  late final _inflate_Expr_ColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Columns');
  late final _inflate_Expr_Columns =
      _inflate_Expr_ColumnsPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_DtypeColumn() {
    return _inflate_Expr_DtypeColumn();
  }

  late final _inflate_Expr_DtypeColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_DtypeColumn');
  late final _inflate_Expr_DtypeColumn = _inflate_Expr_DtypeColumnPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Literal() {
    return _inflate_Expr_Literal();
  }

  late final _inflate_Expr_LiteralPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Literal');
  late final _inflate_Expr_Literal =
      _inflate_Expr_LiteralPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_BinaryExpr() {
    return _inflate_Expr_BinaryExpr();
  }

  late final _inflate_Expr_BinaryExprPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_BinaryExpr');
  late final _inflate_Expr_BinaryExpr = _inflate_Expr_BinaryExprPtr
      .asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Cast() {
    return _inflate_Expr_Cast();
  }

  late final _inflate_Expr_CastPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Cast');
  late final _inflate_Expr_Cast =
      _inflate_Expr_CastPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Sort() {
    return _inflate_Expr_Sort();
  }

  late final _inflate_Expr_SortPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Sort');
  late final _inflate_Expr_Sort =
      _inflate_Expr_SortPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Take() {
    return _inflate_Expr_Take();
  }

  late final _inflate_Expr_TakePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Take');
  late final _inflate_Expr_Take =
      _inflate_Expr_TakePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Agg() {
    return _inflate_Expr_Agg();
  }

  late final _inflate_Expr_AggPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Agg');
  late final _inflate_Expr_Agg =
      _inflate_Expr_AggPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Ternary() {
    return _inflate_Expr_Ternary();
  }

  late final _inflate_Expr_TernaryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Ternary');
  late final _inflate_Expr_Ternary =
      _inflate_Expr_TernaryPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Explode() {
    return _inflate_Expr_Explode();
  }

  late final _inflate_Expr_ExplodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Explode');
  late final _inflate_Expr_Explode =
      _inflate_Expr_ExplodePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Filter() {
    return _inflate_Expr_Filter();
  }

  late final _inflate_Expr_FilterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Filter');
  late final _inflate_Expr_Filter =
      _inflate_Expr_FilterPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Slice() {
    return _inflate_Expr_Slice();
  }

  late final _inflate_Expr_SlicePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Slice');
  late final _inflate_Expr_Slice =
      _inflate_Expr_SlicePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Exclude() {
    return _inflate_Expr_Exclude();
  }

  late final _inflate_Expr_ExcludePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Exclude');
  late final _inflate_Expr_Exclude =
      _inflate_Expr_ExcludePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_KeepName() {
    return _inflate_Expr_KeepName();
  }

  late final _inflate_Expr_KeepNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_KeepName');
  late final _inflate_Expr_KeepName =
      _inflate_Expr_KeepNamePtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<ExprKind> inflate_Expr_Nth() {
    return _inflate_Expr_Nth();
  }

  late final _inflate_Expr_NthPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExprKind> Function()>>(
          'inflate_Expr_Nth');
  late final _inflate_Expr_Nth =
      _inflate_Expr_NthPtr.asFunction<ffi.Pointer<ExprKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Boolean() {
    return _inflate_LiteralValue_Boolean();
  }

  late final _inflate_LiteralValue_BooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Boolean');
  late final _inflate_LiteralValue_Boolean = _inflate_LiteralValue_BooleanPtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Utf8() {
    return _inflate_LiteralValue_Utf8();
  }

  late final _inflate_LiteralValue_Utf8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Utf8');
  late final _inflate_LiteralValue_Utf8 = _inflate_LiteralValue_Utf8Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Binary() {
    return _inflate_LiteralValue_Binary();
  }

  late final _inflate_LiteralValue_BinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Binary');
  late final _inflate_LiteralValue_Binary = _inflate_LiteralValue_BinaryPtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_UInt8() {
    return _inflate_LiteralValue_UInt8();
  }

  late final _inflate_LiteralValue_UInt8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_UInt8');
  late final _inflate_LiteralValue_UInt8 = _inflate_LiteralValue_UInt8Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_UInt16() {
    return _inflate_LiteralValue_UInt16();
  }

  late final _inflate_LiteralValue_UInt16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_UInt16');
  late final _inflate_LiteralValue_UInt16 = _inflate_LiteralValue_UInt16Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_UInt32() {
    return _inflate_LiteralValue_UInt32();
  }

  late final _inflate_LiteralValue_UInt32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_UInt32');
  late final _inflate_LiteralValue_UInt32 = _inflate_LiteralValue_UInt32Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_UInt64() {
    return _inflate_LiteralValue_UInt64();
  }

  late final _inflate_LiteralValue_UInt64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_UInt64');
  late final _inflate_LiteralValue_UInt64 = _inflate_LiteralValue_UInt64Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Int8() {
    return _inflate_LiteralValue_Int8();
  }

  late final _inflate_LiteralValue_Int8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Int8');
  late final _inflate_LiteralValue_Int8 = _inflate_LiteralValue_Int8Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Int16() {
    return _inflate_LiteralValue_Int16();
  }

  late final _inflate_LiteralValue_Int16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Int16');
  late final _inflate_LiteralValue_Int16 = _inflate_LiteralValue_Int16Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Int32() {
    return _inflate_LiteralValue_Int32();
  }

  late final _inflate_LiteralValue_Int32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Int32');
  late final _inflate_LiteralValue_Int32 = _inflate_LiteralValue_Int32Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Int64() {
    return _inflate_LiteralValue_Int64();
  }

  late final _inflate_LiteralValue_Int64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Int64');
  late final _inflate_LiteralValue_Int64 = _inflate_LiteralValue_Int64Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Float32() {
    return _inflate_LiteralValue_Float32();
  }

  late final _inflate_LiteralValue_Float32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Float32');
  late final _inflate_LiteralValue_Float32 = _inflate_LiteralValue_Float32Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Float64() {
    return _inflate_LiteralValue_Float64();
  }

  late final _inflate_LiteralValue_Float64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Float64');
  late final _inflate_LiteralValue_Float64 = _inflate_LiteralValue_Float64Ptr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Range() {
    return _inflate_LiteralValue_Range();
  }

  late final _inflate_LiteralValue_RangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Range');
  late final _inflate_LiteralValue_Range = _inflate_LiteralValue_RangePtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_DateTime() {
    return _inflate_LiteralValue_DateTime();
  }

  late final _inflate_LiteralValue_DateTimePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_DateTime');
  late final _inflate_LiteralValue_DateTime = _inflate_LiteralValue_DateTimePtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<LiteralValueKind> inflate_LiteralValue_Duration() {
    return _inflate_LiteralValue_Duration();
  }

  late final _inflate_LiteralValue_DurationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<LiteralValueKind> Function()>>(
          'inflate_LiteralValue_Duration');
  late final _inflate_LiteralValue_Duration = _inflate_LiteralValue_DurationPtr
      .asFunction<ffi.Pointer<LiteralValueKind> Function()>();

  ffi.Pointer<NullValuesKind> inflate_NullValues_AllColumnsSingle() {
    return _inflate_NullValues_AllColumnsSingle();
  }

  late final _inflate_NullValues_AllColumnsSinglePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NullValuesKind> Function()>>(
          'inflate_NullValues_AllColumnsSingle');
  late final _inflate_NullValues_AllColumnsSingle =
      _inflate_NullValues_AllColumnsSinglePtr
          .asFunction<ffi.Pointer<NullValuesKind> Function()>();

  ffi.Pointer<NullValuesKind> inflate_NullValues_AllColumns() {
    return _inflate_NullValues_AllColumns();
  }

  late final _inflate_NullValues_AllColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NullValuesKind> Function()>>(
          'inflate_NullValues_AllColumns');
  late final _inflate_NullValues_AllColumns = _inflate_NullValues_AllColumnsPtr
      .asFunction<ffi.Pointer<NullValuesKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RowCount extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  @ffi.Uint32()
  external int offset;
}

class wire_NullValues_AllColumnsSingle extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_NullValues_AllColumns extends ffi.Struct {
  external ffi.Pointer<wire_StringList> field0;
}

class NullValuesKind extends ffi.Union {
  external ffi.Pointer<wire_NullValues_AllColumnsSingle> AllColumnsSingle;

  external ffi.Pointer<wire_NullValues_AllColumns> AllColumns;
}

class wire_NullValues extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<NullValuesKind> kind;
}

class wire_uint_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint32> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPDataFrame extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_DataFrame extends ffi.Struct {
  external wire_RwLockPDataFrame field0;
}

class wire_float_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Double> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPLazyFrame extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_LazyFrame extends ffi.Struct {
  external wire_RwLockPLazyFrame field0;
}

class wire_Expr_Alias extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;

  external ffi.Pointer<wire_uint_8_list> field1;
}

class wire_Expr extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ExprKind> kind;
}

class ExprKind extends ffi.Union {
  external ffi.Pointer<wire_Expr_Alias> Alias;

  external ffi.Pointer<wire_Expr_Column> Column;

  external ffi.Pointer<wire_Expr_Columns> Columns;

  external ffi.Pointer<wire_Expr_DtypeColumn> DtypeColumn;

  external ffi.Pointer<wire_Expr_Literal> Literal;

  external ffi.Pointer<wire_Expr_BinaryExpr> BinaryExpr;

  external ffi.Pointer<wire_Expr_Cast> Cast;

  external ffi.Pointer<wire_Expr_Sort> Sort;

  external ffi.Pointer<wire_Expr_Take> Take;

  external ffi.Pointer<wire_Expr_Agg> Agg;

  external ffi.Pointer<wire_Expr_Ternary> Ternary;

  external ffi.Pointer<wire_Expr_Explode> Explode;

  external ffi.Pointer<wire_Expr_Filter> Filter;

  external ffi.Pointer<wire_Expr_Wildcard> Wildcard;

  external ffi.Pointer<wire_Expr_Slice> Slice;

  external ffi.Pointer<wire_Expr_Exclude> Exclude;

  external ffi.Pointer<wire_Expr_KeepName> KeepName;

  external ffi.Pointer<wire_Expr_Count> Count;

  external ffi.Pointer<wire_Expr_Nth> Nth;
}

class wire_Expr_Column extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_Expr_Columns extends ffi.Struct {
  external ffi.Pointer<wire_StringList> field0;
}

class wire_Expr_DtypeColumn extends ffi.Struct {
  external ffi.Pointer<wire_list_data_type> field0;
}

class wire_list_data_type extends ffi.Struct {
  external ffi.Pointer<wire_DataType> ptr;

  @ffi.Int32()
  external int len;
}

class wire_DataType extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DataTypeKind> kind;
}

class DataTypeKind extends ffi.Union {
  external ffi.Pointer<wire_DataType_Boolean> Boolean;

  external ffi.Pointer<wire_DataType_UInt8> UInt8;

  external ffi.Pointer<wire_DataType_UInt16> UInt16;

  external ffi.Pointer<wire_DataType_UInt32> UInt32;

  external ffi.Pointer<wire_DataType_UInt64> UInt64;

  external ffi.Pointer<wire_DataType_Int8> Int8;

  external ffi.Pointer<wire_DataType_Int16> Int16;

  external ffi.Pointer<wire_DataType_Int32> Int32;

  external ffi.Pointer<wire_DataType_Int64> Int64;

  external ffi.Pointer<wire_DataType_Float32> Float32;

  external ffi.Pointer<wire_DataType_Float64> Float64;

  external ffi.Pointer<wire_DataType_Utf8> Utf8;

  external ffi.Pointer<wire_DataType_Binary> Binary;

  external ffi.Pointer<wire_DataType_Date> Date;

  external ffi.Pointer<wire_DataType_Datetime> Datetime;

  external ffi.Pointer<wire_DataType_Duration> Duration;

  external ffi.Pointer<wire_DataType_Time> Time;

  external ffi.Pointer<wire_DataType_List> List;

  external ffi.Pointer<wire_DataType_Struct> Struct;

  external ffi.Pointer<wire_DataType_Unknown> Unknown;
}

class wire_DataType_Boolean extends ffi.Opaque {}

class wire_DataType_UInt8 extends ffi.Opaque {}

class wire_DataType_UInt16 extends ffi.Opaque {}

class wire_DataType_UInt32 extends ffi.Opaque {}

class wire_DataType_UInt64 extends ffi.Opaque {}

class wire_DataType_Int8 extends ffi.Opaque {}

class wire_DataType_Int16 extends ffi.Opaque {}

class wire_DataType_Int32 extends ffi.Opaque {}

class wire_DataType_Int64 extends ffi.Opaque {}

class wire_DataType_Float32 extends ffi.Opaque {}

class wire_DataType_Float64 extends ffi.Opaque {}

class wire_DataType_Utf8 extends ffi.Opaque {}

class wire_DataType_Binary extends ffi.Opaque {}

class wire_DataType_Date extends ffi.Opaque {}

class wire_DataType_Datetime extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  external ffi.Pointer<wire_uint_8_list> field1;
}

class wire_DataType_Duration extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class wire_DataType_Time extends ffi.Opaque {}

class wire_DataType_List extends ffi.Struct {
  external ffi.Pointer<wire_DataType> field0;
}

class wire_DataType_Struct extends ffi.Struct {
  external ffi.Pointer<wire_list_field> field0;
}

class wire_list_field extends ffi.Struct {
  external ffi.Pointer<wire_Field> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Field extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external wire_DataType dtype;
}

class wire_DataType_Unknown extends ffi.Opaque {}

class wire_Expr_Literal extends ffi.Struct {
  external ffi.Pointer<wire_LiteralValue> field0;
}

class wire_LiteralValue extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<LiteralValueKind> kind;
}

class LiteralValueKind extends ffi.Union {
  external ffi.Pointer<wire_LiteralValue_Boolean> Boolean;

  external ffi.Pointer<wire_LiteralValue_Utf8> Utf8;

  external ffi.Pointer<wire_LiteralValue_Binary> Binary;

  external ffi.Pointer<wire_LiteralValue_UInt8> UInt8;

  external ffi.Pointer<wire_LiteralValue_UInt16> UInt16;

  external ffi.Pointer<wire_LiteralValue_UInt32> UInt32;

  external ffi.Pointer<wire_LiteralValue_UInt64> UInt64;

  external ffi.Pointer<wire_LiteralValue_Int8> Int8;

  external ffi.Pointer<wire_LiteralValue_Int16> Int16;

  external ffi.Pointer<wire_LiteralValue_Int32> Int32;

  external ffi.Pointer<wire_LiteralValue_Int64> Int64;

  external ffi.Pointer<wire_LiteralValue_Float32> Float32;

  external ffi.Pointer<wire_LiteralValue_Float64> Float64;

  external ffi.Pointer<wire_LiteralValue_Range> Range;

  external ffi.Pointer<wire_LiteralValue_DateTime> DateTime;

  external ffi.Pointer<wire_LiteralValue_Duration> Duration;
}

class wire_LiteralValue_Boolean extends ffi.Struct {
  @ffi.Bool()
  external bool field0;
}

class wire_LiteralValue_Utf8 extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_LiteralValue_Binary extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_LiteralValue_UInt8 extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

class wire_LiteralValue_UInt16 extends ffi.Struct {
  @ffi.Uint16()
  external int field0;
}

class wire_LiteralValue_UInt32 extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

class wire_LiteralValue_UInt64 extends ffi.Struct {
  @ffi.Uint64()
  external int field0;
}

class wire_LiteralValue_Int8 extends ffi.Struct {
  @ffi.Int8()
  external int field0;
}

class wire_LiteralValue_Int16 extends ffi.Struct {
  @ffi.Int16()
  external int field0;
}

class wire_LiteralValue_Int32 extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

class wire_LiteralValue_Int64 extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

class wire_LiteralValue_Float32 extends ffi.Struct {
  @ffi.Float()
  external double field0;
}

class wire_LiteralValue_Float64 extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

class wire_LiteralValue_Range extends ffi.Struct {
  @ffi.Int64()
  external int low;

  @ffi.Int64()
  external int high;

  external ffi.Pointer<wire_DataType> data_type;
}

class wire_LiteralValue_DateTime extends ffi.Struct {
  @ffi.Int64()
  external int field0;

  @ffi.Int32()
  external int field1;
}

class wire_LiteralValue_Duration extends ffi.Struct {
  @ffi.Int64()
  external int field0;

  @ffi.Int32()
  external int field1;
}

class wire_Expr_BinaryExpr extends ffi.Struct {
  external ffi.Pointer<wire_Expr> left;

  @ffi.Int32()
  external int op;

  external ffi.Pointer<wire_Expr> right;
}

class wire_Expr_Cast extends ffi.Struct {
  external ffi.Pointer<wire_Expr> expr;

  external ffi.Pointer<wire_DataType> data_type;

  @ffi.Bool()
  external bool strict;
}

class wire_Expr_Sort extends ffi.Struct {
  external ffi.Pointer<wire_Expr> expr;

  external ffi.Pointer<wire_SortOptions> options;
}

class wire_SortOptions extends ffi.Struct {
  @ffi.Bool()
  external bool descending;

  @ffi.Bool()
  external bool nulls_last;
}

class wire_Expr_Take extends ffi.Struct {
  external ffi.Pointer<wire_Expr> expr;

  external ffi.Pointer<wire_Expr> idx;
}

class wire_Expr_Agg extends ffi.Struct {
  external ffi.Pointer<wire_AggExpr> field0;
}

class wire_AggExpr extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<AggExprKind> kind;
}

class AggExprKind extends ffi.Union {
  external ffi.Pointer<wire_AggExpr_Min> Min;

  external ffi.Pointer<wire_AggExpr_Max> Max;

  external ffi.Pointer<wire_AggExpr_Median> Median;

  external ffi.Pointer<wire_AggExpr_NUnique> NUnique;

  external ffi.Pointer<wire_AggExpr_First> First;

  external ffi.Pointer<wire_AggExpr_Last> Last;

  external ffi.Pointer<wire_AggExpr_Mean> Mean;

  external ffi.Pointer<wire_AggExpr_List> List;

  external ffi.Pointer<wire_AggExpr_Count> Count;

  external ffi.Pointer<wire_AggExpr_Quantile> Quantile;

  external ffi.Pointer<wire_AggExpr_Sum> Sum;

  external ffi.Pointer<wire_AggExpr_AggGroups> AggGroups;

  external ffi.Pointer<wire_AggExpr_Std> Std;
}

class wire_AggExpr_Min extends ffi.Struct {
  external ffi.Pointer<wire_Expr> input;

  @ffi.Bool()
  external bool propagate_nans;
}

class wire_AggExpr_Max extends ffi.Struct {
  external ffi.Pointer<wire_Expr> input;

  @ffi.Bool()
  external bool propagate_nans;
}

class wire_AggExpr_Median extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_NUnique extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_First extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Last extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Mean extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_List extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Count extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Quantile extends ffi.Struct {
  external ffi.Pointer<wire_Expr> expr;

  external ffi.Pointer<wire_Expr> quantile;

  @ffi.Int32()
  external int interpol;
}

class wire_AggExpr_Sum extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_AggGroups extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_AggExpr_Std extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;

  @ffi.Uint8()
  external int field1;
}

class wire_Expr_Ternary extends ffi.Struct {
  external ffi.Pointer<wire_Expr> predicate;

  external ffi.Pointer<wire_Expr> truthy;

  external ffi.Pointer<wire_Expr> falsy;
}

class wire_Expr_Explode extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_Expr_Filter extends ffi.Struct {
  external ffi.Pointer<wire_Expr> input;

  external ffi.Pointer<wire_Expr> by;
}

class wire_Expr_Wildcard extends ffi.Opaque {}

class wire_Expr_Slice extends ffi.Struct {
  external ffi.Pointer<wire_Expr> input;

  external ffi.Pointer<wire_Expr> offset;

  external ffi.Pointer<wire_Expr> length;
}

class wire_Expr_Exclude extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;

  external ffi.Pointer<wire_list_excluded> field1;
}

class wire_list_excluded extends ffi.Struct {
  external ffi.Pointer<wire_Excluded> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Excluded extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ExcludedKind> kind;
}

class ExcludedKind extends ffi.Union {
  external ffi.Pointer<wire_Excluded_Name> Name;

  external ffi.Pointer<wire_Excluded_Dtype> Dtype;
}

class wire_Excluded_Name extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_Excluded_Dtype extends ffi.Struct {
  external ffi.Pointer<wire_DataType> field0;
}

class wire_Expr_KeepName extends ffi.Struct {
  external ffi.Pointer<wire_Expr> field0;
}

class wire_Expr_Count extends ffi.Opaque {}

class wire_Expr_Nth extends ffi.Struct {
  @ffi.Int64()
  external int field0;
}

class wire_list_expr extends ffi.Struct {
  external ffi.Pointer<wire_Expr> ptr;

  @ffi.Int32()
  external int len;
}

class wire_int_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

class wire_int_64_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int64> ptr;

  @ffi.Int32()
  external int len;
}

class wire_RwLockPSeries extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_Series extends ffi.Struct {
  external wire_RwLockPSeries field0;
}

class wire_RwLockPLazyGroupBy extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_LazyGroupBy extends ffi.Struct {
  external wire_RwLockPLazyGroupBy field0;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
